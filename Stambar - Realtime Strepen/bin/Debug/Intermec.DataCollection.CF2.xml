<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intermec.DataCollection.CF2</name>
    </assembly>
    <members>
        <member name="T:Intermec.ErrorHandling">
            <summary>
            Summary description for ErrorHandling.
            </summary>
            
        </member>
        <member name="T:Intermec.DataCollection.VirtualWedge">
            <exclude /> 
            <summary>
            <para><b>
            This class has been deprecated and may not be supported by future revisions of this 
            Resource Kit.
            </b></para>
            <para>
            The Intermec.DataCollection.VirtualWedge class allows you to enable or disable the 
            virtual wedge, and set and get selected virtual wedge parameters.
            </para>
            /// 
            </summary>
            <remarks>
            <para>
            The virtual wedge retrieves scanned Automatic Data Collection (ADC) data and sends 
            it to the keyboard driver so that the Intermec computer can receive and interpret 
            the data as keyboard input. 
            </para>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for 
            multi-threaded operations. Instance members are not guaranteed to be thread safe 
            and each instance should be used only within a single thread.
            </para>
            <para><b>Notes: </b>
            On all Intermec computers, the virtual wedge is enabled by default. However, 
            calling any function initializing a connection to the scanner (such as ITCSCAN_Open) 
            automatically disables the wedge. The wedge remains disabled until the connection to 
            the scanner is closed.
            </para>
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.VirtualWedge.#ctor">
            <summary> Deprecated </summary>        
        </member>
        <member name="M:Intermec.DataCollection.VirtualWedge.#ctor(System.String)">
            <summary> Deprecated </summary>
        </member>
        <member name="P:Intermec.DataCollection.VirtualWedge.Enabled">
            <summary> Deprecated </summary>
        </member>
        <member name="P:Intermec.DataCollection.VirtualWedge.DataGrid">
            <summary> Deprecated </summary>
        </member>
        <member name="P:Intermec.DataCollection.VirtualWedge.Preamble">
            <summary>
            Deprecated. Use SymbologyOptions class for preamble.  
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.VirtualWedge.Postamble">
            <summary>
            Deprecated. Use SymbologyOptions class for postamble.  
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentSignatureScenario">
            <summary>
            When you create an instance of the DocumentCapture class, you also create four instances
            of the DocumentSignatureScenario class if it is supported in DocumentCapture class with selected 
            image source. Each instance (also called a SignatureScenario1,
            SignatureScenario2, SignatureScenario3, and SignatureScenario4) can be selected as
            a property in the DocumentCapture instance. 
            </summary>
            <remarks>
            <para>
            Each instance (SignatureScenario1, SignatureScenario2, SignatureScenario3, and SignatureScenario4)
            includes its own properties, such as symbology type, bar code lenth, or bar code mask, that define 
            the conditionings that will automatically trigger a signature capture. By default, the properties 
            for each instance are copied from the current settings on the computer (configured on the computer
            by using the Intermec Settings application).
            </para>
            <note><para>
            Bar codes that meet the identifer, lenth, and mask values will trigger the signature capture
            scenario as specified, and bar code data is returnned and stored in a xml file (if it is supported).
            If this interferes with other data collection activities, Intermec recommends making  your
            signature capture scenario definitions as specific as possible. Specify a scenario symbology,
            bar code lenth, and mask combination that is unlikely to occur in another bar code to avoid
            interference with regular decoding.
            </para></note>
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.DocumentSignatureScenario.#ctor(System.Int32)">
            <exclude />
            <summary>
            Constructor of DocumentSignatureScenario class.
            </summary>
            <param name="Idx">The index of scenario</param>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioContrastEnhancement">
            <summary>
            Enables contrast enhancement (also known as dynamic stretching) of the capture image.
            This property uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> of the 
            <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>      
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            //set ICScenarioContrastEnhancement value
                            DocSig.SignatureScenario1.ICScenarioContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo;     
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            'set ICScenarioContrastEnhancement value
                            DocSig.SignatureScenario1.ICScenarioContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo    
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioTextEnhancement">
            <summary>
            Enables text enhancement, which controls the readability of text in the image. 
            This property uses the <see cref="P:Intermec.DataCollection.ImageConditioning.TextEnhancement"/> property of the 
            <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>        
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            //set ICScenarioTextEnhancement value
                            DocSig.SignatureScenario1.ICScenarioTextEnhancement = ImageConditioning.TextEnhancementValue.Medium;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            'set ICScenarioTextEnhancement value
                            DocSig.SignatureScenario1.ICScenarioTextEnhancement = ImageConditioning.TextEnhancementValue.Medium
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioImageRotation">
            <summary>
            Rotates the capture image counterclockwise from its original position by 
            the specified amount. This property uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ImageRotation"/>
            property of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>     
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            //set ICScenarioImageRotation value
                            DocSig.SignatureScenario1.ICScenarioImageRotation = ImageConditioning.ImageRotationValue.Degrees_90;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            'set ICScenarioImageRotation value
                            DocSig.SignatureScenario1.ICScenarioImageRotation = ImageConditioning.ImageRotationValue.Degrees_90
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioNoiseReduction">
            <summary>
            Reduces noise resulting from the edge enhancement process. This property uses the 
            <see cref="P:Intermec.DataCollection.ImageConditioning.NoiseReduction"/> property of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>     
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            //set ICScenarioNoiseReduction value
                            DocSig.SignatureScenario1.ICScenarioNoiseReduction = 2;              
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            'set ICScenarioNoiseReduction value
                            DocSig.SignatureScenario1.ICScenarioNoiseReduction = 2            
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioImageLightingCorrection">
            <summary>
            Sets or gets the current value for image lighting correction, using the 
            <see cref="P:Intermec.DataCollection.ImageConditioning.ImageLightingCorrection"/> property of the 
            <see cref="T:Intermec.DataCollection.ImageConditioning"/>class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>     
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            //set ICScenarioImageLightingCorrection value
                            DocSig.SignatureScenario1.ICScenarioImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.None;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            'set ICScenarioImageLightingCorrection value
                            DocSig.SignatureScenario1.ICScenarioImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.None
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioBrightness">
            <summary>
            Lightens or darkens the image. This property uses the <see cref="P:Intermec.DataCollection.ImageConditioning.Brightness"/>
            setting of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.      
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>     
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            //set ICScenarioBrightness value
                            DocSig.SignatureScenario1.ICScenarioBrightness = 1;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            'set ICScenarioBrightness value
                            DocSig.SignatureScenario1.ICScenarioBrightness = 1
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioColorMode">
            <summary>
            Sets the color mode. This property uses the 
            <see cref="P:Intermec.DataCollection.ImageConditioning.ColorMode"/> setting of the 
            <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.      
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>     
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            //set ICScenarioColorMode value
                            DocSig.SignatureScenario1.ICScenarioColorMode = ImageConditioning.ColorModeValue.None;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            'set ICScenarioColorMode value
                            DocSig.SignatureScenario1.ICScenarioColorMode = ImageConditioning.ColorModeValue.None
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioColorModeBrightnessThreshold">
            <summary>
            When ColorMode is set to monochrome, this property determines the overall image brightness 
            by setting the general level at which pixels are converted from greyscale to either black 
            or white. This property uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThreshold"/>
            setting of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.             
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>     
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            DocSig.SignatureScenario1.ICScenarioColorMode = ImageConditioning.ColorModeValue.Monochrome_Normal;
                            DocSig.SignatureScenario1.ICScenarioColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.Dark;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            DocSig.SignatureScenario1.ICScenarioColorMode = ImageConditioning.ColorModeValue.Monochrome_Normal
                            DocSig.SignatureScenario1.ICScenarioColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.Dark
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioOutputCompression">
            <summary>
            Sets the output file type using the <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompression"/>
            property of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.                
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>     
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            DocSig.SignatureScenario1.ICScenarioOutputCompression = ImageConditioning.OutputCompressionValue.Bitmap;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            DocSig.SignatureScenario1.ICScenarioOutputCompression = ImageConditioning.OutputCompressionValue.Bitmap
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ICScenarioOutputCompressionQuality">
            <summary>
            Controls the JPEG compression level of the output file image using the 
            <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompressionQuality"/> property of 
            the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.                     
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>     
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                        
                            DocSig.SignatureScenario1.ICScenarioOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                            DocSig.SignatureScenario1.ICScenarioOutputCompressionQuality = 80;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            DocSig.SignatureScenario1.ICScenarioOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                            DocSig.SignatureScenario1.ICScenarioOutputCompressionQuality = 80
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioEnable">
            ----------------------------------------------------------------------------------------------------------------		  
            <summary>
            Selects the ScenarioEnable type for the current scenario. 
            </summary>
            <remarks>
            <para>
            In Regular mode, if the bar code matches other scenario properties such as 
            <see cref="T:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType"/> or <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeMask"/>, signature 
            capture is triggered and the capture area is defined by settings relative to 
            the size and position of the bar code label.
            </para>
            <para>
            In Framing mode (not supported by all imagers), the imager looks for calibrated 
            markings at the corners of the capture area.
            </para>
            <para>
            When either ScenarioEnable type is enabled, a bar code read triggers the current signature capture 
            scenario if the barcode identifier, barcode length and barcode mask conditions are satisfied.
            </para>        
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public Form1()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                            DocSig.SignatureScenario1.ScenarioEnable = DocumentSignatureScenario.EnableType.Regular;                
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            DocSig.SignatureScenario1.ScenarioEnable = DocumentSignatureScenario.EnableType.Regular                
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeIdentifier">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Selects the bar code symbology that triggers the signature capture.
            </summary>
            <remarks>
            <para>
            If set to ID_NULL, all supported symbologies trigger a signature capture.
            </para>             
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public Form1()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                            //sets Interleaved 2 of 5 (ID_ITF) as the symbology that triggers a signature capture.
                            DocSig.SignatureScenario1.ScenarioBarcodeIdentifier = DocumentSignatureScenario.BarcodeIdentifierType.ID_ITF;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            'sets Interleaved 2 of 5 (ID_ITF) as the symbology that triggers a signature capture.
                            DocSig.SignatureScenario1.ScenarioBarcodeIdentifier = DocumentSignatureScenario.BarcodeIdentifierType.ID_ITF
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeLength">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the bar code length (in characters) which triggers the signature capture. 
            If the number of characters in a scanned bar code matches this length, the signature 
            capture occurs.
            </summary>
            <remarks>
            <para>
            Range is 0 to 0xffff. If set to 0, any successful bar code read triggers a signature capture.
            </para>             
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public Form1()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                            DocSig.SignatureScenario1.ScenarioBarcodeLength = 0;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            DocSig.SignatureScenario1.ScenarioBarcodeLength = 0
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeMask">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Specifies a bar code mask string (26 characters maximum) that triggers the signature capture.       
            </summary>
            <remarks>
            <para>
            If no mask is specified, editing is applied to all data received (same as specifying * 
            as the mask), and any bar code successfully read triggers the signature capture.
            </para>     
            <para>
            String is converted to ASCII.
            </para>
            <para>
            Wild card characters are as follows:
            <list type="table">
            <listheader>
            <term>Wild Card</term>
            <description>Definition</description>
            <description>Example</description>
            </listheader>
            <item>
            <term>*</term>
            <description>Zero or more characters</description>
            <description>*123* = any code with a consecutive 123</description>
            </item>
            <item>
            <term>?</term>
            <description>one character</description>
            <description>???A* = any code with A in the fourth position followed by zero or more characters</description>
            </item>
            <item>
            <term>\ + wildcard</term>
            <description>a backslash plus a special character takes away the wildcard function</description>
            <description>*1\*3* = any code with a consecutive 1*3 anywhere in the data</description>
            </item>
            <item>
            <term>\C</term>
            <description>non-numerical value</description>
            <description>\C* = any code that starts with a non-numerical value</description>
            </item>
            <item>
            <term>\N</term>
            <description>numercial value</description>
            <description>*\N* = any code that contains a numerical value</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public Form1()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                            DocSig.SignatureScenario1.ScenarioBarcodeMask = "*";
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            DocSig.SignatureScenario1.ScenarioBarcodeMask = "*"
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeBinaryMask">
            <summary>
            Specifies a bar code mask with binary (26 maximum length) that triggers the signatue capture.
            </summary>
            <remarks>        
            <para>
            Wild card characters are as follows:
            <list type="table">
            <listheader>
            <term>Wild Card</term>
            <description>Definition</description>
            <description>Example</description>
            </listheader>
            <item>
            <term>*</term>
            <description>Zero or more characters</description>
            <description>*123* = any code with a consecutive 123</description>
            </item>
            <item>
            <term>?</term>
            <description>one character</description>
            <description>???A* = any code with A in the fourth position followed by zero or more characters</description>
            </item>
            <item>
            <term>\ + wildcard</term>
            <description>a backslash plus a special character takes away the wildcard function</description>
            <description>*1\*3* = any code with a consecutive 1*3 anywhere in the data</description>
            </item>
            <item>
            <term>\C</term>
            <description>non-numerical value</description>
            <description>\C* = any code that starts with a non-numerical value</description>
            </item>
            <item>
            <term>\N</term>
            <description>numercial value</description>
            <description>*\N* = any code that contains a numerical value</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public Form1()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                            byte[] myBinary = new byte[1];
                            myBinary[0] = 0x2A;
                            SignatureCap.SignatureScenario1.ScenarioBarcodeBinaryMask = myBinary;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            Dim myBinary As Byte() = New Byte(0) {}
                            myBinary(1) = &amp;H2A
                            DocSig.SignatureScenario1.ScenarioBarcodeBinaryMask = myBinary
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeWidth">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Width (in mm) of the bar code that triggers a signature capture. 
            </summary>
            <remarks>        
            <para>        
            Range is 0 to 0xffff. This setting is ignored if <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioEnable"/> is
            set to Framing.
            </para>       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                      private Intermec.DataCollection.DocumentCapture DocSig;
                      public Form1()
                      {
                          InitializeComponent();
                          DocSig = new DocumentCapture();
                          DocSig.SignatureScenario1.ScenarioBarcodeWidth = 71;
                      }
                      </code>
                      <code lang="VB.NET">
                      Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                      Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                          DocSig = new DocumentCapture()
                          DocSig.SignatureScenario1.ScenarioBarcodeWidth = 71
                      End Sub
                      </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeHeight">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Height (in mm) of the bar code that triggers a signature capture. 
            </summary>
            <remarks>
            <para>
            Range is 0 to 0xffff. Not suported if <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioEnable"/> is set 
            to Framing mode.
            </para>       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                       private Intermec.DataCollection.DocumentCapture DocSig;
                       public Form1()
                       {
                           InitializeComponent();
                           DocSig = new DocumentCapture();
                           DocSig.SignatureScenario1.ScenarioBarcodeHeight = 17;
                       }
                       </code>
                       <code lang="VB.NET">
                       Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                       Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                           DocSig = new DocumentCapture()
                           DocSig.SignatureScenario1.ScenarioBarcodeHeight = 17
                       End Sub
                       </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioHorizontalOffset">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Horizontal offset (in mm) from the center of the bar code to the center of the capture area.
            See an <see cref="!:illustration"/>.
            </summary>
            <remarks>
            <para>
            Range is -0x7fff to 0x7fff. This setting is ignored if <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioEnable"/>
            is set to Framing.
            </para>       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.DocumentCapture DocSig;
                        public Form1()
                        {
                            InitializeComponent();
                            DocSig = new DocumentCapture();
                            DocSig.SignatureScenario1.ScenarioHorizontalOffset = 35;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                        Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            DocSig = new DocumentCapture()
                            DocSig.SignatureScenario1.ScenarioHorizontalOffset = 35
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioVerticalOffset">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Vertical offset (in mm) from the center of the bar code to the center of the capture area.
            see an <see cref="!:illustration"/>
            </summary>
            <remarks>
            <para>
            Range is -0x7fff to 0x7fff. This setting is ignored if <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioEnable"/>
            is set to Framing
            </para>      
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                       private Intermec.DataCollection.DocumentCapture DocSig;
                       public Form1()
                       {
                           InitializeComponent();
                           DocSig = new DocumentCapture();
                            DocSig.SignatureScenario1.ScenarioVerticalOffset = 22;
                       }
                       </code>
                       <code lang="VB.NET">
                       Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                       Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                           DocSig = new DocumentCapture()
                            DocSig.SignatureScenario1.ScenarioVerticalOffset = 22
                       End Sub
                       </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioAreaWidth">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the width (in mm) of the capture area.
            See an <see cref="!:illustration"/>
            </summary>
            <remarks>
            <para>
            Range is 0 to 0xffff. This setting is ignored if <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioEnable"/>
            is set to Framing.
            </para>        
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                      private Intermec.DataCollection.DocumentCapture DocSig;
                      public Form1()
                      {
                          InitializeComponent();
                          DocSig = new DocumentCapture();
                          DocSig.SignatureScenario1.ScenarioAreaWidth = 74;
                      }
                      </code>
                      <code lang="VB.NET">
                      Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                      Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                          DocSig = new DocumentCapture()
                          DocSig.SignatureScenario1.ScenarioAreaWidth = 74
                      End Sub
                      </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioAreaHeight">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the height (in mm) of the capture area.
            See an <see cref="!:illustration"/>
            </summary>
            <remarks>
            <para>
            Range is 0 to 0xffff. This property is ignored if <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioEnable"/>
            is set to Framing.
            </para>        
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                      private Intermec.DataCollection.DocumentCapture DocSig;
                      public Form1()
                      {
                          InitializeComponent();
                          DocSig = new DocumentCapture();
                          DocSig.SignatureScenario1.ScenarioAreaHeight = 22;
                      }
                      </code>
                      <code lang="VB.NET">
                      Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                      Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                          DocSig = new DocumentCapture()
                          DocSig.SignatureScenario1.ScenarioAreaHeight = 22
                      End Sub
                      </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioAutomaticCorrection">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Enables automatic image correction. This process extracts horizontal and vertical lines 
            from the image and uses them to correct the captured area.
            <note>
            Enable this property only if the area to be captured includes a visible frame or other 
            marking that delineates the area. Otherwise, auto-correction may detect the wrong edges 
            of the document, resulting in an incorrectly sized image.
            </note>
            </summary>
            <remarks>   
            <para>
            This setting is ignored if <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioEnable"/> is set to Framing mode.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                      private Intermec.DataCollection.DocumentCapture DocSig;
                      public Form1()
                      {
                          InitializeComponent();
                          DocSig = new DocumentCapture();
                          DocSig.SignatureScenario1.ScenarioAutomaticCorrection = DocumentSignatureScenario.AutomaticCorrectionType.Disabled;
                      }
                      </code>
                      <code lang="VB.NET">
                      Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                      Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                          DocSig = new DocumentCapture()
                          DocSig.SignatureScenario1.ScenarioAutomaticCorrection = DocumentSignatureScenario.AutomaticCorrectionType.Disabled
                      End Sub
                      </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioFocusCheck">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the level of focus check to perform on the bar code.
            </summary>
            <remarks>        
            <para>
            Use this setting to reject blurred signature captures.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> throws an exception when an error has occurred in 
            document capture.
            </exception>
            <example>
            <code>
                      private Intermec.DataCollection.DocumentCapture DocSig;
                      public Form1()
                      {
                          InitializeComponent();
                          DocSig = new DocumentCapture();
                          DocSig.SignatureScenario1.ScenarioFocusCheck = DocumentSignatureScenario.FocusType.Disabled;
                      }
                      </code>
                      <code lang="VB.NET">
                      Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                      Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                          DocSig = new DocumentCapture()
                          DocSig.SignatureScenario1.ScenarioFocusCheck = DocumentSignatureScenario.FocusType.Disabled
                      End Sub
                      </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioImageRatioCheck">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the percentage of pixels the capture image must have relative to the source image, 
            thus limiting the usable depth of field. 
            </summary>
            <remarks>
            <para>
            Range is 0 to 0x64. The higher the value, the more the depth of field is limited. 
            A value of 50 means that the capture area must have at least 50% of the number of 
            pixels of the source image.
            </para>       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> 
            throws an exception when an error has occurred in document capture.
            </exception>
            <example>
            This example sets an ImageRatioCheck value of 10%, meaning that the capture image 
            must have at least 10% of the number of pixels of the source image.
            <code>
                      private Intermec.DataCollection.DocumentCapture DocSig;
                      public Form1()
                      {
                          InitializeComponent();
                          DocSig = new DocumentCapture();
                          DocSig.SignatureScenario1.ScenarioImageRatioCheck = 10;
                      }
                      </code>
                      <code lang="VB.NET">
                      Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                      Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                          DocSig = new DocumentCapture()
                          DocSig.SignatureScenario1.ScenarioImageRatioCheck = 10
                      End Sub
                      </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioProjectiveMappingResolution">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the level of projective mapping, which adjusts the resolution of captured images.
            </summary>
            <remarks>       
            <para>
            When projective mapping is enabled, the area captured is adjusted to a different size:
            </para>
            <para>
            <b>Automatic </b>adjusts the resolution automatically.
            </para>
            <para>
            <b>Fixed  </b>adjusts the size of the capture to a preset width based on the narrowest 
            element. For example, "Fixed_1Pixel" adjusts the capture size so that the narrowest bar 
            code element is 1 pixel wide.
            </para>
            <para>
            When projective mapping is disabled, the system returns the smallest rectangle image.
            </para>
            <para>
            Set projective mapping to a fixed value to ensure that the captured image is always the 
            same size. If projective mapping is set to a fixed value and the captured image is larger 
            than the original image, the system sends a signature capture failure event with the 
            "invalid parameters" failure code.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException"> 
            throws an exception when an error has occurred in document capture.
            </exception>
            <example>
            <code>
                      private Intermec.DataCollection.DocumentCapture DocSig;
                      public Form1()
                      {
                          InitializeComponent();
                          DocSig = new DocumentCapture();
                          DocSig.SignatureScenario1.ScenarioProjectiveMappingResolution = DocumentSignatureScenario.ProjectiveMappingResolutionType.Disabled;
                      }
                      </code>
                      <code lang="VB.NET">
                      Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                      Private Sub Form1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                          DocSig = new DocumentCapture()
                          DocSig.SignatureScenario1.ScenarioProjectiveMappingResolution = DocumentSignatureScenario.ProjectiveMappingResolutionType.Disabled
                      End Sub
                      </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="T:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeIdentifier"/> property.
            </summary>        
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_NULL">
            <summary>Any supported symbology.</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_EAN13">
            <summary>EAN-13</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_EAN8">
            <summary> EAN-8</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_UPCA">
            <summary> UPC-A</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_UPCE">
            <summary> UPC-E</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_ITF">
            <summary> Interleaved 2 of 5</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_128">
            <summary> Code 128 </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_93">
            <summary> Code 93 </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_PDF">
            <summary> PDF417 </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_EAN128">
            <summary> GS1-128 /EAN-128 </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_DATAMATRIX">
            <summary> DataMatrix </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_QR">
            <summary> QR Code </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.BarcodeIdentifierType.ID_MAXICODE">
            <summary> Maxicode </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentSignatureScenario.EnableType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioEnable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.EnableType.Disabled">
            <summary>
            Disables signature capture for selected scenario.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.EnableType.Regular">
            <summary>
            Bar code locator. Imager reads bar code and a signature capture is triggered
            if the bar code matches other scenario properites (such as <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeIdentifier"/>
            or <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioBarcodeMask"/>           
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.EnableType.Framing">
            <summary>
            Framing mode. Imager looks for calibrated markings at the corners of the 
            capture area (not supported by all imagers).
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentSignatureScenario.AutomaticCorrectionType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioAutomaticCorrection"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.AutomaticCorrectionType.Disabled">
            <summary>No automatic correction</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.AutomaticCorrectionType.HorizontalOnly">
            <summary>Horizontal correction only.</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.AutomaticCorrectionType.VerticalOnly">
            <summary>Vertical  correction only.</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.AutomaticCorrectionType.Both">
            <summary>Enables both horizontal and vertical correction.</summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentSignatureScenario.FocusType">
            <summary>
            An enum data type for type <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioFocusCheck"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.FocusType.Disabled">
            <summary>No focus check.</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.FocusType.Medium">
            <summary>Medium level.</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.FocusType.High">
            <summary>High level.</summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentSignatureScenario.ProjectiveMappingResolutionType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentSignatureScenario.ScenarioProjectiveMappingResolution"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.ProjectiveMappingResolutionType.Disabled">
            <summary>
            Projective mapping disabled. Imager returns the smallest rectangle image containing 
            the capture area.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.ProjectiveMappingResolutionType.Automatic">
            <summary>
            Projective mapping is enabled and resolution is automatically adjusted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.ProjectiveMappingResolutionType.Fixed_1Pixel">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 1 pixel wide.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.ProjectiveMappingResolutionType.Fixed_2Pixels">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 2 pixels wide.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.ProjectiveMappingResolutionType.Fixed_3Pixels">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 3 pixels wide.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureScenario.ProjectiveMappingResolutionType.Fixed_4Pixels">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 4 pixels wide.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCaptureEventHandler">
            <exclude /> 
            <summary>
            The BarcodeReadEventHandler delegate represents the method that will handle the Capture 
            event of DocumentCaptureEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="DocCaptureEventArgs">
            An object of DocumentCaptureEventArgs class that passes information of captured document.
            </param>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCaptureGuidanceEventHandler">
            <exclude /> 
            <summary>
            The DocumentCaptureGuidanceEventHandler delegate represents the method that will handle the Guidance  
            event of GuidanceEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="DocCaptureGuidanceArgs">
            An object of GuidanceEventArgs class that passes document capture fails information.
            </param>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCaptureErrorEventHandler">
            <exclude /> 
            <summary>
            The DocumentCaptureErrorEventHandler delegate represents the method that will handle the Error   
            event of ErrorEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="DocCapErrorArgs">
            An object of ErrorEventArgs class that passes information of error.
            </param>
        </member>
        <member name="T:Intermec.DataCollection.SnapshotEventHandler">
            <exclude /> 
            <summary>
            The SnapshotEventHandler delegate represents the method that will handle the snap shot   
            event of DocumentSnapshotCaptureEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="SnapshotCaptureEventArgs">An object of DocumentSnapshotCaptureEventArgs 
            that passes information of snap shot</param>
        </member>
        <member name="T:Intermec.DataCollection.DocumentSignatureEventHandler">
            <exclude />
            <summary> 
            The DocumentSignatureEventHandler delegate represents the method that will handle the signature capture   
            event of DocumentSignatureCaptureEventArgs class.
            </summary>
            <param name="sender"></param>
            <param name="SignatureCaptureEventArgs"></param>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture">
            <summary>
            <para>
            This class enables document capture on Intermec computers with an imager 
            (Windows Mobile 6.1 and later platforms only). Documents of up to 8.5 in x 11 in 
            (or A4 in landscape orientation) can be captured.
            </para>
            <para>
            This class also provides options for snapshot and siganture capture images if supported
            by DocumentCapture constructor. 
            </para>  
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded 
            operations. Instance members are not guaranteed to be thread safe and each instance should 
            be used only within a single thread.
            </para>
            </summary>
            <remarks>   
            <para>
            This class provides settings to allow edge detection of a document, and capture to a file 
            with the following features.
            <list type="bullet">
            <item>Removal of keystone effects</item>item>
            <item>Auto Rotation to align document vertically</item>
            <item>Document detection by contrast evaluation</item>
            </list>
            </para>
            <para>
            Bar codes are not required for document capture. The entire document image must be in the 
            imager field of view, and the imager must be close enough to the document that the ratio 
            of document area to the overall image is greater than the image area capture ratio setting.    
            </para>
            <para>
            For best results, the background surface upon which the document is placed should be 
            uniform in color and in high contrast to the document itself.
            </para>    
            <para> 
            <b>Requirements:</b>
            <list type="bullet">
            <item>
            Intermec computer (running Windows Mobile 6.1 or later) with an imager capable of 
            performing image capture (such as the EA21), or a camera (CK70, CK71, and CN70 
            computers only).   
            </item>
            <item>
            License for Intermec Enhanced Mobile Document Imaging (eMDI). For more information, 
            contact your Intermec sales representative.   
            </item>
            <item>
            Data Collection Resource Kit version 3.40 or later. You need to install DC_Net.cab 
            on the Intermec computer to enable document capture functionality. This .cab file 
            is located at C:\Program Files\Intermec\Developer Library\Data Collection Resource Kit\Runtime.    
            </item>
            <note>
            This class supports Microsoft Compact Framework versions 2.0 and later.
            </note>    
            </list>
            </para>    
            </remarks>   
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.SignatureScenario1">
            <summary>
            A scenario object that sets and gets SignatureScenario1 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.SignatureScenario2">
            <summary>
            A scenario object that sets and gets SignatureScenario2 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.SignatureScenario3">
            <summary>
            A scenario object that sets and gets SignatureScenario3 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.SignatureScenario4">
            <summary>
            A scenario object that sets and gets SignatureScenario4 properties.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.#ctor">
            <summary>
            Default constructor of DocumentCapture class. 
            </summary>
            <remarks>
            <para>
            Support Document capture on Intermec Computers with an EA21 imager only.
            </para>
            <para>
            You can capture signature images through this constructor if it is supported.
            Such as, Intermec Computers CK70 and CN70 computers with EX25 and EA30 scanners
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureFirmwareSupportException"> 
            Throws an exception if the image conditioning version is earlier than 1.0. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        DocCap = new DocumentCapture();
                                    }
                                    catch (DocumentCaptureFirmwareSupportException FirmExp)
                                    {
                                        MessageBox.Show("FirmwareSupportException: " + FirmExp.Message);
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }
                                    catch (Exception exp)
                                    {
                                        MessageBox.Show(exp.Message);
                                    }
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    DocCap = New DocumentCapture()
                                Catch FirmExp As DocumentCaptureFirmwareSupportException
                                    MessageBox.Show("FirmwareSupportException: " + FirmExp.Message)
                                Catch DocCapExp As DocumentCaptureException
                                    MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message)
                                Catch exp As Exception
                                    MessageBox.Show(exp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.#ctor(System.String)">
            <summary>
            Overloaded Constructor specifying the image source.
            </summary>
            <param name="ImageSource">Name of the image source. Use "Camera" for the CN70, CK70, 
            and CK71. Not supported by other computers.
            </param>        
            <remarks>
            <para>
            To capture a document using this class:
            <list type="bullet">
            <item>
            Use this constructor to create a class instance, and specify Camera as the ImageSource.
            </item>
            <item>
            Enable the doucment capture with the <see cref="P:Intermec.DataCollection.DocumentCapture.EnableDocumentCapture"/> peroperty.
            </item>
            <item>
            Set the <see cref="P:Intermec.DataCollection.DocumentCapture.ViewFinderEnable"/>ViewFinderEnable property to true.
            </item>
            <item>
            Use <see cref="M:Intermec.DataCollection.DocumentCapture.SetButtonAction(Intermec.DataCollection.DocumentCapture.ButtonID,Intermec.DataCollection.DocumentCapture.ButtonActionType)"/> to set the button you want to use for doucment capture
            and to set the button action type to Camera.
            </item>
            <item>
            Press the specified button to preview the image and capture the document.
            </item>
            </list>
            </para>
            <para>
            You can capture snapshot and signature images through this constructor
            if they are supported.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            throws excetpion when an error has occurred in this constructor.  
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                         docCamera = new DocumentCapture("Camera");
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    docCamera = New DocumentCapture("Camera")
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.SnapShot">
            <summary>
            Request a single image save into a directry that is specified 
            in <see cref="P:Intermec.DataCollection.DocumentCapture.CapturedDocumentLocation"/> property. 
            </summary>
            <remarks>
            This property is supported only if Camera is supported in docuemnt capture.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            throws exception when failed on snapshot request call. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        docCamera = new DocumentCapture("Camera");
                                        //get snapshot image
                                        docCamera.SnapShot();
            
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    docCamera = New DocumentCapture("Camera")
                                    'get snapshot image
                                    docCamera.SnapShot()
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.SetViewFinderCoordinates(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the screen coordinate of the view finder.
            </summary>
            <param name="LeftPosition">The x-coordinate of image rectangle.</param>
            <param name="TopPositon">The y-coordinate of image rectangle.</param>
            <param name="RightPosition">The x-coordinate of the lower-right corner that image rectangle.</param>
            <param name="BottomPosition">The y-coordinate of the lower-right corner of image rectangle.</param>
            <remarks>
            <list type="bullet">
            <item>
            This method is supported only if the camera in the Intermec computer supports 
            document capture.
            </item>
            <item>
            For a VGA display in portriait orientation, the maximum value of RightPosition 
            is 480 and the maximum value of BottomPosition is 640.
            </item>        
            </list>
            <para>This property is supported only if Camera is supported in docuemnt capture.</para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            throws exception if failed on set view finder coordinates.
            </exception>
            <example>
            <code>
                       using Intermec.DataCollection;
                       namespace DataCollection
                       {
                           public partial class frmDocumentCapture : Form
                           {
                               private Intermec.DataCollection.DocumentCapture docCamera;
                               public frmDocumentCapture()
                               {
                                   InitializeComponent();
                                   try
                                   {
                                        docCamera = new DocumentCapture("Camera");
                                        //set ViewFinder coordinates
                                        docCamera.SetViewFinderCoordinates(0, 0, 479, 350);
                                   }
                                   catch (DocumentCaptureException DocCapExp)
                                   {
                                       MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                   }                      
                               }
                           }
                       }
                       </code>
                       <code lang="VB.NET">
                       Imports Intermec.DataCollection
                       Public Class frmDocumentCapture
                           Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                           Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                               Try
                                    docCamera = New DocumentCapture("Camera")
                                    'set ViewFinder coordingates
                                    docCamera.SetViewFinderCoordinates(0, 0, 497, 350)
                               Catch docexp As DocumentCaptureException
                                   MessageBox.Show(docexp.Message)
                               End Try
                           End Sub
                       End Class
                       </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.GetViewFinderCoordinates">
            <summary>
            Get view finder coordinates
            </summary>
            <returns>A string that indicates the view finder coordinates as top, left, right, and bottom</returns>
            <remarks>
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            throws exception if failed on get view finder coordinates.
            </exception>
            <example>
            <code>
                       using Intermec.DataCollection;
                       namespace DataCollection
                       {
                           public partial class frmDocumentCapture : Form
                           {
                               private Intermec.DataCollection.DocumentCapture docCamera;
                               public frmDocumentCapture()
                               {
                                   InitializeComponent();
                                   try
                                   {
                                        docCamera = new DocumentCapture("Camera");
                                        //get ViewFinder coordinates
                                        string strCoordinate = docCamera.GetViewFinderCoordinates();
                                   }
                                   catch (DocumentCaptureException DocCapExp)
                                   {
                                       MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                   }                      
                               }
                           }
                       }
                       </code>
                       <code lang="VB.NET">
                       Imports Intermec.DataCollection
                       Public Class frmDocumentCapture
                           Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                           Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                               Try
                                    docCamera = New DocumentCapture("Camera")
                                    'get ViewFinder coordingates
                                    Dim strCoordinates As String = docCamera.GetViewFinderCoordinates()
                               Catch docexp As DocumentCaptureException
                                   MessageBox.Show(docexp.Message)
                               End Try
                           End Sub
                       End Class
                       </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.SetButtonAction(Intermec.DataCollection.DocumentCapture.ButtonID,Intermec.DataCollection.DocumentCapture.ButtonActionType)">
            <summary>
            Sets button for using Camera in document capture. 
            </summary>
            <param name="inputButtonID">The ID of selected button.</param>
            <param name="inputButtonActionType">Button action Type</param>
            <remarks>
            <list type="bullet">
            <item>For document capture, only the Camera action type is used.</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            throws an exception when an error has occurred on set button action value.
            </exception>
            <example>
            <code>
                       using Intermec.DataCollection;
                       namespace DataCollection
                       {
                           public partial class frmDocumentCapture : Form
                           {
                               private Intermec.DataCollection.DocumentCapture docCamera;
                               public frmDocumentCapture()
                               {
                                   InitializeComponent();
                                   try
                                   {
                                        docCamera = new DocumentCapture("Camera");
                                        //use the Center button for Camera
                                        docCamera.SetButtonAction(DocumentCapture.ButtonID.Center, DocumentCapture.ButtonActionType.Camera);
                                   }
                                   catch (DocumentCaptureException DocCapExp)
                                   {
                                       MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                   }                      
                               }
                           }
                       }
                       </code>
                       <code lang="VB.NET">
                       Imports Intermec.DataCollection
                       Public Class frmDocumentCapture
                           Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                           Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                               Try
                                    docCamera = New DocumentCapture("Camera")
                                    'use the Center button for Camera
                                    docCamera.SetButtonAction(DocumentCapture.ButtonID.Center, DocumentCapture.ButtonActionType.Camera)
                               Catch docexp As DocumentCaptureException
                                   MessageBox.Show(docexp.Message)
                               End Try
                           End Sub
                       End Class
                       </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.GetButtonAction(Intermec.DataCollection.DocumentCapture.ButtonID,Intermec.DataCollection.DocumentCapture.ButtonActionType@)">
            <summary>
            Get the current button action settings.
            </summary>
            <param name="inputButtonID">Button ID</param>
            <param name="returnButtonActionType">Button action type</param>
            <remarks>
            <list type="bullet">
            <item>For document capture, only the Camera action type is used.</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            throws an exception when an error has occurred on get button action status.
            </exception>
            <example>
            <code>
                       using Intermec.DataCollection;
                       namespace DataCollection
                       {
                           public partial class frmDocumentCapture : Form
                           {
                               private Intermec.DataCollection.DocumentCapture docCamera;
                               public frmDocumentCapture()
                               {
                                   InitializeComponent();
                                   try
                                   {
                                        docCamera = new DocumentCapture("Camera");
                                        //get the Center button action type
                                        DocumentCapture.ButtonActionType myButtonType = 0;
                                        if (docCamera.GetButtonAction(DocumentCapture.ButtonID.Center, ref myButtonType))
                                        {
                                            string CenterButtonType = myButtonType.ToString();
                                        }
                                   }
                                   catch (DocumentCaptureException DocCapExp)
                                   {
                                       MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                   }                      
                               }
                           }
                       }
                       </code>
                       <code lang="VB.NET">
                       Imports Intermec.DataCollection
                       Public Class frmDocumentCapture
                           Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                           Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                               Try
                                    docCamera = New DocumentCapture("Camera")
                                    'get the Center button action type
                                    Dim myButtonType As DocumentCapture.ButtonActionType = 0
                                    If (docCamera.GetButtonAction(DocumentCapture.ButtonID.Center, myButtonType)) Then
                                        Dim CenterButtonType As String = myButtonType.ToString()
                                    End If
                               Catch docexp As DocumentCaptureException
                                   MessageBox.Show(docexp.Message)
                               End Try
                           End Sub
                       End Class
                       </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.Dispose">
            <summary>
            Releases resources used by DocumentCapture. Before you call Dispose, 
            you should disable document capture and signature capture 
            (if they are supported and enabled).
            </summary>
            <remarks>
            Call Dispose before exiting the application. If there is already an existing 
            instance of DocumentCapture, you must call Dispose before creating a new instance 
            of DocumentCapture.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example uses Dispose before exiting the application.
            <code>
                        using Intermec.DataCollection;
            
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                }
            
                                private void btnExit_Click(object sender, EventArgs e)
                                {
                                    if (DocCap != null)
                                    {
                                        this.DocCap.EnableDocumentCapture = DocumentCapture.EnableDocumentCaptureValue.Disable;
                                        this.DocCap.Dispose();
                                        this.DocCap = null;
                                    }
                                    Application.Exit();
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                            End Sub
            
                            Private Sub btnExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnExit.Click
                                If Me.DocCap Is Nothing Then
                                    'do nothing
                                Else
                                    Me.DocCap.EnableDocumentCapture = DocumentCapture.EnableDocumentCaptureValue.Disable
                                    Me.DocCap.Dispose()
                                End If
                                Application.Exit()
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.CancelSignatureCapture">
            <exclude/> 
            <summary>
            Causes a pending signature capture image call to return
            immediately.
            </summary>    
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on set/get property. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocSig;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        DocSig = new DocumentCapture();
                                        
                                        //cancel pending signature capture image
                                        DocSig.CancelSignatureCapture();
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    DocSig = New DocumentCapture()
                      
                                    'cancel pending signature capture image
                                    DocSig.CancelSignatureCapture()
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.FocusControl(Intermec.DataCollection.DocumentCapture.FocusControlType)">
            <summary>
            Active focus control
            </summary>
            <param name="Focus">focus control option</param>
            <remarks>
            <para>To active SingleFocus, the FocusMethod must set to AutomaticSingleFocus.</para>
            <para>Supports only if Camera is used in DocumentCapture constructor.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.FocusMethod = DocumentCapture.FocusMethodType.AutomaticSingleFocus;
                                }
                                
                                private void btnSetFocusControl_Click(object sender, EventArgs e)
                                {
                                    DocCap.FocusControl(DocumentCapture.FocusControlType.SingleFocus);
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.FocusMethod = DocumentCapture.FocusMethodType.AutomaticSingleFocus
                                DocCap.FocusControl = DocumentCapture.FocusControlType.SingleFocus                    
                            End Sub  
                     
                            Private Sub btnSetFocusControl_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSetFocusControl.Click
                                DocCap.FocusControl(DocumentCapture.FocusControlType.SingleFocus)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.TorchConfigSupported">
            <exclude/>
            <summary>
            Active manual flash control. Not supported current.
            </summary>
            <param name="flashStatus">value of manual flash control</param>
            <remarks>     
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.ManualFlashControl(DocumentCapture.ManualFlashControlType.FlashOn);
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.ManualFlashControl(DocumentCapture.ManualFlashControlType.FlashOn)
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.ManualTorchControl(Intermec.DataCollection.DocumentCapture.ManualTorchControlType)">
            <summary>
            Turn torch control on or off.
            </summary>
            <param name="TorchStatus">value for turn torch on or off.</param>
            <remarks>     
            <para>Supports only if Camera is used in DocumentCapture constructor.</para>
            <para>The TorchMethod must set to ManualTorch.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.ManualTorchControl(DocumentCapture.ManualTorchControlType.TorchOn);
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.ManualTorchControl(DocumentCapture.ManualTorchControlType.TorchOn);
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.ReadStatus(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <exclude />       
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.WriteStatusCommand(System.Byte[],System.Int32)">
            <exclude />
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.ReadConfigInfo(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <exclude />
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.WriteConfigInfo(System.Byte[],System.Int32)">
            <exclude />
        </member>
        <member name="M:Intermec.DataCollection.DocumentCapture.WriteConfigInfo2(System.Byte[],System.Int32)">
            <exclude />
        </member>
        <member name="E:Intermec.DataCollection.DocumentCapture.Capture">
            <summary>
            Event for notifying when a document is captured. The DocCaptureEventArgs parameter 
            includes the image file path of the captured document (through <see cref="F:Intermec.DataCollection.DocumentCaptureEventArgs.DocCapFile"/>) 
            and indicates if an image file is in progress (through <see cref="F:Intermec.DataCollection.DocumentCaptureEventArgs.DocCapInProcess"/>).
            </summary>
            <remarks>
            For platforms with a slower decode engine, DocCapInProcess allows the application to display a busy cursor 
            to indicate the image capture is in progress. It may not be available or necessary when the image capture 
            progress is very fast.
            </remarks>
            <example>
            This example uses the capture event and displays document capture progress status
            with a statusBar and gets the capture file location.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    DocCap.Capture += new DocumentCaptureEventHandler(DocCap_Capture);
                                }
                      
                                void DocCap_Capture(object sender, DocumentCaptureEventArgs DocCaptureEventArgs)
                                {
                                    //displays progress status
                                    if (DocCaptureEventArgs.DocCapInProcess)
                                    {
                                        this.statusBar1.Text = "document capture in process, please wait...";
                                    }
            
                                    //gets the captured file location
                                    if (DocCaptureEventArgs.DocCapFile.Length &gt; 0)
                                    {
                                        string filePath = DocCaptureEventArgs.DocCapFile;
                                    }
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                            End Sub 
                      
                            Private Sub DocCap_Capture(ByVal sender As Object, ByVal DocCaptureEventArgs As Intermec.DataCollection.DocumentCaptureEventArgs) Handles DocCap.Capture
                                'displays progress status
                                If (DocCaptureEventArgs.DocCapInProcess) Then
                                    Me.StatusBar1.Text = "document capture in process, please wait..."
                                End If
            
                                'gets the captured file location
                                If (DocCaptureEventArgs.DocCapFile.Length &gt; 0) Then
                                    Dim filePath As String = DocCaptureEventArgs.DocCapFile
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection.DocumentCapture.Guidance">
            <summary>
            Event for notifying when a document capture fails, such as when the document is too far 
            away or at too sharp of an angle, when a focus check fails, or for an internal error.
            </summary>
            <remarks>
            Contact Intermec Product Support if you get the internal error.
            </remarks>
            <example>
            This example uses the Guidance event and displays document capture failure information.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    DocCap.Guidance += new DocumentCaptureGuidanceEventHandler(DocCap_Guidance);
                                }   
                                
                                void DocCap_Guidance(object sender, GuidanceEventArgs DocCaptureGuidanceArgs)
                                {
                                    if (DocCaptureGuidanceArgs.FocusCheckFailure)
                                        this.listBox1.Items.Add("focus failure");
            
                                    if (DocCaptureGuidanceArgs.ImagerFar)
                                        this.listBox1.Items.Add("imager far");
            
                                    if (DocCaptureGuidanceArgs.ImagerSharp)
                                        this.listBox1.Items.Add("imager sharp");
                               }
                           }                
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                            End Sub 
                      
                            Private Sub DocCap_Guidance(ByVal sender As Object, ByVal DocCaptureGuidanceArgs As Intermec.DataCollection.GuidanceEventArgs) Handles DocCap.Guidance
                                If (DocCaptureGuidanceArgs.FocusCheckFailure) Then
                                    ListBox1.Items.Add("focus failure")
                                End If
            
                                If (DocCaptureGuidanceArgs.ImagerFar) Then
                                    ListBox1.Items.Add("imager far")
                                End If
            
                                If (DocCaptureGuidanceArgs.ImagerSharp) Then
                                    ListBox1.Items.Add("imager sharp")
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection.DocumentCapture.Error">
            <summary>
            Event for notifying when an error has occurred. It includes exceeding storage limits for image 
            files, or when storing additional files will exceed the storage memory limit, failure to save 
            images, image conditioning errors, and unavailable image capture interfaces.
            </summary>
            <remarks>
            ImageConditioningError and CaptureError indicate the image capture process encountered 
            an error and has been ended. If an application has a busy cursor turned on, the 
            application should turn off the busy cursor when it receives this event. 
            </remarks>
            <example>
            This example uses the Error event and displays error information.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    DocCap.Error += new DocumentCaptureErrorEventHandler(DocCap_Error);
                                }   
                                
                               void DocCap_Error(object sender, ErrorEventArgs DocCapErrorArgs)
                               {
                                    if (DocCapErrorArgs.FileSaveError)
                                    {
                                        this.listBox1.Items.Add("Failed on save file = " + DocCapErrorArgs.ErrorMessage);
                                    }
                     
                                    if (DocCapErrorArgs.LimitStorageWarning)
                                    {
                                        this.listBox1.Items.Add("LimitWarning = " + DocCapErrorArgs.ErrorMessage);
                                    }
            
                                    if (DocCapErrorArgs.ExceedStorageLimit)
                                    {
                                        this.listBox1.Items.Add("ExceedStorateError = " + DocCapErrorArgs.ErrorMessage);
                                    }
            
                                    if (DocCapErrorArgs.ImageConditioningError)
                                    {
                                        this.statusBar1.Text = "Image conditioning error = " + DocCapErrorArgs.ErrorMessage;
                                    }
            
                                    if (DocCapErrorArgs.CaptureError)
                                    {
                                        this.statusBar1.Text = "CaptureError, No file will be created";
                                    }
                                }
                            }                
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                            End Sub 
                      
                            Private Sub DocCap_Error(ByVal sender As Object, ByVal DocCapErrorArgs As Intermec.DataCollection.ErrorEventArgs) Handles DocCap.Error
                                If (DocCapErrorArgs.ImageConditioningError) Then
                                    Me.StatusBar1.Text = "Image conditioning error = " + DocCapErrorArgs.ErrorMessage
                                End If
            
                                If (DocCapErrorArgs.LimitStorageWarning) Then
                                    Me.ListBox1.Items.Add("LimitWarning = " + DocCapErrorArgs.ErrorMessage)
                                End If
            
                                If (DocCapErrorArgs.ExceedStorageLimit) Then
                                    Me.ListBox1.Items.Add("ExceedStorateError = " + DocCapErrorArgs.ErrorMessage)
                                End If
            
                                If (DocCapErrorArgs.FileSaveError) Then
                                    Me.ListBox1.Items.Add("Failed on save file = " + DocCapErrorArgs.ErrorMessage)
                                End If
            
                                If (DocCapErrorArgs.CaptureError) Then
                                    Me.StatusBar1.Text = "CaptureError, No file will be created"
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection.DocumentCapture.SnapshotCapture">
            <summary>
            Event for notifying when a snap shot imager is captured. The SnapshotCaptureEventArgs parameter 
            includes the image file path of the snap shot (through <see cref="F:Intermec.DataCollection.DocumentSnapshotCaptureEventArgs.SnapshotFile"/>).
            </summary>
            <remarks>
            It supports only if "Camera" is used in Constructor. 
            </remarks>
            <example>
            This example uses the Snapshot capture event.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
                                    docCamera.SnapshotCapture += new SnapshotEventHandler(docCamera_SnapshotCapture);
                                }
                      
                                void docCamera_SnapshotCapture(object sender, SnapshotCaptureEventArgs SnapshotCaptureEventArgs)
                                {
                                    //get snapshot image file path
                                    if (SnapshotCaptureEventArgs.SnapshotFile.Length &gt; 0)
                                    {
                                        string filePath = SnapshotCaptureEventArgs.SnapshotFile.ToString();                                
                                    }                    
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    docCamera = New DocumentCapture("Camera")
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
            
                            Private Sub docCamera_SnapshotCapture(ByVal sender As Object, ByVal SnapshotCaptureEventArgs As Intermec.DataCollection.DocumentSnapshotCaptureEventArgs) Handles docCamera.SnapshotCapture
                                Try
                                    If (SnapshotCaptureEventArgs.SnapshotFile.Length &gt; 0) Then
                                        Dim filePah As String = SnapshotCaptureEventArgs.SnapshotFile.ToString()
                                    End If
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection.DocumentCapture.SignatureCapture">
            <summary>
            Event for notifying when a signature imager is captured. The DocumentSignatureCaptureEventArgs parameter 
            includes the signature image path (through <see cref="F:Intermec.DataCollection.DocumentSignatureCaptureEventArgs.SignatureCaptureFile"/>).
            It also inlcudes signature barcode data and a xml file path (if they are supported).
            </summary>        
            <example>
            This example uses the SnapshotCapture capture event.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class Form1 : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocSig;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocSig = new DocumentCapture();
                                    DocSig.SignatureCapture += new DocumentSignatureEventHandler(SignatureCap_SignatureCapture);
                                }
                      
                                void DocSig_SignatureCapture(object sender, DocumentSignatureCaptureEventArgs SignatureCaptureEventArgs)
                                {
                                    string SignaturePath;
                                    SignaturePath = SignatureCaptureEventArgs.SignatureCaptureFile;                   
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    DocSig = New DocumentCapture()
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
            
                            Private Sub DocSig_SignatureCapture(ByVal sender As Object, ByVal SignatureCaptureEventArgs As Intermec.DataCollection.SignatureCaptureEventArgs) Handles DocSig.SignatureCapture
                                Try
                                    Dim SignaturePath As String = SignatureCaptureEventArgs.SignatureCaptureFile
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.CurrentImageSource">
            <summary>
            Get current image source that is used in constructor.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.DocCapResult">
            <exclude />       
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.CapturedDocumentLocation">
            <summary>
            Sets and gets the path to the folder where captured single images are stored. 
            The default folder on the computer is "\My Documents\MDI". 
            If a path is not specified, it is created. 
            </summary>
            <remarks>
            <para>
            Valid characters are ASCII characters 32 through 126 (decimal). 
            Invalid characters are /:*?"&lt;&gt;|.
            </para>
            <para>
            The string begins with a backslash, and cannot end with a 
            backslash except for the “\” string (root folder). 
            </para>
            <para><note>
            The total length of the folder location, file name, 
            and file extension string cannot exceed 200 characters 
            (location + file name + 4-characters file extension). This 
            folder memory size is defined in <see cref="P:Intermec.DataCollection.DocumentCapture.FolderMemoryLimit"/>.
            <list type="bullet">
            <item>The correct folder location string should be similar to “\Temp”. </item>
            <item>“\” is added to the location string if it is not a leading character.</item>
            <item>“\” is removed from the location string if it is a trailing character. </item>
            </list>
            </note></para>
            <para>For example, if the input location string is “Temp\”, 
            then “\Temp” is used as the folder location.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example sets the path of captured document location to Temp 
            folder of root directory and retrieves setting.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    DocCap.CapturedDocumentLocation = "\\Temp";
                                    string docPath = DocCap.CapturedDocumentLocation;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.CapturedDocumentLocation = "\Temp"
                                Dim docPath As String = DocCap.CapturedDocumentLocation
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.FileNameTemplate">
            <summary>
            Defines the default file name. The total length of the folder 
            location, file name, and file extension string cannot exceed 
            200 characters (location + file name + max. 4-character file 
            extension).
            </summary>
            <remarks>
            <para>
            Valid characters are ASCII character numbers 32 to 126 (decimal). 
            Invalid characters are \/:*?"&lt;&gt;|
            </para>
            <para><note>
            You can specify the file name to consist of one or 
            more of the following static fields:</note>
            <list type="bullet">
            <item>
            Time/Date stamp $(time), in the format YYYY-MM-DD HH_MM_SS. 
            For example, if you set the file name to “myFile_$(time)”, 
            the captured file name would be similar to ‘myFile_2009-02-11 16_23_26.jpg”, 
            which is 2/11/2009 4:23:26 pm for GTM-8 Pacific US time. 
            </item>
            <item>
            Location $(location), which is GPS information. If a location 
            service is not available, then the text of $(location) is 
            “no_location”.
            </item>
            <item>
            <para>
            Default static field is the root file name which is “doc_$(num)”, 
            where num is an automatically incremented number. For example, 
            if you use the default file location and file name on a handheld 
            computer, the file path is similar to “\My Document\MDI\doc_1.jpg”.
            </para>
            <br/>
            <para>
            If you do not specify the static field with a file name, the computer 
            generates a random number in order to set a unique file name for a 
            captured document file. For example, if you set the file name to 
            “myFile”, the second generated file name is similar to “myFile_143553.jpg”, 
            where 143553 is a random number generated by the computer. 
            </para></item></list></para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example sets and gets file name template.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.FileNameTemplate = "myFile_$(num)";
                                    string docFileTemplate = DocCap.FileNameTemplate;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.FileNameTemplate = "myFile_$(num)"
                                Dim docFileTemplate As String = DocCap.FileNameTemplate
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.FolderMemoryLimit">
            <summary>
            Maximum size (in MB) for the output folder containing the image files.
            </summary>
            <remarks>
            <para>
            If storing a new image file exceeds the memory limit, the <see cref="E:Intermec.DataCollection.DocumentCapture.Error"/> event 
            is raised (when LimitStorageWarning is set to true), 
            but the file is stored. If the memory limit is already exceeded when 
            another image file needs to be stored, then the <see cref="E:Intermec.DataCollection.DocumentCapture.Error"/> event is raised 
            (when ExceedStorageLimit is set to true) and no file is stored. 
            </para>
            <para>
            Setting this value to zero disables the memory limit check and files 
            may be added without limits. The default value is 13 MB.
            </para>
            <para>
            Only non-system files and files with the extension .jpg, .bmp, 
            and .tiff are included in the calculation. 
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example sets and gets folder memory limit.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.FolderMemoryLimit = 13;
                                    int retValue = DocCap.FolderMemoryLimit;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.FolderMemoryLimit = 13
                                Dim retValue As Integer = DocCap.FolderMemoryLimit
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.MaxFileNumber">
            <exclude /> 
            <summary>
            Deprecated. Use DocumentCaptureMaxFileNumber
            </summary>        
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.DocumentCaptureMaxFileNumber">
            <summary>
            Sets the maximum value used when incrementing the NextFileNumber 
            value for saved document images.
            </summary>
            <remarks>
            The default value is 9999. Range is 1 to 4294967295.
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws if input value is invalid. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets maximum value of file number.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.DocumentCaptureMaxFileNumber = 100;
                                    int retValue = DocCap.DocumentCaptureMaxFileNumber;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.DocumentCaptureMaxFileNumber = 100
                                Dim retValue As Integer = DocCap.DocumentCaptureMaxFileNumber
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.NextFileNumber">
            <exclude /> 
            <summary>
            Deprecated. Use DocumentCaptureNextFileNumber
            </summary>                
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.DocumentCaptureNextFileNumber">
            <summary>
            Sets the value of the file number used for the next saved document 
            image. This value automatically changes after a file is saved.
            </summary>
            <remarks>
            Range is 1 to 4294967295.
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws if input value is invalid. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets next value of file number.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.DocumentCaptureNextFileNumber = 50;
                                    int retValue = DocCap.DocumentCaptureNextFileNumber;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.DocumentCaptureNextFileNumber = 50
                                Dim retValue As Integer = DocCap.DocumentCaptureNextFileNumber
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.EnableLocation">
            <summary>
            Enable location service information. 
            </summary>
            <remarks>
            <para>
            The Location Services must enabled from 
            Intermec Settings\Location Services\Server\Enable Server. 
            Mare sure reboot device after enable server.
            </para>
            <para>
            Read location data barcode to include location data in image file. 
            Refer to LocationService Resource Kit for more information. 
            </para>
            <para>The EnableLocation must set to true if use $(location)static field in 
            <see cref="P:Intermec.DataCollection.DocumentCapture.FileNameTemplate"/> property. Otherwase,
            no location data is saved in file name. 
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            throws an exception when an error has occurred when enable/disable location.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                     docCamera = new DocumentCapture("Camera");
            
                                    //enable using location service information in image file
                                    docCamera.EnableLocation = true;
                                    //get EnableLocation status
                                    string status = docCamera.EnableLocation.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                'enable using location service information in image file
                                docCamera.EnableLocation = True
                                'get EnableLocation status
                                Dim status As String = docCamera.EnableLocation.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.ViewFinderEnable">
            <summary>
            Specify whether the view finder is enabled when 
            images are streamed from Camera. 
            </summary>
            <remarks>
            Only supports Camera in doucment capture.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            throws an exception when failed on set/get property. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        docCamera = new DocumentCapture("Camera");
                                        
                                        //enable ViewFinder 
                                        docCamera.ViewFinderEnable = true;
                                        //get ViewFinder enable status
                                        string status = docCamera.ViewFinderEnable.ToString();
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    docCamera = New DocumentCapture("Camera")
                     
                                    'enable ViewFinder
                                    docCamera.ViewFinderEnable = True
                                    'get ViewFinder status
                                    Dim status As String = docCamera.ViewFinderEnable.ToString()
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotFileNameTemplate">
            <summary>
            Defines the default file name for snap shot files. 
            The total length of the folder location, file name, and file 
            extension string cannot exceed 200 characters 
            (location + file name + max. 4-character file extension).
            </summary>
            <remarks>
            <para>
            Only support Camera.
            </para>
            <para>
            Valid characters are ASCII character numbers 32 to 126 (decimal). 
            Invalid characters are \/:*?"&lt;&gt;|
            </para>
            <para><note>
            You can specify the file name to consist of one or 
            more of the following static fields:</note>
            <list type="bullet">
            <item>
            Time/Date stamp $(time), in the format YYYY-MM-DD HH_MM_SS. 
            For example, if you set the file name to “myFile_$(time)”, 
            the captured file name would be similar to ‘myFile_2009-02-11 16_23_26.jpg”, 
            which is 2/11/2009 4:23:26 pm for GTM-8 Pacific US time. 
            </item>
            <item>
            Location $(location), which is GPS information. If a location 
            service is not available, then the text of $(location) is 
            “no_location”.
            </item>
            <item>
            <para>
            Default static field is the root file name which is “snap_$(num)”, 
            where num is an automatically incremented number. For example, 
            if you use the default file location and file name on a handheld 
            computer, the file path is similar to “\My Document\MDI\snap_1.jpg”.
            </para>
            <br/>
            <para>
            If you do not specify the static field with a file name, the computer 
            generates a random number in order to set a unique file name for a 
            captured document file. For example, if you set the file name to 
            “myFile”, the second generated file name is similar to “myFile_143553.jpg”, 
            where 143553 is a random number generated by the computer. 
            </para></item></list></para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        docCamera = new DocumentCapture("Camera");
                                        
                                        //set snapshot file name template
                                        docCamera.SnapShotFileNameTemplate = "snap_$(num)";
                                        //get snapshot file name template
                                        string fileNameTemplate = docCamera.SnapShotFileNameTemplate.ToString();
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    docCamera = New DocumentCapture("Camera")
                      
                                    'set snapshot file name template
                                    docCamera.SnapShotFileNameTemplate = "snap_$(num)"
                                    'get snapshot file name template
                                    Dim fileNameTemplate As String = docCamera.SnapShotFileNameTemplate.ToString()
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotMaxFileNumber">
            <summary>
            Sets the maximum value used when incrementing the 
            <see cref="P:Intermec.DataCollection.DocumentCapture.SnapShotNextFileNumber"/> 
            value for saved snap shot images.
            </summary>
            <remarks>
            The default value is 9999. Range is 1 to 4294967295. It only supports Camera.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on set/get property. 
            </exception>
            <exception cref="T:System.ArgumentException">
            throws if input value is invalid. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        docCamera = new DocumentCapture("Camera");
                                        
                                        //set snapshot max file number
                                        docCamera.SnapShotMaxFileNumber= 100;
                                        //get snapshot max file number
                                        uint maxNum = docCamera.SnapShotMaxFileNumber;
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    docCamera = New DocumentCapture("Camera")
                      
                                    'set snapshot max file number
                                    docCamera.SnapShotMaxFileNumber = 100
                                    'get snapshot max file number
                                    Dim maxNum As UInt32 = docCamera.SnapShotMaxFileNumber
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotNextFileNumber">
            <summary>
            Sets the value of the file number used for the next saved snap shot 
            image. This value automatically changes after a file is saved.
            </summary>
            <remarks>
            Range is 1 to 4294967295.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on set/get property. 
            </exception>
            <exception cref="T:System.ArgumentException">
            throws if input value is invalid. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        docCamera = new DocumentCapture("Camera");
                                        
                                        //set snapshot max file number
                                        docCamera.SnapShotNextFileNumber= 1;
                                        //get snapshot max file number
                                        uint nextNum = docCamera.SnapShotNextFileNumber;
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    docCamera = New DocumentCapture("Camera")
                      
                                    'set snapshot max file number
                                    docCamera.SnapShotNextFileNumber = 1
                                    'get snapshot max file number
                                    Dim nextNum As UInt32 = docCamera.SnapShotNextFileNumber
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SignatureNotification">
            <summary>
            Gets and Sets the SignatureNotification value
            </summary>
            <remarks>
            <para>
            When sets to StoredImageAndBarcodeInFiles (if it is supported), the signature capture file path, a xml file path, 
            and barcode lables are returned through <see cref="E:Intermec.DataCollection.DocumentCapture.SignatureCapture"/> event.
            </para>
            <para>
            The XML file has the following form:
            <code lang="XML"> 
            &lt;?xml version="1.0" encoding="UTF=8"?&gt;
            &lt;CaptureInfo&gt;
                &lt;Image Type="SigCap"&gt;
                    &lt;FilePath&gt;/My Documents/Sigcap.jpg &lt;/FilePath&gt;
                &lt;/Image&gt;
                &lt;Barcode&gt;
                    &lt;STC_IDENTIFIER&gt;xx&lt;/ STC_IDENTIFIER&gt;
                    &lt;Data&gt;QUJDRA==&lt;/Data&gt;
                &lt;/Barcode&gt;
            &lt;/CaptureInfo&gt;
            </code>
            </para>
            <para>
            Where:
            <list type="bullet">
            <item>
            &lt;Type&gt; denotes the type of image
            </item>
            <item>
            &lt;FilePath&gt; is the full path specification to the file containing the sigcap image.
            </item>
            <item>
            &lt;STC_IDENTIFIER&gt; is the symbology ID.
            </item>
            <item>
            &lt;Data&gt; is the bar code data(ABCD) encoded in base64.
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when option is not supported and when errors occur. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocSig;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocSig = new DocumentCapture();
                                    DocSig.SignatureNotification = DocumentCapture.SignatureNotificationType.StoredImageInFiles;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocSig = New DocumentCapture()
                                DocSig.SignatureNotification = DocumentCapture.SignatureNotificationType.StoredImageInFiles;
                            End Sub                
                        End Class
                        </code>
            </example> 
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SignatureFileNameTemplate">
            <summary>
            Defines the default file name for signature capture files. 
            The total length of the folder location, file name, and file 
            extension string cannot exceed 200 characters 
            (location + file name + max. 4-character file extension).
            </summary>
            <remarks>    
            <para>
            Valid characters are ASCII character numbers 32 to 126 (decimal). 
            Invalid characters are \/:*?"&lt;&gt;|
            </para>
            <para><note>
            You can specify the file name to consist of one or 
            more of the following static fields:</note>
            <list type="bullet">
            <item>
            Time/Date stamp $(time), in the format YYYY-MM-DD HH_MM_SS. 
            For example, if you set the file name to “myFile_$(time)”, 
            the captured file name would be similar to ‘myFile_2009-02-11 16_23_26.jpg”, 
            which is 2/11/2009 4:23:26 pm for GTM-8 Pacific US time. 
            </item>
            <item>
            Location $(location), which is GPS information. If a location 
            service is not available, then the text of $(location) is 
            “no_location”.
            </item>
            <item>
            <para>
            Default static field is the root file name which is “sign_$(num)”, 
            where num is an automatically incremented number. For example, 
            if you use the default file location and file name on a handheld 
            computer, the file path is similar to “\My Document\MDI\sign_1.jpg”.
            </para>
            <br/>
            <para>
            If you do not specify the static field with a file name, the computer 
            generates a random number in order to set a unique file name for a 
            captured document file. For example, if you set the file name to 
            “myFile”, the second generated file name is similar to “myFile_143553.jpg”, 
            where 143553 is a random number generated by the computer. 
            </para></item></list></para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocSig;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        DocSig = new DocumentCapture();
                                        
                                        //set signature capture file name template
                                        DocSig.SignatureFileNameTemplate = "sign_$(num)";
                                        //get signature capture file name template
                                        string fileNameTemplate = DocSig.SignatureFileNameTemplate.ToString();
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    DocSig = New DocumentCapture()
                      
                                    'set signature capture file name template
                                    DocSig.SignatureFileNameTemplate = "sign_$(num)"
                                    'get signature capture file name template
                                    Dim fileNameTemplate As String = DocSig.SignatureFileNameTemplate
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SignatureMaxFileNumber">
            <summary>
            Sets the maximum value used when incrementing the 
            <see cref="P:Intermec.DataCollection.DocumentCapture.SignatureNextFileNumber"/> 
            value for saved signature capture images.
            </summary>
            <remarks>
            The default value is 9999. Range is 1 to 4294967295. 
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on set/get property. 
            </exception>
            <exception cref="T:System.ArgumentException">
            throws if input value is invalid. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocSig;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        DocSig = new DocumentCapture();
                                        
                                        //set signature capture max file number
                                        DocSig.SignatureMaxFileNumber = 100;
                                        //get signature capture max file number
                                        uint maxNum = DocSig.SignatureMaxFileNumber;
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    DocSig = New DocumentCapture()
                      
                                    'set snapshot max file number
                                    DocSig.SignatureMaxFileNumber = 100
                                    'get snapshot max file number
                                    Dim maxNum As UInt32 = DocSig.SignatureMaxFileNumber
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SignatureNextFileNumber">
            <summary>
            Sets the value of the file number used for the next saved signature 
            capture image. This value automatically changes after a file is saved.
            </summary>
            <remarks>
            Range is 1 to 4294967295.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on set/get property. 
            </exception>
            <exception cref="T:System.ArgumentException">
            throws if input value is invalid. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocSig;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        DocSig = new DocumentCapture();
                                        
                                        //set signature capture next file number
                                        DocSig.SignatureNextFileNumber = 1;
                                        //get signature capture next file number
                                        uint nextNum = DocSig.SignatureNextFileNumber;
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }                      
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Friend WithEvents DocSig As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    DocSig = New DocumentCapture()
                      
                                    'set signature capture next file number
                                    DocSig.SignatureNextFileNumber = 1
                                    'get signature capture next file number
                                    Dim nextNum As UInt32 = DocSig.SignatureNextFileNumber
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.EnableDocumentCapture">
            <summary>
            Enables and disables document capture.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example enables document capture with decoding and retrieves setting.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.EnableDocumentCapture = DocumentCapture.EnableDocumentCaptureValue.EnableWithDecodes;
                                    string retValue = DocCap.EnableDocumentCapture.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.EnableDocumentCapture = DocumentCapture.EnableDocumentCaptureValue.EnableWithDecodes
                                Dim retValue As String = DocCap.EnableDocumentCapture.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.FocusCheck">
            <summary>
            Sets and gets whether the image focus is evaluated as part of determining 
            if there is a valid document to capture.
            </summary>
            <remarks>
            This setting is useful in preventing blurred document captures. 
            The focus check is performed on the document center.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example sets and gets focus check level.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.FocusCheck = DocumentCapture.FocusCheckValue.Medium;
                                    string retValue = DocCap.FocusCheck.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.FocusCheck = DocumentCapture.FocusCheckValue.Medium
                                Dim retValue As String = DocCap.FocusCheck.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.ImageAreaCaptureRatio">
            <summary>
            Controls how far away from the document page the capture can be taken.
            </summary>
            <remarks>
            <para>
            The further away the capture is taken, the smaller the page looks and 
            the ratio of page relative to the overall image is smaller. 
            </para>
            <para>
            The <see cref="E:Intermec.DataCollection.DocumentCapture.Guidance"/> event is raised and <see cref="F:Intermec.DataCollection.GuidanceEventArgs.ImagerFar"/> is set to 
            true when the image ratio check fails, which means you need to move 
            the imager closer to the document.
            </para>
            <para>
            The value is expressed as a percentage with a range of 0 to 100, 
            where the higher the value, the larger the page appears in the image.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example sets and gets image area capture ratio.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    DocCap.Guidance += new DocumentCaptureGuidanceEventHandler(DocCap_Guidance);
                                    this.DocCap.ImageAreaCaptureRatio = 90;
                                    int retValue = DocCap.ImageAreaCaptureRatio;
                                }                   
                            }
                     
                            void DocCap_Guidance(object sender, GuidanceEventArgs DocCaptureGuidanceArgs)
                            {
                                if(DocCaptureGuidanceArgs.ImagerFar)
                                   MessageBox.Show("Imager is too far");
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.ImageAreaCaptureRatio = 90
                                Dim retValue As Integer = DocCap.ImageAreaCaptureRatio
                            End Sub   
                            
                            Private Sub DocCap_Guidance(ByVal sender As Object, ByVal DocCaptureGuidanceArgs As Intermec.DataCollection.GuidanceEventArgs) Handles DocCap.Guidance
                                If (DocCaptureGuidanceArgs.ImagerFar) Then
                                    MessageBox.Show("Imager is too far")
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.PerspectiveCorrection">
            <summary>
            Controls whether or not perspective correction is used.
            </summary>
            <remarks>
            When correction is disabled, there is no projective mapping, 
            and the system returns the smallest rectangle image containing 
            the area to be captured. When correction is enabled, projective 
            mapping is active and the resolution used is automatically adjusted. 
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example sets and gets perspective correction.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.PerspectiveCorrection = DocumentCapture.PerspectiveCorrectionValue.Enable;
                                    string retValue = DocCap.PerspectiveCorrection.ToString();
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.PerspectiveCorrection = DocumentCapture.PerspectiveCorrectionValue.Enable
                                Dim retValue As String = DocCap.PerspectiveCorrection.ToString()
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.IlluminationLevel">
            <summary>
            It adjusts illumination brightness. Sets 0 to turn off the illumination.
            </summary>
            <remarks>
            The range of value may very depending on the computer. On some devices range is 0 to 15,
            on others range is 0 to 100.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example sets and gets illumination level.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    DocCap.IlluminationLevel = 15;
                                    int retValue = DocCap.IlluminationLevel;
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.IlluminationLevel = 15
                                Dim retValue As Integer = DocCap.IlluminationLevel
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.TriggerEnable">
            <summary>
            Set and get trigger enable status
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example sets and gets Trigger enable status.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
                     
                                    //enable hardware trigger
                                    docCamera.TriggerEnable = DocumentCapture.TriggerEnableValue.Enable;
            
                                    //get trigger enable status
                                    string myTriggerStatus = docCamera.TriggerEnable.ToString();
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                     
                                'set trigger predefined mode
                                 docCamera.TriggerEnable = DocumentCapture.TriggerEnableValue.Enable
            
                                'get triiger predefined mode
                                Dim myTriggerStatus As String = docCamera.TriggerEnable.ToString()                    
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.TriggerPredefinedMode">
            <summary>
            Set and get trigger predefined mode.
            </summary>
            <remarks>
            It supports 70 Series for EA30 scanner, EA11 scanner, and Camera.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws ArgumentException on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            This example sets and gets Trigger Predefined Mode.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
                     
                                    //set trigger predefined mode
                                    docCamera.TriggerPredefinedMode = DocumentCapture.TriggerPredefinedModeValue.EdgedMode;
            
                                    //get triiger predefined mode
                                    string myTriggerMode = docCamera.TriggerPredefinedMode.ToString();
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                     
                                'set trigger predefined mode
                                docCamera.TriggerPredefinedMode = DocumentCapture.TriggerPredefinedModeValue.EdgedMode
            
                                'get triiger predefined mode
                                Dim myTriggerMode As String = docCamera.TriggerPredefinedMode.ToString()                    
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.CurrentScene">
            <summary>
            Set and get current scene for ViewFinder.
            </summary>
            <remarks>
            <para>It supports if Camera is used in constructor.</para>
            <para>
            Following scene strings are supported by default:
            <list type="bullet">
            <item>Auto</item>
            <item>Manual</item>
            <item>Van Interior</item>
            <item>Office Store</item>
            <term>Warehouse</term>
            <item>Daylight</item>
            <item>Cloudy</item>
            <item>Night</item>
            <item>Check</item>
            <item>DocCap</item>
            </list>
            </para>
            <para>Use the SceneEditor (at Start screen) for all support 
            scene strings and detail settings associated with them.
            </para>
            </remarks>
            <exception cref="!:ImagerCaptureException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example sets and gets Trigger Predefined Mode.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
                                    docCamera.CurrentScene = "Manual"; 
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                                docCamera.CurrentScene = "Manual"                 
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.ContrastEnhancement">
            <summary>
            Sets and gets whether the image contrast is enhanced.
            </summary>
            <remarks>
            It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets contrast enhancement
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.ContrastEnhancement = ImageConditioning.ContrastEnhancementValue.None;
                                    string retValue = DocCap.ContrastEnhancement.ToString();
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.ContrastEnhancement = ImageConditioning.ContrastEnhancementValue.None
                                Dim retValue As String = DocCap.ContrastEnhancement.ToString()
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.TextEnhancement">
            <summary>
            Enables text enhancement, which controls the readability of text in 
            the image.
            </summary>
            <remarks>
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.TextEnhancement"/> property of 
            the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets text enhancement
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.TextEnhancement = ImageConditioning.TextEnhancementValue.Low;
                                    string retValue = DocCap.TextEnhancement.ToString();
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.TextEnhancement = ImageConditioning.TextEnhancementValue.Low
                                Dim retValue As String = DocCap.TextEnhancement.ToString()
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.ImageRotation">
            <summary>Rotates the image (in 90-degree increments).</summary>
            <remarks>
            It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ImageRotation"/> property of 
            the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets image rotation
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.ImageRotation = ImageConditioning.ImageRotationValue.None;
                                    string retValue = DocCap.ImageRotation.ToString();
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.ImageRotation = ImageConditioning.ImageRotationValue.None
                                Dim retValue As String = DocCap.ImageRotation.ToString()
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.NoiseReduction">
            <summary>It is used to filter out unwanted pixels in the image that cause the image to be grainy or patchy.</summary>
            <remarks>
            It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.NoiseReduction"/> property 
            of the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets noise reduction.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.NoiseReduction = 1;
                                    int retValue = DocCap.NoiseReduction;                    
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.NoiseReduction = 1
                                Dim retValue As Integer = DocCap.NoiseReduction
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.ImageLightingCorrection">
            <summary>Sets and gets the image lighting correction.</summary>
            <remarks>
            It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ImageLightingCorrection"/> 
            property of the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets image lighting correction.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.ImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.None;
                                    string retValue = DocCap.ImageLightingCorrection.ToString();
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.ImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.None
                                Dim retValue As String = DocCap.ImageLightingCorrection.ToString()
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.Brightness">
            <summary>Lightens or darkens the image.</summary>
            <remarks>
            This property uses the <see cref="P:Intermec.DataCollection.ImageConditioning.Brightness"/> 
            setting of the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets brightness.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.Brightness = 0;
                                    int retValue = DocCap.Brightness;
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.Brightness = 0
                                Dim retValue As Integer = DocCap.Brightness
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.ColorMode">
            <summary>Sets the color mode.</summary>
            <remarks>
            It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ColorMode"/> property of 
            the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets color mode.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.ColorMode = ImageConditioning.ColorModeValue.None;
                                    string retValue = DocCap.ColorMode.ToString();
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.ColorMode = ImageConditioning.ColorModeValue.None
                                Dim retValue As String = DocCap.ColorMode.ToString()
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.ColorModeBrightnessThreshold">
            <summary>
            When ColorMode is set to monochrome, determines overall brightness of 
            image by determining the general level at which pixels are converted 
            from greyscale to black or white.
            </summary>
            <remarks>
            It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThreshold"/> 
            property of the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets Color Mode Brightness Threshold.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.ColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.VeryDark;
                                    string retValue = DocCap.ColorModeBrightnessThreshold.ToString();
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.ColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.VeryDark
                                Dim retValue As String = DocCap.ColorModeBrightnessThreshold.ToString()
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.OutputCompression">
            <summary>Sets the output file type. </summary>
            <remarks>
            It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompression"/> 
            property of the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets output compression. 
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.OutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    string retCompression = DocCap.OutputCompression.ToString();
            
                                    this.DocCap.OutputCompressionQuality = 90;
                                    int retQuality = DocCap.OutputCompressionQuality;                    
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.OutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                Dim retCompression As String = DocCap.OutputCompression.ToString()
            
                                DocCap.OutputCompressionQuality = 90
                                Dim retQuality As Integer = DocCap.OutputCompressionQuality
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.OutputCompressionQuality">
            <summary>
            Controls the JPEG compression level of the output file image.
            </summary>
            <remarks>
            It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompressionQuality"/> 
            property of the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            This example sets and gets output compression. 
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    this.DocCap.OutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    string retCompression = DocCap.OutputCompression.ToString();
            
                                    this.DocCap.OutputCompressionQuality = 90;
                                    int retQuality = DocCap.OutputCompressionQuality;                    
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                DocCap.OutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                Dim retCompression As String = DocCap.OutputCompression.ToString()
            
                                DocCap.OutputCompressionQuality = 90
                                Dim retQuality As Integer = DocCap.OutputCompressionQuality
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.DocumentColorConversion">
            <summary>
            Convert a documnet color image to grayscale.
            </summary>
            <remarks>
            Use it if want to convert a color image to grayscale. 
            It only supports Camera with color image. Use the <see cref="P:Intermec.DataCollection.DocumentCapture.isDocumentColorConversionSupported"/>
            for support status.       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.OutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    DocCap.OutputCompressionQuality = 60;
                                    DocCap.ColorMode = ImageConditioning.ColorModeValue.None;
                                    
                                    //convert document color image to grayscale
                                    if(DocCap.isDocumentColorConversionSupported)
                                    {
                                        DocCap.DocumentColorConversion = ImageConditioning.ColorConversionValue.Grayscale;
                                    }                    
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.OutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                DocCap.OutputCompressionQuality = 60
                                DocCap.ColorMode = ImageConditioning.ColorModeValue.None
            
                                'convert document color image to grayscale
                                If (DocCap.isDocumentColorConversionSupported) Then
                                    DocCap.DocumentColorConversion = ImageConditioning.ColorConversionValue.Grayscale
                                End If
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.isDocumentColorConversionSupported">
            <summary>
            Returns true if support document color conversion. 
            </summary>      
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.OutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    DocCap.OutputCompressionQuality = 60;
                                    DocCap.ColorMode = ImageConditioning.ColorModeValue.None;
                                    
                                    //convert document color image to grayscale
                                    if(DocCap.isDocumentColorConversionSupported)
                                    {
                                        DocCap.DocumentColorConversion = ImageConditioning.ColorConversionValue.Grayscale;
                                    }                    
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.OutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                DocCap.OutputCompressionQuality = 60
                                DocCap.ColorMode = ImageConditioning.ColorModeValue.None
            
                                'convert document color image to grayscale
                                If (DocCap.isDocumentColorConversionSupported) Then
                                    DocCap.DocumentColorConversion = ImageConditioning.ColorConversionValue.Grayscale
                                End If
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoContrastEnhancement">
            <summary>
            Sets and gets whether the video image contrast is enhanced.
            </summary>
            <remarks>
            It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                     //set VideoContrastEnhancement 
                                    docCamera.VideoContrastEnhancement = ImageConditioning.ContrastEnhancementValue.None;
                                    //get VideoContrastEnhancement status
                                    string status = docCamera.VideoContrastEnhancement.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 docCamera = New DocumentCapture("Camera")
                     
                                'set VideoContrastEnhancement 
                                docCamera.VideoContrastEnhancement = ImageConditioning.ContrastEnhancementValue.None
                                'get VideoContrastEnhancement status
                                Dim status As String = docCamera.VideoContrastEnhancement.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoTextEnhancement">
            <summary>
            Enables video text enhancement, which controls the readability of text in the image, 
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.TextEnhancement"/> property of the 
            ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set VideoTextEnhancement 
                                    docCamera.VideoTextEnhancement = ImageConditioning.TextEnhancementValue.Medium;
                                    //get VideoTextEnhancement status
                                    string status = docCamera.VideoTextEnhancement.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 docCamera = New DocumentCapture("Camera")
                     
                                'set VideoTextEnhancement 
                                docCamera.VideoTextEnhancement = ImageConditioning.TextEnhancementValue.Medium
                                'get VideoTextEnhancement status
                                Dim status As String = docCamera.VideoTextEnhancement.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoSubsampling">
            <summary>
            Specify video image size,
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.TextEnhancement"/> property of the 
            ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set VideoSubsampling 
                                    docCamera.VideoSubsampling = ImageConditioning.SubsamplingValue.OneOfSix;
                                    //get VideoSubsampling status
                                    string status = docCamera.VideoSubsampling.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 docCamera = New DocumentCapture("Camera")
                     
                                'set VideoSubsampling 
                                docCamera.VideoSubsampling = ImageConditioning.SubsamplingValue.OneOfSix
                                'get VideoSubsampling status
                                Dim status As String = docCamera.VideoSubsampling.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoNoiseReduction">
            <summary>
            Filters out pixels that may cause the image to appear grainy or patchy on video. 
            Uses the <see cref="P:Intermec.DataCollection.ImageConditioning.NoiseReduction"/> property of the 
            ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set VideoNoiseReduction 
                                    docCamera.VideoNoiseReduction = 0;
                                    //get VideoSubsampling status
                                    int NoiseReduction = docCamera.VideoNoiseReduction;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 docCamera = New DocumentCapture("Camera")
                     
                                'set VideoNoiseReduction 
                                docCamera.VideoNoiseReduction = 0
                                'get VideoSubsampling status
                                Dim NoiseReduction As Int32 = docCamera.VideoNoiseReduction
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoImageLightingCorrection">
            <summary>
            Sets and gets the video image lighting correction using the 
            <see cref="P:Intermec.DataCollection.ImageConditioning.ImageLightingCorrection"/> 
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set VideoImageLightingCorrection 
                                    docCamera.VideoImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled;
                                    //get VideoImageLightingCorrection status
                                    string status = docCamera.VideoImageLightingCorrection.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set VideoImageLightingCorrection 
                                 docCamera.VideoImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled
                                'get VideoImageLightingCorrection status
                                Dim status As String = docCamera.VideoImageLightingCorrection.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoColorMode">
            <summary>
            Sets the video color mode (grayscale or monochrome), using 
            <see cref="P:Intermec.DataCollection.ImageConditioning.ColorMode"/> 
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set VideoColorMode 
                                    docCamera.VideoColorMode = ImageConditioning.ColorModeValue.None;
                                    //get VideoColorMode status
                                    string status = docCamera.VideoColorMode.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set VideoColorMode 
                                docCamera.VideoColorMode = ImageConditioning.ColorModeValue.None
                                'get VideoColorMode status
                                Dim status As String = docCamera.VideoColorMode.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoColorModeBrightnessThreshold">
            <summary>
            When video <see cref="P:Intermec.DataCollection.DocumentCapture.ColorMode"/> is set to monochrome, this property determines the overall 
            image brightness by determining the general level at which pixels are converted 
            from greyscale to black or white. It uses <see cref="P:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThreshold"/>
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set VideoColorModeBrightnessThreshold 
                                    docCamera.VideoColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.Normal;
                                    //get VideoColorModeBrightnessThreshold status
                                    string status = docCamera.VideoColorModeBrightnessThreshold.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set VideoColorModeBrightnessThreshold 
                                docCamera.VideoColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.Normal
                                'get VideoColorModeBrightnessThreshold status
                                Dim status As String = docCamera.VideoColorModeBrightnessThreshold.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoOutputCompression">
            <summary>
            Sets the type of video compression, using the 
            <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompression"/>
            property of the ImageConditioning class
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set VideoOutputCompression 
                                    docCamera.VideoOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    //get VideoOutputCompression status
                                    string status = docCamera.VideoOutputCompression.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set VideoOutputCompression 
                                docCamera.VideoOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                'get VideoOutputCompression status
                                Dim status As String = docCamera.VideoOutputCompression.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoOutputCompressionQuality">
            <summary>
            Controls the JPEG compression level of the video image, 
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompressionQuality"/> 
            property of the ImageConditioning class.        
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set VideoOutputCompressionQuality 
                                    docCamera.VideoOutputCompressionQuality = 80;
                                    //get VideoOutputCompressionQuality value
                                    string CompressionValue = docCamera.VideoOutputCompressionQuality.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set VideoOutputCompressionQuality 
                                docCamera.VideoOutputCompressionQuality = 80
                                'get VideoOutputCompressionQuality value
                                Dim CompressionValue As Int32 = docCamera.VideoOutputCompressionQuality.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.VideoBrightness">
            <summary>
            Lightens or darkens the video image, 
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.Brightness"/> 
            property of the ImageConditioning class.        
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set VideoBrightness 
                                    docCamera.VideoBrightness = 1;
                                    //get VideoBrightness value
                                    int BrightnessValue = docCamera.VideoBrightness;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set VideoBrightness 
                                docCamera.VideoBrightness = 1
                                'get VideoBrightness value
                                Dim BrightnessValue As Int32 = docCamera.VideoBrightness
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotContrastEnhancement">
            <summary>
            Sets and gets whether the snap shot image contrast is enhanced, 
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> 
            property of the ImageConditioning class.        
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotContrastEnhancement 
                                    docCamera.SnapShotContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Black_text_on_white_background;
                                    //get SnapShotContrastEnhancement status
                                    string status = docCamera.SnapShotContrastEnhancement.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotContrastEnhancement 
                                docCamera.SnapShotContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Black_text_on_white_background
                                'get SnapShotContrastEnhancement status
                                Dim status As String = docCamera.SnapShotContrastEnhancement.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotTextEnhancement">
            <summary>
            Enables snap shot text enhancement, which controls the readability of text in the image, 
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.TextEnhancement"/> property of the 
            ImageConditioning class.            
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotTextEnhancement 
                                    docCamera.SnapShotTextEnhancement = ImageConditioning.TextEnhancementValue.Medium;
                                    //get SnapShotTextEnhancement status
                                    string status = docCamera.SnapShotTextEnhancement.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotTextEnhancement 
                                docCamera.SnapShotTextEnhancement = ImageConditioning.TextEnhancementValue.Medium
                                'get SnapShotTextEnhancement status
                                Dim status As String = docCamera.SnapShotTextEnhancement.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotSubsampling">
            <summary>
            Specifiy snap shot image size, 
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.Subsampling"/> 
            property of the ImageConditioning class.        
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotSubsampling 
                                    docCamera.SnapShotSubsampling = ImageConditioning.SubsamplingValue.OneOfSeven;
                                    //get SnapShotSubsampling status
                                    string status = docCamera.SnapShotSubsampling.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotSubsampling 
                                docCamera.SnapShotSubsampling = ImageConditioning.SubsamplingValue.OneOfSeven
                                'get SnapShotSubsampling status
                                Dim status As String = docCamera.SnapShotSubsampling.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotNoiseReduction">
            <summary>
            Filters out pixels that may cause the image to appear grainy or patchy on snap shot. 
            Uses the <see cref="P:Intermec.DataCollection.ImageConditioning.NoiseReduction"/> property of the 
            ImageConditioning class.             
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotNoiseReduction 
                                    docCamera.SnapShotNoiseReduction = 1;
                                    //get SnapShotNoiseReduction value
                                    int NoiseReductionValue = docCamera.SnapShotNoiseReduction;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotNoiseReduction 
                                docCamera.SnapShotNoiseReduction = 1
                                'get SnapShotNoiseReduction value
                                Dim NoiseReductionValue As Int32 = docCamera.SnapShotNoiseReduction
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotImageLightingCorrection">
            <summary>
            Sets and gets the snap shot image lighting correction using the 
            <see cref="P:Intermec.DataCollection.ImageConditioning.ImageLightingCorrection"/> property of the 
            ImageConditioning class.            
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotImageLightingCorrection 
                                    docCamera.SnapShotImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled;
                                    //get SnapShotImageLightingCorrection status
                                    string status = docCamera.SnapShotImageLightingCorrection.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotImageLightingCorrection 
                                docCamera.SnapShotImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled
                                'get SnapShotImageLightingCorrection status
                                Dim status As String = docCamera.SnapShotImageLightingCorrection.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotColorMode">
            <summary>
            Sets the snap shot color mode, using
            <see cref="P:Intermec.DataCollection.ImageConditioning.ColorMode"/> property of the 
            ImageConditioning class.            
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotColorMode 
                                    docCamera.SnapShotColorMode = ImageConditioning.ColorModeValue.None;
                                    //get SnapShotColorMode status
                                    string status = docCamera.SnapShotColorMode.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotColorMode 
                                docCamera.SnapShotColorMode = ImageConditioning.ColorModeValue.None
                                'get SnapShotColorMode status
                                Dim status As String = docCamera.SnapShotColorMode.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotColorModeBrightnessThreshold">
            <summary>
            When snap shot <see cref="P:Intermec.DataCollection.DocumentCapture.ColorMode"/> is set to monochrome, this property determines 
            the overall image brightness by determining the general level at which pixels are converted 
            from greyscale to black or white. It uses
            <see cref="P:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThreshold"/> property of the 
            ImageConditioning class.            
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotColorModeBrightnessThreshold 
                                    docCamera.SnapShotColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.Normal;
                                    //get SnapShotColorModeBrightnessThreshold status
                                    string status = docCamera.SnapShotColorModeBrightnessThreshold.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotColorModeBrightnessThreshold 
                                docCamera.SnapShotColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.Normal
                                'get SnapShotColorModeBrightnessThreshold status
                                Dim status As String = docCamera.SnapShotColorModeBrightnessThreshold.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotOutputCompression">
            <summary>
            Sets the snap shot output file type using the <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompression"/>
            property of the ImageConditioning class.   
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotOutputCompression 
                                    docCamera.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    //get SnapShotOutputCompression status
                                    string status = docCamera.SnapShotOutputCompression.ToString();
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotOutputCompression 
                                docCamera.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                'get SnapShotOutputCompression status
                                Dim status As String = docCamera.SnapShotOutputCompression.ToString()
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotOutputCompressionQuality">
            <summary>
            Controls the snap shot JPEG compression level of the output file image, 
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompressionQuality"/> 
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotOutputCompressionQuality 
                                    docCamera.SnapShotOutputCompressionQuality = 80;
                                    //get SnapShotOutputCompressionQuality value
                                    int CompressionQualityValue = docCamera.SnapShotOutputCompressionQuality;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotOutputCompressionQuality 
                                docCamera.SnapShotOutputCompressionQuality = 80
                                'get SnapShotOutputCompressionQuality value
                                Dim CompressionQualityValue As Int32 = docCamera.SnapShotOutputCompressionQuality
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotBrightness">
            <summary>
            Lightens or darkens the snap shot image, 
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.Brightness"/> 
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>       
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception if property is not supported.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
            
                                    //set SnapShotBrightness 
                                    docCamera.SnapShotBrightness = 1;
                                    //get SnapShotBrightness value
                                    int BrightnessValue = docCamera.SnapShotBrightness;
                                }                   
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                docCamera = New DocumentCapture("Camera")
                     
                                'set SnapShotBrightness 
                                docCamera.SnapShotBrightness = 1
                                'get SnapShotBrightness value
                                Dim BrightnessValue As Int32 = docCamera.SnapShotBrightness
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SnapShotColorConversion">
            <summary>
            Convert a snapshot color image to grayscale.
            </summary>
            <remarks>
            Use it if want to convert a color image to grayscale. 
            It only supports Camera with color image. Use the <see cref="P:Intermec.DataCollection.DocumentCapture.isSnapShotColorConversionSupported"/>
            for support status.       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    DocCap.SnapShotOutputCompressionQuality = 60;
                                    DocCap.SnapShotColorMode = ImageConditioning.ColorModeValue.None;
                                    
                                    //convert snapshot color image to grayscale
                                    if(DocCap.isSnapShotColorConversionSupported)
                                    {
                                        DocCap.SnapShotColorConversion = ImageConditioning.ColorConversionValue.Grayscale;
                                    }                    
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                DocCap.SnapShotOutputCompressionQuality = 60;
                                DocCap.SnapShotColorMode = ImageConditioning.ColorModeValue.None;
            
                                'convert snapshot color image to grayscale
                                If (DocCap.isSnapShotColorConversionSupported) Then
                                    DocCap.SnapShotColorConversion = ImageConditioning.ColorConversionValue.Grayscale
                                End If
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.isSnapShotColorConversionSupported">
            <summary>
            Returns true if support snap shot color conversion.
            </summary>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    DocCap.SnapShotOutputCompressionQuality = 60;
                                    DocCap.SnapShotColorMode = ImageConditioning.ColorModeValue.None;
                                    
                                    //convert snapshot color image to grayscale
                                    if(DocCap.isSnapShotColorConversionSupported)
                                    {
                                        DocCap.SnapShotColorConversion = ImageConditioning.ColorConversionValue.Grayscale;
                                    }                    
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                DocCap.SnapShotOutputCompressionQuality = 60;
                                DocCap.SnapShotColorMode = ImageConditioning.ColorModeValue.None;
            
                                'convert snapshot color image to grayscale
                                If (DocCap.isSnapShotColorConversionSupported) Then
                                    DocCap.SnapShotColorConversion = ImageConditioning.ColorConversionValue.Grayscale
                                End If
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.CurrentImageConditioningVersion">
            <summary>
            Returns image conditioning version.
            </summary>
            <example>
            This example gets image conditioning version number on a device. 
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    double retValue = DocCap.CurrentImageConditioningVersion;
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                                Dim retValue As Double = DocCap.CurrentImageConditioningVersion
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.DefaultFocusValue">
            <summary>
            Get defaul focus value
            </summary>
            <remarks>Supports only if Camera is used in DocumentCapture constructor</remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 DefaultValue = DocCap.DefaultFocusValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim DefaultValue As Integer = DocCap.DefaultFocusValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.FocusIncrementValue">
             <summary>
             Get the value of increment by which the focus can change in 
             FocusSetting. 
             </summary>
             <remarks>
             <para>For example, If FocusIncrementValue is 5, then
            the FocusSetting value should be something like:
            10, 15, or 25.
             </para>
             <para>
            Supports only if Camera is used in DocumentCapture constructor
             </para>
             </remarks>
             <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
             Throws an exception when an error has occurred in document capture methods or properties.
             </exception>
             <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 IncrementValue = DocCap.FocusIncrementValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim IncrementValue As Integer = DocCap.FocusIncrementValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.MinimumFocusValue">
            <summary>
            Get the minimum focus value that is allowed in FocusSetting.
            </summary>
            <remarks>     
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 MinValue = DocCap.MinimumFocusValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim MinValue As Integer = DocCap.MinimumFocusValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.MaximumFocusValue">
            <summary>
            Get the maximum focus value that is allowed in FocusSetting.
            </summary>
            <remarks>     
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 MaxValue = DocCap.MaximumFocusValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim MaxValue As Integer = DocCap.MaximumFocusValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.FocusMethod">
            <summary>
            Sets/gets focus method.
            </summary>
            <remarks>     
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.FocusMethod = DocumentCapture.FocusMethodType.AutomaticFocus;
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.FocusMethod = DocumentCapture.FocusMethodType.AutomaticFocus
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.isFocusConfigSupported">
            <exclude /> 
            <summary>
            Get Focus Config Supported status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.isManualFocusSupported">
            <exclude /> 
            <summary>
            Get Manual Focus support status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.isAutomaticContinuousFocusSupported">
            <exclude /> 
            <summary>
            Get Automatic Continuous Focus support status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.isAutomaticSingleFocusSupported">
            <exclude /> 
            <summary>
            Get Automatic Single Focus support status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.ManualFocusSetting">
            <summary>
            Sets/gets focus setting value.
            </summary>      
            <remarks>     
            <para>Supports only if Camera is used in DocumentCapture constructor.</para>
            <para>This setting is ignored if FocusMethod is set to AutomaticFocus.</para>
            <para>The FocusSetting value must between MinimumFocusValue and MaximumFocusValue.</para>
            <para>
            The setting value is also affected by FocusIncrementValue. 
            For instance, if the FocusIncrementValue is 5, then FocusSetting value should be
            something like: 10, 15, or 25.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                        
                                    //If the MinimumFocusValue is 0, MaximumFocusValue is 255, 
                                    //and the FocusIncrementValue is 1, this example sets
                                    //the ManualFocusSetting to 80%. 
                                    DocCap.ManualFocusSetting = 204;
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                     
                                'If the MinimumFocusValue is 0, MaximumFocusValue is 255, 
                                'and the FocusIncrementValue is 1, this example sets
                                'the ManualFocusSetting to 80%. 
                                DocCap.ManualFocusSetting = 204  
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.DefaultFlashValue">
            <summary>
            Get default flash value.
            </summary>
            <remarks>Supports only if Camera is used in DocumentCapture constructor</remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 DefaultValue = DocCap.DefaultFlashValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim DefaultValue As Integer = DocCap.DefaultFlashValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.FlashIncrementValue">
             <summary>
             Get the value of increment by which the flash value can change in 
             FlashSetting. 
             </summary>
             <remarks>
             <para>For example, If FlashIncrementValue is 5, then
            the FlashSetting value should be something like:
            10, 15, or 25.
             </para>
             <para>
            Supports only if Camera is used in DocumentCapture constructor
             </para>
             </remarks>
             <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
             Throws an exception when an error has occurred in document capture methods or properties.
             </exception>
             <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 IncrementValue = DocCap.FlashIncrementValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim IncrementValue As Integer = DocCap.FlashIncrementValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.isFlashConfigSupported">
            <exclude /> 
            <summary>
            Get Flash Config Supported status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.isAutomaticFlashSupported">
            <exclude /> 
            <summary>
            Get the AutomaticallyFlash support status 
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.isManualFlashSupported">
            <exclude /> 
            <summary>
            Get the manual flash support status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.MinimumFlashValue">
            <summary>
            Get the minimum flash value that is allowed in FlashSetting.
            </summary>
            <remarks>     
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 MinValue = DocCap.MinimumFlashValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim MinValue As Integer = DocCap.MinimumFlashValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.MaximumFlashValue">
            <summary>
            Get the maximum flash value that is allowed in FlashSetting.
            </summary>
            <remarks>     
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 MaxValue = DocCap.MaximumFlashValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim MaxValue As Integer = DocCap.MaximumFlashValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.FlashMethod">
            <summary>
            Sets and gets flash method.
            </summary>
            <remarks>     
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.FlashMethod = DocumentCapture.FlashMethodType.AlwaysFlash;
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.FlashMethod = DocumentCapture.FlashMethodType.AlwaysFlash
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.FlashSetting">
            <summary>
            Sets and gets flash value.
            </summary>
            <remarks>     
            <para>Supports only if Camera is used in DocumentCapture constructor.</para>
            <para>The FlashSetting value must between MinimumFlashValue and MaximumFlashValue.</para>
            <para>
            The setting value is also affected by FlashIncrementValue. 
            For instance, if the FlashIncrementValue is 5, then FlashSetting value should be
            something like: 10, 15, or 25.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                        
                                    //If the MinimumFlashValue is 0, MaximumFlashValue is 15, 
                                    //and the FlashIncrementValue is 1, 
                                    DocCap.FlashSetting = 5;
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                    
                                'If the MinimumFlashValue is 0, MaximumFlashValue is 15, 
                                'and the FlashIncrementValue is 1, 
                                DocCap.FlashSetting = 5  
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.DefaultTorchValue">
            <summary>
            Get default Torch value.
            </summary>
            <remarks>Supports only if Camera is used in DocumentCapture constructor</remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 DefaultValue = DocCap.DefaultTorchValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim DefaultValue As Integer = DocCap.DefaultTorchValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.TorchIncrementValue">
             <summary>
             Get the value of increment by which the flash value can change in 
             TorchIntensitySetting. 
             </summary>
             <remarks>
             <para>For example, If TorchIncrementValue is 5, then
            the TorchIntensitySetting value should be something like:
            10, 15, or 25.
             </para>
             <para>
            Supports only if Camera is used in DocumentCapture constructor
             </para>
             </remarks>
             <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
             Throws an exception when an error has occurred in document capture methods or properties.
             </exception>
             <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 IncrementValue = DocCap.TorchIncrementValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim IncrementValue As Integer = DocCap.TorchIncrementValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.TorchIntensityMinimumValue">
            <summary>
            Get the minimum Torch intensity value that is allowed in TorchIntensitySetting.
            </summary>
            <remarks>     
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 MinValue = DocCap.TorchIntensityMinimumValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim MinValue As Integer = DocCap.TorchIntensityMinimumValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.TorchIntensityMaximumValue">
            <summary>
            Get the maximum Torch intensity value that is allowed in TorchIntensitySetting.
            </summary>
            <remarks>     
            Supports only if Camera is used in DocumentCapture constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    Int16 MinValue = DocCap.TorchIntensityMaximumValue; 
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                Dim MinValue As Integer = DocCap.TorchIntensityMaximumValue
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.TorchMethod">
            <summary>
            Sets and gets torch method.
            </summary>
            <remarks>     
            <para>When set to AutomaticTorch, the Torch is on when video is on and off when video is off.</para>
            <para>Supports only if Camera is used in DocumentCapture constructor.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                                    DocCap.TorchMethod = DocumentCapture.TorchMethodType.AutomaticTorch;
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                DocCap.TorchMethod = DocumentCapture.TorchMethodType.AutomaticTorch
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.TorchIntensitySetting">
            <summary>
            Sets and gets torch intensity value.
            </summary>
            <remarks>     
            <para>Supports only if Camera is used in DocumentCapture constructor.</para>
            <para>The TorchIntensitySetting value must between TorchIntensityMinimumValue and TorchIntensityMaximumValue.</para>
            <para>
            The setting value is also affected by TorchIncrementValue. 
            For instance, if the TorchIncrementValue is 5, then TorchIntensitySetting value should be
            something like: 10, 15, or 25.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.DocumentCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture("Camera");
                        
                                    //If the TorchIntensityMinimumValue is 0, TorchIntensityMaximumValue is 7, 
                                    //and the TorchIncrementValue is 1. 
                                    DocCap.TorchIntensitySetting = 2;
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture("Camera")
                                    
                                'If the TorchIntensityMinimumValue is 0, TorchIntensityMaximumValue is 7, 
                                'and the TorchIncrementValue is 1. 
                                DocCap.TorchIntensitySetting = 2  
                            End Sub   
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SupportImageCapture">
            <summary>
            Gets the current image capture support status for the 
            DocumentCapture input image source. 
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SupportSignatureCapture">
            <summary>
            Return signature capture support status for DocumentCapture with input image source.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.DocumentCapture.SupportDocumentCapture">
            <summary>
            Gets the current document capture support status for the 
            DocumentCapture input image source.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.ButtonID">
            <summary>
            Button ID type that is used in <see cref="M:Intermec.DataCollection.DocumentCapture.SetButtonAction(Intermec.DataCollection.DocumentCapture.ButtonID,Intermec.DataCollection.DocumentCapture.ButtonActionType)"/> method.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ButtonID.Handle">
            <summary>
            Handle of scanner.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ButtonID.RightFront">
            <summary>
            The right front button of device. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ButtonID.Left">
            <summary>
            The left side button of device.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ButtonID.Center">
            <summary>
            The center button of device.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ButtonID.LeftFront">
            <summary>
            The left front button of device.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.ButtonActionType">
            <summary>
            Button action type that is used in <see cref="M:Intermec.DataCollection.DocumentCapture.SetButtonAction(Intermec.DataCollection.DocumentCapture.ButtonID,Intermec.DataCollection.DocumentCapture.ButtonActionType)"/> method.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ButtonActionType.Scan">
            <summary>
            Sets button  for scanning. Not used in document capture.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ButtonActionType.RFIDWedge">
            <summary>
            Sets button for RFID Wedge. Not used in document capture.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ButtonActionType.BRI">
            <summary>
            Sets button for BRI. Not used in document capture.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ButtonActionType.Camera">
            <summary>
            Sets button for Camera.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.SignatureNotificationType">
            <summary>
            Specifies images files are stored.  
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.SignatureNotificationType.StoredImageInFiles">
            <summary>
            Store signature capture image files.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.SignatureNotificationType.StoredImageAndBarcodeInFiles">
            <summary>
            <para>
            Store both signature capture images and 
            xml files that include barcode lables
            </para>
            <para>
            This option may not be supported. 
            </para>
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.EnableDocumentCaptureValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentCapture.EnableDocumentCapture"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.EnableDocumentCaptureValue.Disable">
            <summary>Disable document capture.</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.EnableDocumentCaptureValue.EnableWithDecodes">
            <summary>
            (Default) Enable document capture with decoding. When set to 
            this value, the imager can still read bar codes.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.EnableDocumentCaptureValue.EnableWithoutDecodes">
            <summary>
            Enable document capture, but disable decoding. When set to 
            this value, the imager does not read bar codes.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.FocusCheckValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentCapture.FocusCheck"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FocusCheckValue.Disable">
            <summary>Disable focus check.</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FocusCheckValue.Medium">
            <summary>Medium level.</summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FocusCheckValue.High">
            <summary>High level.</summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.PerspectiveCorrectionValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentCapture.PerspectiveCorrection"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.PerspectiveCorrectionValue.Disable">
            <summary>
            No projective mapping, and the system returns the smallest 
            rectangle image which contains the area to capture.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.PerspectiveCorrectionValue.Enable">
            <summary>
            The projective mapping is active, and the resolution used is 
            automatically adjusted.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.TriggerEnableValue">
            <summary>
            Enable hardware trigger
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.TriggerEnableValue.Disable">
            <summary>
            Trigger disabled
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.TriggerEnableValue.Enable">
            <summary>
            Hardware trigger enabled
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.TriggerPredefinedModeValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentCapture.TriggerPredefinedMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.TriggerPredefinedModeValue.EdgedMode">
            <summary>
            Trigger started on a trigger press and 
            stopped on the next trigger press.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.TriggerPredefinedModeValue.LevelMode">
            <summary>
            Trigger started when the trigger button is pressed and 
            stopped when trugger button is released
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.TriggerPredefinedModeValue.AimMode">
            <summary>
            Enable Aim Mode
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.FocusMethodType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentCapture.FocusMethod"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FocusMethodType.ManualFocus">
            <summary>
            Use manual focus
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FocusMethodType.AutomaticContinuousFocus">
            <summary>
            Use automatic continuous focus 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FocusMethodType.AutomaticSingleFocus">
            <summary>
            Use automatic single focus
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FocusMethodType.Macro">
            <summary>
            Use macro focus (Optimized for 10cm to 50cm)
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FocusMethodType.Extended">
            <summary>
            Use extended focus (10cm to infinity)
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.FocusControlType">
            <summary>
            An enum data type for the <see cref="M:Intermec.DataCollection.DocumentCapture.FocusControl(Intermec.DataCollection.DocumentCapture.FocusControlType)"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FocusControlType.SingleFocus">
            <summary>
            turn single focus control on.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.FlashMethodType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentCapture.FlashMethod"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FlashMethodType.NoFlash">
            <summary>
            No flash used
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FlashMethodType.AlwaysFlash">
            <summary>
            flash always on 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.FlashMethodType.AutomaticallyFlash">
            <summary>
            Automatically flash. Not supported current.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.TorchMethodType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.DocumentCapture.TorchMethod"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.TorchMethodType.ManualTorch">
            <summary>
            Uses manual torch. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.TorchMethodType.AutomaticTorch">
            <summary>
            Torch turns on when video is streaming and turns off 
            when video stops streaming. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.TorchMethodType.AmbientAuto">
            <summary>
            Torch turns on when camera requires additional ambient light
            to produce properly exposed frames. Torch truns off when camera senses
            a luminance above the optimal range to produce a properly exposed frame.            
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCapture.ManualTorchControlType">
            <summary>
            An enum data type for the <see cref="M:Intermec.DataCollection.DocumentCapture.ManualTorchControl(Intermec.DataCollection.DocumentCapture.ManualTorchControlType)"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ManualTorchControlType.TorchOff">
            <summary>
            Turn torch off.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCapture.ManualTorchControlType.TorchOn">
            <summary>
            Turn torch on.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCaptureFirmwareSupportException">
            <summary>
            Throws an exception if the image conditioning firmware on a device is earlier than version 1.0. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCaptureFirmwareSupportException.hResult">
            <summary>Error value.</summary>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCaptureFirmwareSupportException.#ctor(System.Int32,System.String)">
            <summary>
            Stores error information.
            </summary>
            <param name="inputResult">Error value of the error</param>
            <param name="Message">String describing the error</param>
            <example>
            <b><i>Common Exceptions</i></b>
                       <table border="1">
                       <tr>
                          <th>hResult</th>
                          <th>Message</th>
                          <th>Solution</th>
                       </tr>
                       <tr>
                          <td>-1</td>
                          <td>Document capture requires firmware version 1.0 or higher. Current firmware version is &lt;x.x, device-dependent>. Please upgrade the firmware. </td>
                          <td>Upgrade the firmware.</td>
                       </tr>          
                       </table>
                       <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        DocCap = new DocumentCapture();
                                    }
                                    catch (DocumentCaptureFirmwareSupportException FirmExp)
                                    {
                                        MessageBox.Show("FirmwareSupportException: " + FirmExp.Message);
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }
                                    catch (Exception exp)
                                    {
                                        MessageBox.Show(exp.Message);
                                    }
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    DocCap = New DocumentCapture()
                                Catch FirmExp As DocumentCaptureFirmwareSupportException
                                    MessageBox.Show("FirmwareSupportException: " + FirmExp.Message)
                                Catch DocCapExp As DocumentCaptureException
                                    MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message)
                                Catch exp As Exception
                                    MessageBox.Show(exp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCaptureException">
            <summary>
            This class is the exception thrown by the <see cref="T:Intermec.DataCollection.DocumentCapture"/> class. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCaptureException.hResult">
            <summary>Error value.</summary>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCaptureException.#ctor(System.Int32,System.String)">
            <summary>
            Stores error information.
            </summary>
            <param name="inputResult">Error value of the error</param>
            <param name="Message">String describing the error</param>
            <example>
            <b><i>Common Exceptions</i></b>
                       <table border="1">
                       <tr>
                          <th>hResult</th>
                          <th>Message</th>
                          <th>Solution</th>
                       </tr>
                       <tr>
                          <td>-3</td>
                          <td>Document Capture is not supported</td>
                          <td>Close the application.</td>
                       </tr>
                       <tr>
                          <td>-4</td>
                          <td>An Imager instance is already running. Please close that instance.</td>
                          <td>Close the instance that is already running.</td>
                       </tr>
                       <tr>
                          <td>-5</td>
                          <td>Imager is disabled by policy.</td>
                          <td>Close the application.</td>
                       </tr>    
                        <tr>
                          <td>-6</td>
                          <td>Can not open Imager</td>
                          <td>Close the application.</td>
                       </tr>   
                       <tr>
                          <td>-8</td>
                          <td>File path exceed 200 characters</td>
                          <td>Make sure the total string length of the file location, file name, and file extension does not exceed 200 characters.</td>
                       </tr>   
                       <tr>
                          <td>N/A</td>
                          <td>Can’t find PInvoke DLL ‘ITCImager.DLL’</td>
                          <td>Make sure that ITCImager.dll is in the Windows directory of the computer.</td>
                       </tr> 
                       </table>
                       <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        DocCap = new DocumentCapture();
                                    }
                                    catch (DocumentCaptureFirmwareSupportException FirmExp)
                                    {
                                        MessageBox.Show("FirmwareSupportException: " + FirmExp.Message);
                                    }
                                    catch (DocumentCaptureException DocCapExp)
                                    {
                                        MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message);
                                    }
                                    catch (Exception exp)
                                    {
                                        MessageBox.Show(exp.Message);
                                    }
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    DocCap = New DocumentCapture()
                                Catch FirmExp As DocumentCaptureFirmwareSupportException
                                    MessageBox.Show("FirmwareSupportException: " + FirmExp.Message)
                                Catch DocCapExp As DocumentCaptureException
                                    MessageBox.Show("DocumentCaptureException: " + DocCapExp.Message)
                                Catch exp As Exception
                                    MessageBox.Show(exp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.DocumentCaptureEventArgs">
            <summary>
            The DocumentCaptureEventArgs class passes this information to the Capture event. 
            It includes the path of the captured document file and whether or not a document 
            capture is in process.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCaptureEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Stores the image file path and document capture progress status information.
            </summary>
            <param name="inpDocCapFile">The image file path of captured document, 
            including the file location and file name.
            </param>
            <param name="inpDocCapInProcess">
            <para>
            A Boolean type indicating whether or not the document capture is in progress 
            before a captured file path is returned.
            </para>     
            <para><note>
            This allows the application to display a busy cursor to indicate 
            when the image capture is in progress on a platform with a slower decode engine. 
            This event may not be available or necessary on a platform where the image capturing 
            process is very fast.
            </note></para>
            </param>
            <example>
            This example uses the capture event, displays document capture progress status
            with a statusBar, and gets the capture file location.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    DocCap.Capture += new DocumentCaptureEventHandler(DocCap_Capture);
                                }
                      
                                void DocCap_Capture(object sender, DocumentCaptureEventArgs DocCaptureEventArgs)
                                {
                                    //displays progress status
                                    if (DocCaptureEventArgs.DocCapInProcess)
                                    {
                                        this.statusBar1.Text = "document capture in process, please wait...";
                                    }
            
                                    //gets the captured file location
                                    if (DocCaptureEventArgs.DocCapFile.Length > 0)
                                    {
                                        string filePath = DocCaptureEventArgs.DocCapFile;
                                    }
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                            End Sub 
                      
                            Private Sub DocCap_Capture(ByVal sender As Object, ByVal DocCaptureEventArgs As Intermec.DataCollection.DocumentCaptureEventArgs) Handles DocCap.Capture
                                'displays progress status
                                If (DocCaptureEventArgs.DocCapInProcess) Then
                                    Me.StatusBar1.Text = "document capture in process, please wait..."
                                End If
            
                                'gets the captured file location
                                If (DocCaptureEventArgs.DocCapFile.Length > 0) Then
                                    Dim filePath As String = DocCaptureEventArgs.DocCapFile
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DocumentCaptureEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection.DocumentCaptureEventArgs.DocCapFile">
            <summary>
            Stores the document capture file location and file name passed in from inpDocCapFile.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentCaptureEventArgs.DocCapInProcess">
            <summary>
            Updates the document capture process status passed in from inpDocCapInProcess.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.GuidanceEventArgs">
            <summary>
            The GuidanceEventArgs class passes document capture failure information to the Guidance event, 
            such as when the document is too far away or at too sharp of an angle, when the focus check 
            fails, or in the case of an internal error. 
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.GuidanceEventArgs.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Stores document capture failure information.
            </summary>
            <param name="inpInternalError">
            Call Intermec Product Support if you get this error.
            </param>
            <param name="inpImagerFar">
            Document that is to be captured is too far away relative to the ImageRatioCheck setting.
            </param>
            <param name="inpFocusCheckFailure">
            Could not read the document to be captured.
            </param>
            <param name="inpImagerSharp">
            The imager reading angle is too steep. For best results, the imager should be within 35° 
            from vertical as long as the entire document is within the laser framer.
            </param>
            <example>
            This example uses the Guidance event and displays document capture failure information.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    DocCap.Guidance += new DocumentCaptureGuidanceEventHandler(DocCap_Guidance);
                                }   
                                
                                void DocCap_Guidance(object sender, GuidanceEventArgs DocCaptureGuidanceArgs)
                                {
                                    if (DocCaptureGuidanceArgs.FocusCheckFailure)
                                        this.listBox1.Items.Add("focus failure");
            
                                    if (DocCaptureGuidanceArgs.ImagerFar)
                                        this.listBox1.Items.Add("imager far");
            
                                    if (DocCaptureGuidanceArgs.ImagerSharp)
                                        this.listBox1.Items.Add("imager sharp");
                               }
                           }                
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                            End Sub 
                      
                            Private Sub DocCap_Guidance(ByVal sender As Object, ByVal DocCaptureGuidanceArgs As Intermec.DataCollection.GuidanceEventArgs) Handles DocCap.Guidance
                                If (DocCaptureGuidanceArgs.FocusCheckFailure) Then
                                    ListBox1.Items.Add("focus failure")
                                End If
            
                                If (DocCaptureGuidanceArgs.ImagerFar) Then
                                    ListBox1.Items.Add("imager far")
                                End If
            
                                If (DocCaptureGuidanceArgs.ImagerSharp) Then
                                    ListBox1.Items.Add("imager sharp")
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.GuidanceEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection.GuidanceEventArgs.InternalError">
            <summary>
            Indicates an internal error.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.GuidanceEventArgs.ImagerFar">
            <summary>
            Stores the Imager ratio check information passed  from inpImagerFar.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.GuidanceEventArgs.FocusCheckFailure">
            <summary>
            Stores the focus check information passed from inpFocusCheckFailure.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.GuidanceEventArgs.ImagerSharp">
            <summary>
            Stores the image ratio check information passed  from inpImagerSharp.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.ErrorEventArgs">
            <summary>
            Use this class for notification of file space or file save errors and image capture errors.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.ErrorEventArgs.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Stores errors information.
            </summary>
            <param name="LimitStorageWarningData">
            Saving an image file exceeded the memory limit. Subsequent attempts to save an image 
            may fail due to the storage memory limit.
            </param>
            <param name="ExceedStorageLimitData">
            File exceeds the storage memory limit. A document image was captured but discarded.
            </param>
            <param name="CaptureClosedData">
            The document capture interface is closed.
            </param>
            <param name="CaptureErrorData">
            An unexpected error has occurred in the document capture interface.
            </param>
            <param name="FatalErrorData">
            An unrecoverable error has occurred in the document capture interface. The interface 
            is closed and no document has been captured.
            </param>
            <param name="FileSaveErrorData">
            The image file cannot be created, possibly because the file size is too long, there 
            is a file name conflict, or because old files cannot be deleted. 
            </param>
            <param name="ImageConditioningErrorData">
            The capture process encountered an error and has been terminated.
            </param>
            <param name="ErrorMessageString">
            String that describes errors.
            </param>
            <example>
            This example uses the Error event and displays error information.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture DocCap;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    DocCap = new DocumentCapture();
                                    DocCap.Error += new DocumentCaptureErrorEventHandler(DocCap_Error);
                                }   
                                
                               void DocCap_Error(object sender, ErrorEventArgs DocCapErrorArgs)
                               {
                                    if (DocCapErrorArgs.FileSaveError)
                                    {
                                        this.listBox1.Items.Add("Failed on save file = " + DocCapErrorArgs.ErrorMessage);
                                    }
                     
                                    if (DocCapErrorArgs.LimitStorageWarning)
                                    {
                                        this.listBox1.Items.Add("LimitWarning = " + DocCapErrorArgs.ErrorMessage);
                                    }
            
                                    if (DocCapErrorArgs.ExceedStorageLimit)
                                    {
                                        this.listBox1.Items.Add("ExceedStorateError = " + DocCapErrorArgs.ErrorMessage);
                                    }
            
                                    if (DocCapErrorArgs.ImageConditioningError)
                                    {
                                        this.statusBar1.Text = "Image conditioning error = " + DocCapErrorArgs.ErrorMessage;
                                    }
            
                                    if (DocCapErrorArgs.CaptureError)
                                    {
                                        this.statusBar1.Text = "CaptureError, No file will be created";
                                    }
                                }
                            }                
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents DocCap As Intermec.DataCollection.DocumentCapture
                            Private Sub frmDocumentCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                DocCap = New DocumentCapture()
                            End Sub 
                      
                            Private Sub DocCap_Error(ByVal sender As Object, ByVal DocCapErrorArgs As Intermec.DataCollection.ErrorEventArgs) Handles DocCap.Error
                                If (DocCapErrorArgs.ImageConditioningError) Then
                                    Me.StatusBar1.Text = "Image conditioning error = " + DocCapErrorArgs.ErrorMessage
                                End If
            
                                If (DocCapErrorArgs.LimitStorageWarning) Then
                                    Me.ListBox1.Items.Add("LimitWarning = " + DocCapErrorArgs.ErrorMessage)
                                End If
            
                                If (DocCapErrorArgs.ExceedStorageLimit) Then
                                    Me.ListBox1.Items.Add("ExceedStorateError = " + DocCapErrorArgs.ErrorMessage)
                                End If
            
                                If (DocCapErrorArgs.FileSaveError) Then
                                    Me.ListBox1.Items.Add("Failed on save file = " + DocCapErrorArgs.ErrorMessage)
                                End If
            
                                If (DocCapErrorArgs.CaptureError) Then
                                    Me.StatusBar1.Text = "CaptureError, No file will be created"
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.ErrorEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection.ErrorEventArgs.LimitStorageWarning">
            <summary>
            Stores the warning of a saved image file exceeding the memory limit passed from 
            LimitStorageWarningData. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ErrorEventArgs.ExceedStorageLimit">
            <summary>
            Stores memory limit information passed from ExceedStorageLimitData. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ErrorEventArgs.CaptureClosed">
            <summary>
            Image capture interface closing information passed from CaptureClosedData.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ErrorEventArgs.CaptureError">
            <summary>
            Unexpected error information passed from CaptureErrorData. Indicates the image 
            capture process encountered an error and has been terminated. If the application 
            has a busy cursor turned    on, the application should turn off the busy cursor 
            when it receives this error.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ErrorEventArgs.FatalError">
            <summary>
            Unrecoverable error has occurred in the image capture interface.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ErrorEventArgs.FileSaveError">
            <summary>
            File save error information passed from FileSaveError.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ErrorEventArgs.ImageConditioningError">
            <summary>
            Stores the information of the image capture process error passed from the 
            ImageConditioningErrorData parameter. Indicates the image capture process 
            encountered an error and has been terminated. If the application has a busy 
            cursor turned on, the application should turn off the busy cursor when it 
            receives this error.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ErrorEventArgs.ErrorMessage">
            <summary>
            Stores the error descriptions passed from ErrorMessageString parameter.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentSnapshotCaptureEventArgs">
            <summary>
            The DocumentSnapshotCaptureEventArgs class passes the image file path of Snapshot.
            </summary>    
        </member>
        <member name="M:Intermec.DataCollection.DocumentSnapshotCaptureEventArgs.#ctor(System.String)">
            <summary>
            Stores the snap shot image file path.
            </summary>
            <param name="inpSnapshotCapFile">The image file path of Snapshot.</param>
            <example>
            This example uses the Snapshot capture event.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmDocumentCapture : Form
                            {
                                private Intermec.DataCollection.DocumentCapture docCamera;
                                public frmDocumentCapture()
                                {
                                    InitializeComponent();
                                    docCamera = new DocumentCapture("Camera");
                                    docCamera.SnapshotCapture += new SnapshotEventHandler(docCamera_SnapshotCapture);
                                }
                      
                                void docCamera_SnapshotCapture(object sender, DocumentSnapshotCaptureEventArgs SnapshotCaptureEventArgs)
                                {
                                    //get snapshot image file path
                                    if (SnapshotCaptureEventArgs.SnapshotFile.Length > 0)
                                    {
                                        string filePath = SnapshotCaptureEventArgs.SnapshotFile.ToString();                                
                                    }                    
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmDocumentCapture
                            Private WithEvents docCamera As Intermec.DataCollection.DocumentCapture
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    docCamera = New DocumentCapture("Camera")
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
            
                            Private Sub docCamera_SnapshotCapture(ByVal sender As Object, ByVal SnapshotCaptureEventArgs As Intermec.DataCollection.DocumentSnapshotCaptureEventArgs) Handles docCamera.SnapshotCapture
                                Try
                                    If (SnapshotCaptureEventArgs.SnapshotFile.Length > 0) Then
                                        Dim filePah As String = SnapshotCaptureEventArgs.SnapshotFile.ToString()
                                    End If
                                Catch docexp As DocumentCaptureException
                                    MessageBox.Show(docexp.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSnapshotCaptureEventArgs.SnapshotFile">
            <summary>
            Stores the image file location passed from inpSnapshotCapFile.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.DocumentSignatureCaptureEventArgs">
            <summary>
            This member class passes information to the calling application when a signature image
            is captured.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.DocumentSignatureCaptureEventArgs.#ctor(System.String,System.Boolean,System.String,System.Byte[],System.Int32)">
            <summary>
            Creates an instance of the DocumentSignatureCaptureEventArgs class and passes
            file names, barcode data, and symbology ID.
            </summary>
            <param name="inpSignatureCapFile">is the path of the image file</param>
            <param name="xmlStatus">indicated if a xml file is stored.</param>
            <param name="xmlPath">is the path of the xml file.</param>
            <param name="barcodeDataBuffer">barcode data buffer.</param>
            <param name="symbID">symbology ID.</param>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureCaptureEventArgs.SignatureCaptureFile">
            <summary>
            Signature image file path.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureCaptureEventArgs.XmlFileAvailable">
            <summary>
            Statu if a xml file is stored.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureCaptureEventArgs.XmlFilePath">
            <summary>
            The xml file path.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureCaptureEventArgs.BarcodeData">
            <summary>
            String barcode data.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureCaptureEventArgs.SymbologyID">
            <summary>
            Symbology ID.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DocumentSignatureCaptureEventArgs.BarcodeDataBuffer">
            <summary>
            Barcode data buffer.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageSupportInfo">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            The ImageSupportInfo class provides information about whether or not a device supports image 
            capture, signature capture, or document capture, and returns the image conditioning version.
            </summary>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="M:Intermec.DataCollection.ImageSupportInfo.#ctor">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Constructor that instantiates the ImageSupportInfo object. 
            </summary>
            <remarks>
            Do NOT call this constructor while image capture, signature capture, or 
            document capture is running.
            </remarks>
            <example>
            This example creates a instance of ImageSupportInfo class.
            <code>
                        private Intermec.DataCollection.ImageSupportInfo imgInfo;
                        public frmImageSupportInfo()
                        {
                            InitializeComponent();
                            try
                            {
                                imgInfo = new ImageSupportInfo();
                            }
                            catch (Exception exp)
                            {
                                MessageBox.Show(exp.Message);
                            }
                        }
                        </code>           
                        <code lang="VB.NET">
                        Private imgInfo As Intermec.DataCollection.ImageSupportInfo
                        Private Sub frmImageSupportInfo_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            Try
                                imgInfo = New ImageSupportInfo()
                            Catch exp As Exception
                                MessageBox.Show(exp.Message)
                            End Try
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.ImageSupportInfo.SupportImage">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Returns whether or not the computer supports image capture. 
            </summary>
            <example>
            This example gets image support status.
            <code>
                        private Intermec.DataCollection.ImageSupportInfo imgInfo;
                        public frmImageSupportInfo()
                        {
                            InitializeComponent();
                            try
                            {
                                imgInfo = new ImageSupportInfo();
                                bool imageSupport = imgInfo.SupportImage;
                            }
                            catch (Exception exp)
                            {
                                MessageBox.Show(exp.Message);
                            }
                        }
                        </code>           
                        <code lang="VB.NET">
                        Private imgInfo As Intermec.DataCollection.ImageSupportInfo
                        Private Sub frmImageSupportInfo_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            Try
                                imgInfo = New ImageSupportInfo()
                                Dim ImageSupport As Boolean = imgInfo.SupportImage
                            Catch exp As Exception
                                MessageBox.Show(exp.Message)
                            End Try
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.ImageSupportInfo.SupportSigCap">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Returns signature capture support information.
            </summary>
            <example>
            This example gets signature capture support status.
            <code>
                        private Intermec.DataCollection.ImageSupportInfo imgInfo;
                        public frmImageSupportInfo()
                        {
                            InitializeComponent();
                            try
                            {
                                imgInfo = new ImageSupportInfo();
                                bool sigCapSupport = imgInfo.SupportSigCap;
                            }
                            catch (Exception exp)
                            {
                                MessageBox.Show(exp.Message);
                            }
                        }
                        </code>           
                        <code lang="VB.NET">
                        Private imgInfo As Intermec.DataCollection.ImageSupportInfo
                        Private Sub frmImageSupportInfo_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            Try
                                imgInfo = New ImageSupportInfo()
                                Dim sigCapSupport As Boolean = imgInfo.SupportSigCap
                            Catch exp As Exception
                                MessageBox.Show(exp.Message)
                            End Try
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.ImageSupportInfo.SupportDocCap">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Gets document capture support information. Returns true if the imager in the 
            computer supports document capture and if the image conditioning version 
            is 1.0 or later. Otherwise this returns false.
            </summary>
            <example>
            This example gets document capture support status.
            <code>
                        private Intermec.DataCollection.ImageSupportInfo imgInfo;
                        public frmImageSupportInfo()
                        {
                            InitializeComponent();
                            try
                            {
                                imgInfo = new ImageSupportInfo();
                                bool docCapSupport = imgInfo.SupportDocCap;
                            }
                            catch (Exception exp)
                            {
                                MessageBox.Show(exp.Message);
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Private imgInfo As Intermec.DataCollection.ImageSupportInfo
                        Private Sub frmImageSupportInfo_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            Try
                                imgInfo = New ImageSupportInfo()
                                Dim docCapSupport As Boolean = imgInfo.SupportDocCap
                            Catch exp As Exception
                                MessageBox.Show(exp.Message)
                            End Try
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.ImageSupportInfo.SupportDocCapCamera">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Returns document capture with Camera support information.
            </summary>
            <example>
            <code>
                        private Intermec.DataCollection.ImageSupportInfo imgInfo;
                        public frmImageSupportInfo()
                        {
                            InitializeComponent();
                            try
                            {
                                imgInfo = new ImageSupportInfo();
                                bool docCapCameraSupport = imgInfo.SupportDocCapCamera;
                            }
                            catch (Exception exp)
                            {
                                MessageBox.Show(exp.Message);
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Private imgInfo As Intermec.DataCollection.ImageSupportInfo
                        Private Sub frmImageSupportInfo_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            Try
                                imgInfo = New ImageSupportInfo()
                                Dim docCapCameraSupport As Boolean = imgInfo.SupportDocCapCamera
                            Catch exp As Exception
                                MessageBox.Show(exp.Message)
                            End Try
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.ImageSupportInfo.ImageConditioningVersion">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Returns the image conditioning version.
            </summary>
            <example>
            This example gets image conditioning version number.
            <code>
                        private Intermec.DataCollection.ImageSupportInfo imgInfo;
                        public frmImageSupportInfo()
                        {
                            InitializeComponent();
                            try
                            {
                                imgInfo = new ImageSupportInfo();
                                double imgVersion = imgInfo.ImageConditioningVersion;
                            }
                            catch (Exception exp)
                            {
                                MessageBox.Show(exp.Message);
                            }
                        }
                        </code>          
                        <code lang="VB.NET">
                         Private imgInfo As Intermec.DataCollection.ImageSupportInfo
                        Private Sub frmImageSupportInfo_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            Try
                                imgInfo = New ImageSupportInfo()
                                Dim imgVersion As Double = imgInfo.ImageConditioningVersion
                            Catch exp As Exception
                                MessageBox.Show(exp.Message)
                            End Try
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="T:Intermec.DataCollection.SignatureCaptureException">
            <summary>
            This class is the exception thrown by the <see cref="T:Intermec.DataCollection.SignatureCapture2"/> class.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.SignatureCaptureException.hResult">
            <summary>
            Stores error value of the error
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.SignatureCaptureException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SignatureCaptureException"/> 
            class and Stores errors information. 
            </summary>
            <param name="hResult">Error value of the error.</param>
            <param name="Message">String describing the error.</param>
            <example>
            <b><i>Common Exceptions </i></b>
            <list type="table">
            <listheader>
            <term>hResult</term>
            <description>Message</description>
            <description>Solution</description>
            </listheader>
            <item>
            <term>-4</term>
            <description>A Imager instance is already running. Please close that instance.</description>
            <description>Close the instance that is already running.</description>
            </item>
            <item>
            <term>-5</term>
            <description>Imager is disabled by policy.</description>
            <description>Close the application.</description>
            </item>
            <item>
            <term>-6</term>
            <description>Can not open Imager.</description>
            <description>Close the application.</description>
            </item>
            </list> 
            <para>
            This example uses signature capture exception.
            </para>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            try
                            {
                                SigCap = new SignatureCapture2();
                            } 
                            catch (SignatureCaptureException exp)
                            {
                                MessageBox.Show(exp.Message);
                            }            
                        }           
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            Try
                                SigCap = New SignatureCapture2()
                            Catch exp As SignatureCaptureException
                                MessageBox.Show(exp.Message)
                            End Try
                        End Sub     
                        </code>
            </example> 
        </member>
        <member name="T:Intermec.DataCollection.scenario">
            <summary>
            When you create an instance of the <see cref="T:Intermec.DataCollection.SignatureCapture2"/> class, you also create 
            four instances of the Scenario class. Each instance (also called a signature 
            capture scenario), such as Scenario1, Scenario2, Scenario3, and Scenario4, 
            can be selected as a property in the SignatureCapture2 instance.
            </summary>
            <remarks>
            <para>
            Each instance (Scenario1, Scenario2, Scenario3, and Scenario4) includes its 
            own properties, such as symbology type, bar code length, or bar code mask, 
            that define the conditions that will automatically trigger a signature 
            capture. By default, the properties for each instance are copied from the 
            current settings on the computer, which can be configured on the computer by 
            using the Intermec Settings application.
            </para>
            <note><para>
            After you change or set properties, call the <see cref="M:Intermec.DataCollection.scenario.Apply"/> method to save 
            and apply all changes. If you do not call Scenario.Apply, property changes 
            are not saved or applied.
            </para>
            <para>
            Bar codes that meet the identifier, length, and mask values will trigger the 
            signature capture scenario as specified, but bar code data content is ignored. 
            If this interferes with other data collection activities, Intermec recommends 
            making your signature capture scenario definitions as specific as possible. 
            Specify a scenario symbology, bar code length, and mask combination that is 
            unlikely to occur in another bar code to avoid interference with regular 
            decoding.
            </para>
            </note>
            </remarks>    
        </member>
        <member name="F:Intermec.DataCollection.scenario.Index">
            <exclude /> 	
            <summary>
            Index of scenario
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.scenario.#ctor(System.Int32)">
            <exclude />
            <summary>
            Constructor of scenario class.
            </summary>
            <param name="Idx">The index of scenario</param>
        </member>
        <member name="M:Intermec.DataCollection.scenario.Finalize">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection.scenario.Apply">
            <summary>
            Saves and applies all changes to  scenario Properties. If you do not call this 
            method after changing or setting properties, property changes are not applied or saved.
            </summary>
            <remarks>
            Only one Apply method call needed to save and apply all changes to Scenario properties. 
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example uses Apply method for property setting.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.BarcodeLength = 0;
                            SigCap.Scenario1.BarcodeMask = "";
                            //captured file path
                            SigCap.Scenario1.Filename = "\\SigSce1";
                            SigCap.Scenario1.FilePadding = scenario.FilePaddingType.DateTime;
            
                            //file type
                            SigCap.Scenario1.FileOutputFormat = scenario.FileOutputFormatType.JPG;
                            SigCap.Scenario1.QualitySetting = 100;
            
                            //use Interleaved 2 of 5 barcode for signature capture
                            SigCap.Scenario1.BarcodeIdentifier = scenario.BarcodeIdentifierType.ID_ITF;
            
                            //setup captured area 
                            SigCap.Scenario1.HorizontalOffset = 35;
                            SigCap.Scenario1.VerticalOffset = 22;
                            SigCap.Scenario1.AreaWidth = 74;
                            SigCap.Scenario1.AreaHeight = 22;
                            SigCap.Scenario1.BarcodeWidth = 71;
                            SigCap.Scenario1.BarcodeHeight = 17;
            
                            SigCap.Scenario1.Mode = scenario.ModeType.Regular;
                            SigCap.Scenario1.AutomaticCorrection = scenario.AutomaticCorrectionType.Both;
                            SigCap.Scenario1.ProjectiveMappingResolution = scenario.ProjectiveMappingResolutionType.Automatic;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.BarcodeLength = 0
                            SigCap.Scenario1.BarcodeMask = ""
                            'captured file path
                            SigCap.Scenario1.Filename = "\SigSce1"
                            SigCap.Scenario1.FilePadding = scenario.FilePaddingType.DateTime
            
                            'file type
                            SigCap.Scenario1.FileOutputFormat = scenario.FileOutputFormatType.JPG
                            SigCap.Scenario1.QualitySetting = 100
            
                            'use Interleaved 2 of 5 barcode for signature capture
                            SigCap.Scenario1.BarcodeIdentifier = scenario.BarcodeIdentifierType.ID_ITF
            
                            'setup captured area 
                            SigCap.Scenario1.HorizontalOffset = 35
                            SigCap.Scenario1.VerticalOffset = 22
                            SigCap.Scenario1.AreaWidth = 74
                            SigCap.Scenario1.AreaHeight = 22
                            SigCap.Scenario1.BarcodeWidth = 71
                            SigCap.Scenario1.BarcodeHeight = 17
            
                            SigCap.Scenario1.Mode = scenario.ModeType.Regular
                            SigCap.Scenario1.AutomaticCorrection = scenario.AutomaticCorrectionType.Both
                            SigCap.Scenario1.ProjectiveMappingResolution = scenario.ProjectiveMappingResolutionType.Automatic
            
                            'apply all above settings for Scenario1
                            SigCap.Scenario1.Apply()
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICContrastEnhancement">
            <summary>
            Sets and gets whether image constrast enhanced.
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                            //set ICContrastEnhancement value
                            SigCap.Scenario1.ICContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo;
                            SigCap.Scenario1.Apply();       
                            
                            //get ICContrastEnhancement value
                            string strValue = SigCap.Scenario1.ICContrastEnhancement.ToString();         
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            'set ICContrastEnhancement value
                            SigCap.Scenario1.ICContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo
                            SigCap.Scenario1.Apply()
            
                            'get ICContrastEnhancement value
                            Dim strValue As String = SigCap.Scenario1.ICContrastEnhancement.ToString()
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICTextEnhancement">
            <summary>
            Enables text enhancement, which controls the readability of text in the image, 
            using the <see cref="P:Intermec.DataCollection.ImageConditioning.TextEnhancement"/> property of the 
            ImageConditioning class.
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                            //set ICTextEnhancement value
                            SigCap.Scenario1.ICTextEnhancement = ImageConditioning.TextEnhancementValue.Medium;
                            SigCap.Scenario1.Apply();
            
                            //get ICTextEnhancement value
                            string strValue = SigCap.Scenario1.ICTextEnhancement.ToString();         
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                     
                            'set ICTextEnhancement value
                            SigCap.Scenario1.ICTextEnhancement = ImageConditioning.TextEnhancementValue.Medium
                            SigCap.Scenario1.Apply()
            
                            'get ICTextEnhancement value
                            Dim strValue As String = SigCap.Scenario1.ICTextEnhancement.ToString()
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICImageRotation">
            <summary>
            Sets and gets image rotation.
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ImageRotation"/> property of the 
            ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                            //set ICImageRotation value
                            SigCap.Scenario1.ICImageRotation = ImageConditioning.ImageRotationValue.None;
                            SigCap.Scenario1.Apply();
            
                            //get ICImageRotation value
                            string strValue = SigCap.Scenario1.ICImageRotation.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                     
                            'set ICImageRotation value
                            SigCap.Scenario1.ICImageRotation = ImageConditioning.ImageRotationValue.None
                            SigCap.Scenario1.Apply()
            
                            'get ICImageRotation value
                            Dim strValue As String = SigCap.Scenario1.ICImageRotation.ToString()
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICNoiseReduction">
            <summary>
            Filters out pixels that may cause the image to appear grainy or patchy. 
            Uses the <see cref="P:Intermec.DataCollection.ImageConditioning.NoiseReduction"/> property of the 
            ImageConditioning class.
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                            //set ICNoiseReduction value
                            SigCap.Scenario1.ICNoiseReduction = 1;
                            SigCap.Scenario1.Apply();
            
                            //get ICNoiseReduction value
                            int intValue = SigCap.Scenario1.ICNoiseReduction;         
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                     
                            'set ICNoiseReduction value
                            SigCap.Scenario1.ICNoiseReduction = 1
                            SigCap.Scenario1.Apply()
            
                            'get ICNoiseReduction value
                            Dim intValue As Int32 = SigCap.Scenario1.ICNoiseReduction
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICImageLightingCorrection">
            <summary>
            Sets and gets the image lighting correction using the 
            <see cref="P:Intermec.DataCollection.ImageConditioning.ImageLightingCorrection"/> 
            property of the ImageConditioning class.
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                            //set ICImageLightingCorrection value
                            SigCap.Scenario1.ICImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.None;
                            SigCap.Scenario1.Apply();
            
                            //get ICImageLightingCorrection value
                            string strValue = SigCap.Scenario1.ICImageLightingCorrection.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                     
                            'set ICImageLightingCorrection value
                            SigCap.Scenario1.ICImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.None
                            SigCap.Scenario1.Apply()
            
                            'get ICImageLightingCorrection value
                            Dim strValue As String = SigCap.Scenario1.ICImageLightingCorrection.ToString()
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICBrightness">
            <summary>
            Lightens or darkens the image.
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>This property uses the <see cref="P:Intermec.DataCollection.ImageConditioning.Brightness"/>
            setting of the ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                            //set ICBrightness value
                            SigCap.Scenario1.ICBrightness = 1;
                            SigCap.Scenario1.Apply();
            
                            //get ICBrightness value
                            int intValue = SigCap.Scenario1.ICBrightness;        
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                     
                            'set ICBrightness value
                            SigCap.Scenario1.ICBrightness = 1
                            SigCap.Scenario1.Apply()
            
                            'get ICBrightness value
                            Dim intValue As Int32 = SigCap.Scenario1.ICBrightness
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICColorMode">
            <summary>
            Sets the color mode (grayscale or monochrome).
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>This property uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ColorMode"/>
            setting of the ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                            //set ICColorMode value
                            SigCap.Scenario1.ICColorMode = ImageConditioning.ColorModeValue.None;
                            SigCap.Scenario1.Apply();
            
                            //get ICColorMode value
                            string strValue = SigCap.Scenario1.ICColorMode.ToString();        
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                     
                           'set ICColorMode value
                            SigCap.Scenario1.ICColorMode = ImageConditioning.ColorModeValue.None
                            SigCap.Scenario1.Apply()
            
                            'get ICColorMode value
                            Dim strValue As String = SigCap.Scenario1.ICColorMode.ToString()
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICColorModeBrightnessThreshold">
            <summary>
            When ColorMode is set to monochrome, this property determines the overall image 
            brightness by determining the general level at which pixels are converted from 
            greyscale to black or white.
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>This property uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ColorMode"/>
            setting of the ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                            //set ICColorModeBrightnessThreshold value
                            SigCap.Scenario1.ICColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.Normal;
                            SigCap.Scenario1.Apply();
            
                            //get ICColorModeBrightnessThreshold value
                            string strValue = SigCap.Scenario1.ICColorModeBrightnessThreshold.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                     
                            'set ICColorModeBrightnessThreshold value
                            SigCap.Scenario1.ICColorModeBrightnessThreshold = ImageConditioning.ColorModeBrightnessThresholdValue.Normal
                            SigCap.Scenario1.Apply()
            
                            'get ICColorModeBrightnessThreshold value
                            Dim strValue As String = SigCap.Scenario1.ICColorModeBrightnessThreshold.ToString()
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICOutputCompression">
            <summary>
            Sets the output file type using the <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompression"/>
            property of the ImageConditioning class.
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                            //set ICOutputCompression value
                            SigCap.Scenario1.ICOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                            SigCap.Scenario1.Apply();
            
                            //get ICOutputCompression value
                            string strValue = SigCap.Scenario1.ICOutputCompression.ToString();     
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                     
                            'set ICOutputCompression value
                            SigCap.Scenario1.ICOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                            SigCap.Scenario1.Apply()
            
                            'get ICOutputCompression value
                            Dim strValue As String = SigCap.Scenario1.ICOutputCompression.ToString()
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.ICOutputCompressionQuality">
            <summary>
            Controls the JPEG compression level of the output file image, using the 
            <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompressionQuality"/> property of the 
            ImageConditioning class.
            </summary>
            <remarks>
            <para>
            After you set this property, call Apply() to save and apply all changes to Scenario properties
            </para>
            <para>It uses the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws an exception if image conditioning is not supported.
            </exception>
            <example>
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        
                           //set ICOutputCompressionQuality value
                            SigCap.Scenario1.ICOutputCompressionQuality = 80;
                            SigCap.Scenario1.Apply();
            
                            //get ICOutputCompressionQuality value
                            int intValue = SigCap.Scenario1.ICOutputCompressionQuality;      
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                     
                            'set ICOutputCompressionQuality value
                            SigCap.Scenario1.ICOutputCompressionQuality = 80
                            SigCap.Scenario1.Apply()
                    
                            'get ICOutputCompressionQuality value
                            Dim intValue As Int32 = SigCap.Scenario1.ICOutputCompressionQuality
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.Mode">
            ----------------------------------------------------------------------------------------------------------------		  
            <summary>
            Selects the mode for the current scenario. 
            </summary>
            <remarks>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to Scenario properties.
            </para>
            <para>
            In Regular mode, the area to capture is defined by settings relative to the size and position of the barcode label.
            </para>
            <para>
            Framing mode uses specific patterns to determine the area to capture.
            </para>
            <para>
            When either mode is enabled, a bar code read triggers the current signature capture scenario if 
            the barcode identifier, barcode length and barcode mask conditions are satisfied.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets image mode value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.Mode = scenario.ModeType.Regular;
                            SigCap.Scenario1.Apply();
                            
                            string retValue = SigCap.Scenario1.Mode.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.Mode = scenario.ModeType.Regular
                            SigCap.Scenario1.Apply()
                     
                            Dim retValue As String = SigCap.Scenario1.Mode.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.BarcodeIdentifier">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Selects the bar code symbology that triggers the signature capture. 
            </summary>
            <remarks>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to Scenario 
            properties.
            </para>
            <para>
            The symbologies supported are: 
            EAN/UPC, ITF(Interleaved 2 of 5), Code128/EAN128, Code 93,
            PDF417, Datamatix, Code QR, Maxicode.
            </para>
            <para>
            If set to ID_NULL, all supported symbologies trigger the signature capture.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example Interleaved 2 of 5 (ID_ITF) as the symbology that triggers a signature capture.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.Mode = scenario.ModeType.Regular;
                            SigCap.Scenario1.Apply();
                     
                            string retValue = SigCap.Scenario1.BarcodeIdentifier.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.BarcodeIdentifier = scenario.BarcodeIdentifierType.ID_ITF
                            SigCap.Scenario1.Apply()
                     
                            Dim retValue As String = SigCap.Scenario1.BarcodeIdentifier.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.BarcodeLength">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the bar code length (in characters) which triggers the signature capture. If the number 
            of characters in a scanned bar code matches this length, the signature capture occurs. 
            </summary>
            <remarks>
            Range is 0 (all bar codes trigger signature capture) to 100.
            <note>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to Scenario 
            properties.
            </para>
            <para>If set to 0, this condition is satisfied by any successful bar code read.</para>
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Barcode Length value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.BarcodeLength = 0;
                            SigCap.Scenario1.Apply();
                        
                            int retValue = SigCap.Scenario1.BarcodeLength.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                             SigCap.Scenario1.BarcodeLength = 0
                            SigCap.Scenario1.Apply()
                     
                            Dim retValue As Integer = SigCap.Scenario1.BarcodeLength
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.BarcodeMask">
             ----------------------------------------------------------------------------------------------------------------
             <summary>
             Specifies a bar code mask string (up to 26 characters) that triggers the signature capture.
             </summary>
             <remarks>
             <para>
             After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
             changes to Scenario properties.
             </para>
             <para>
             Bar code mask string that triggers the signature capture scenario. If empty, this condition 
             is satisfied by any bar code read. Rules for using masks are:  
             <list type="table">
             <listheader>
             <term>Wildcard</term>
             <description>Definition</description>
             <description>Example</description>
             </listheader>
             <item>
             <term>*</term>
             <description>Zero or more characters</description>
             <description>*123* = any code with a consecutive 123</description>
             </item>
             <item>
             <term>?</term>
             <description>one character</description>
             <description>???A* = any code with A in the fourth position followed by zero or more characters</description>
             </item>
             <item>
             <term>\ + wildcard</term>
             <description>a backslash plus a special character takes away the wildcard function</description>
             <description>*1\*3* = any code with a consecutive 1*3 anywhere in the data</description>
             </item>
             <item>
             <term>\C</term>
             <description>non-numerical value</description>
             <description>\C* = any code that starts with a non-numerical value</description>
             </item>
             <item>
             <term>\N</term>
             <description>numercial value</description>
             <description>*\N* = any code that contains a numerical value</description>
             </item>
             </list>
            </para>   
             </remarks> 
             <exception cref="T:System.ArgumentException">
             Throws exception with invalided property value. 
             </exception>
             <example>
             This example sets and gets Barcode Mask value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.BarcodeMask = "*";
                            SigCap.Scenario1.Apply();
                      
                            string retValue = SigCap.Scenario1.BarcodeMask;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.BarcodeMask = "*"
                            SigCap.Scenario1.Apply()
                      
                            Dim retValue As String = SigCap.Scenario1.BarcodeMask
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.BarcodeWidth">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Width (in mm) of the bar code that triggers a signature capture. Not supported if Mode is set to 
            Framing mode.
            </summary>
            <remarks>
            <para>        
            Width (in mm) of the bar code. Range is 0 to 0xffff.  
            </para>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Barcode Width value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.BarcodeWidth = 71;
                            SigCap.Scenario1.Apply();
                     
                            int retValue = SigCap.Scenario1.BarcodeWidth;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.BarcodeWidth = 71
                            SigCap.Scenario1.Apply()
                     
                            Dim retValue As Integer = SigCap.Scenario1.BarcodeWidth
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.BarcodeHeight">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Height (in mm) of the bar code that triggers a signature capture. Not supported if Mode is set to 
            Framing mode.
            </summary>
            <remarks>
            <para>Height (in mm) of the bar code. Range is 0 to 0xffff. See an <see cref="!:illustration"/></para>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Barcode Height value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.BarcodeHeight = 17;
                            SigCap.Scenario1.Apply();
                      
                            int retValue = SigCap.Scenario1.BarcodeHeight;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.BarcodeHeight = 17
                            SigCap.Scenario1.Apply()
                      
                            Dim retValue As Integer = SigCap.Scenario1.BarcodeHeight
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.HorizontalOffset">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Horizontal offset (in mm) from the center of the bar code to the center of the capture area.
            </summary>
            <remarks>
            <para>
            Offset distance (in mm). Range is -0x7fff to 0x7fff. See an <see cref="!:illustration"/>.
            </para>
            <note>
            <para>After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </para>
            <para>This setting is ignored if <see cref="P:Intermec.DataCollection.scenario.Mode"/> is set to Framing mode.</para>
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Horizontal Offset value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.HorizontalOffset = 35;
                            SigCap.Scenario1.Apply();
                      
                            int retValue = SigCap.Scenario1.HorizontalOffset;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.HorizontalOffset = 35
                            SigCap.Scenario1.Apply()
                     
                            Dim retValue As Integer = SigCap.Scenario1.HorizontalOffset
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.VerticalOffset">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Vertical offset (in mm) from the center of the bar code to the center of the capture area.
            </summary>
            <remarks>
            <para>
            Offset distance (in mm). Range is -0x7fff to 0x7fff. 
            </para>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to Scenario 
            properties.
            </para>
            <note>
            This setting is ignored if <see cref="P:Intermec.DataCollection.scenario.Mode"/> is set to Framing mode.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Vertical Offset value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.VerticalOffset = 22;
                            SigCap.Scenario1.Apply();
                     
                            int retValue = SigCap.Scenario1.VerticalOffset;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.VerticalOffset = 22
                            SigCap.Scenario1.Apply()
                     
                            Dim retValue As Integer = SigCap.Scenario1.VerticalOffset
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.AreaWidth">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the width (in mm) of the capture area.
            </summary>
            <remarks>
            <para>
            Width (in mm) of the capture area. Range is 0 to 0xffff. 
            </para>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes 
            to Scenario properties.
            </para>
            <note>
            This setting is ignored if <see cref="P:Intermec.DataCollection.scenario.Mode"/> is set to Framing mode.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Area Width value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.AreaWidth = 74;
                            SigCap.Scenario1.Apply();
                      
                            int retValue = SigCap.Scenario1.AreaWidth;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.AreaWidth = 74
                            SigCap.Scenario1.Apply()
                      
                            Dim retValue As Integer = SigCap.Scenario1.AreaWidth
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.AreaHeight">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the height (in mm) of the capture area.
            </summary>
            <remarks>
            <para>
            Height (in mm) of the capture area. Range is 0 to 0xffff. 
            </para>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to Scenario properties.
            </para>
            <note>
            This setting is ignored if <see cref="P:Intermec.DataCollection.scenario.Mode"/> is set to Framing mode.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Area Height value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.AreaHeight = 22;
                            SigCap.Scenario1.Apply();
                      
                            int retValue = SigCap.Scenario1.AreaHeight;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.AreaHeight = 22
                            SigCap.Scenario1.Apply()
                    
                            Dim retValue As Integer = SigCap.Scenario1.AreaHeight
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.AutomaticCorrection">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Enables automatic image correction. This process extracts horizontal and vertical lines 
            from the image and uses them to correct the captured area.
            </summary>
            <remarks>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to 
            Scenario properties.
            </para>
            <note>
            This setting is ignored if <see cref="P:Intermec.DataCollection.scenario.Mode"/> is set to Framing mode.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Automatic Correction value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.AutomaticCorrection = scenario.AutomaticCorrectionType.Both;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.AutomaticCorrection.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.AutomaticCorrection = scenario.AutomaticCorrectionType.Both
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.AutomaticCorrection.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.FocusCheck">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the level of focus check to perform on the bar code.
            </summary>
            <remarks>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </para>
            <para>
            This setting can be used to reject blurred signature captures.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Focus Check value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.FocusCheck = scenario.FocusType.Disabled;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.FocusCheck.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.FocusCheck = scenario.FocusType.Disabled
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.FocusCheck.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.ImageRatioCheck">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the percentage of pixels the capture image must have relative to the source image, 
            thus limiting the usable depth of field. 
            </summary>
            <remarks>
            <para>
            Range is 0 to 0x64. The higher the value, the more the depth of field is limited. 
            A value of 50 means that the capture area must have at least 50% of the number of 
            pixels of the source image.
            </para>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to 
            Scenario properties.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Image Ratio Check value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.ImageRatioCheck = 10;
                            SigCap.Scenario1.Apply();
            
                            int retValue = SigCap.Scenario1.ImageRatioCheck;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.ImageRatioCheck = 10
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As Integer = SigCap.Scenario1.ImageRatioCheck
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.ProjectiveMappingResolution">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the level of projective mapping, which adjusts the resolution of captured images.
            </summary>
            <remarks>
            <para>
            After you set this property, call Scenario.Apply to save and apply all changes to 
            Scenario properties.
            </para>
            <note>
            <para>
            When projective mapping is enabled, the area captured is adjusted to a different size:
            </para>
            <para>
            <b>Automatic </b>adjusts the resolution automatically.
            </para>
            <para>
            <b>Fixed  </b>adjusts the size of the capture to a preset width based on the narrowest 
            element. For example, "Fixed_1Pixel" adjusts the capture size so that the narrowest bar 
            code element is 1 pixel wide.
            </para>
            <para>
            When projective mapping is disabled, the system returns the smallest rectangle image.
            </para>
            <para>
            Set projective mapping to a fixed value to ensure that the captured image is always the 
            same size. If projective mapping is set to a fixed value and the captured image is larger 
            than the original image, the system sends a signature capture failure event with the 
            "invalid parameters" failure code.
            </para>
            </note>        
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Projective Mapping Resolution value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.ProjectiveMappingResolution = scenario.ProjectiveMappingResolutionType.Automatic;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.ProjectiveMappingResolution.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.ProjectiveMappingResolution = scenario.ProjectiveMappingResolutionType.Automatic
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.ProjectiveMappingResolution.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.OutputFormat">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets either grayscale or black and white output for the capture image by 
            enabling binarization of the image using an adaptive threshold.
            This process is performed after <see cref="P:Intermec.DataCollection.scenario.ContrastEnhancement"/>, 
            <see cref="P:Intermec.DataCollection.scenario.Filtering"/> and <see cref="P:Intermec.DataCollection.scenario.Sharpening"/>.
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to 
            Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Output Format value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.OutputFormat = scenario.OutputFormatMode.GrayScale;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.OutputFormat.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.OutputFormat = scenario.OutputFormatMode.GrayScale
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.OutputFormat.ToString()            
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.QualitySetting">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the JPG compression for the capture image.
            </summary>
            <remarks>
            <para>
            A positive integer setting the compression quality. Range is 0 to 100. For best results, 
            Intermec recommends a value of 20 or higher.
            </para>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Quality Setting value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.QualitySetting = 100;
                            SigCap.Scenario1.Apply();
            
                            int retValue = SigCap.Scenario1.QualitySetting;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.QualitySetting = 100
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As Integer = SigCap.Scenario1.QualitySetting
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.ContrastEnhancement">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Enables contrast enhancement (also known as dynamic stretching) of the capture image.
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Contrast Enhancement value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.ContrastEnhancement = scenario.EnableDisable.Disable;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.ContrastEnhancement.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.ContrastEnhancement = scenario.EnableDisable.Disable
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.ContrastEnhancement.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.Sharpening">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Enhances edges in the captured image, which may help readability of text in the image. 
            Sharpening is performed after <see cref="P:Intermec.DataCollection.scenario.Filtering"/>.
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Sharpening value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.Sharpening = scenario.EnableDisable.Disable;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.Sharpening.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.Sharpening = scenario.EnableDisable.Disable
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.Sharpening.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.Filtering">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Reduces noise resulting from the <see cref="P:Intermec.DataCollection.scenario.Sharpening"/> process. The higher the setting, 
            the more noise is reduced. 
            </summary>
            <remarks>
            <para>
            Range is 0 to 0xff. If set to 0, filtering is disabled. The higher the setting, 
            the more noise is reduced. The filtering process is 
            performed after <see cref="P:Intermec.DataCollection.scenario.ContrastEnhancement"/>.
            </para>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to 
            Scenario properties.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Filtering value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.Filtering = 0;
                            SigCap.Scenario1.Apply();
            
                            byte retValue = SigCap.Scenario1.Filtering;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.Filtering = 0
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As Byte = SigCap.Scenario1.Filtering
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.Filename">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the name for the saved capture image.
            </summary>
            <remarks>
            <para>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </para>
            <para>
            See <see cref="T:Intermec.DataCollection.CaptureEventArgs"/> Class for more information on the capture image file name.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets file name string.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.Filename = "\\SigSce1";
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.Filename;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.Filename = "\SigSce1"
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.Filename.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.FilePadding">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Adds either an incremental count or the current date and time to the capture image file name.
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets File Padding value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.FilePadding = scenario.FilePaddingType.DateTime;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.FilePadding.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.FilePadding = scenario.FilePaddingType.DateTime
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.FilePadding.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.FileOutputFormat">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the file format for the capture image (.bmp or .jpg).
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all changes to Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets File Output Format type.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.FileOutputFormat = scenario.FileOutputFormatType.JPG;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.FileOutputFormat.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.FileOutputFormat = scenario.FileOutputFormatType.JPG
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.FileOutputFormat.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.DateTimePosition">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the position of a date and time stamp on the capture image.
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Date Time Position value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.DateTimePosition = scenario.DateTimePositionType.LowerRight;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.DateTimePosition.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.DateTimePosition = scenario.DateTimePositionType.LowerRight
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.DateTimePosition.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.CaptionPosition">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the position of a caption stamp on the capture image. Use <see cref="P:Intermec.DataCollection.scenario.CaptionString"/> 
            to set the caption text.
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Caption Position value.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.CaptionPosition = scenario.CaptionPositionType.UpperLeft;
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.CaptionPosition.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.CaptionPosition = scenario.CaptionPositionType.UpperLeft
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.CaptionPosition.ToString()
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.CaptionString">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the text for a caption to be placed on the capture image. Use <see cref="P:Intermec.DataCollection.scenario.CaptionPosition"/> 
            to set the position of the caption on the image.
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Caption String.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.CaptionString = "SigSce";
                            SigCap.Scenario1.Apply();
            
                            string retValue = SigCap.Scenario1.CaptionString;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.CaptionString = "SigSce"
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As String = SigCap.Scenario1.CaptionString
                        End Sub
                        </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection.scenario.FlipPicture">
            <summary>
            Flips the image upside down.
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Flip Picture status.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.FlipPicture = true;
                            //apply above setting
                            SigCap.Scenario1.Apply();
            
                            bool retValue = SigCap.Scenario1.FlipPicture;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                             SigCap.Scenario1.FlipPicture = True
                            'apply above setting
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As Boolean = SigCap.Scenario1.FlipPicture
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.scenario.MirrorPicture">
            <summary>
            Flips the image on the vertical axis so the pictureBox displays a mirror image of the 
            actual scene.
            </summary>
            <remarks>
            After you set this property, call <see cref="M:Intermec.DataCollection.scenario.Apply"/> to save and apply all 
            changes to Scenario properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <example>
            This example sets and gets Mirror Picture status.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.MirrorPicture = true;
                            //apply above setting
                            SigCap.Scenario1.Apply();
            
                            bool retValue = SigCap.Scenario1.MirrorPicture;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.MirrorPicture = True
                            'apply above setting
                            SigCap.Scenario1.Apply()
            
                            Dim retValue As Boolean = SigCap.Scenario1.MirrorPicture
                        End Sub
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.scenario.AutomaticCorrectionType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.AutomaticCorrection"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.AutomaticCorrectionType.Disabled">
            <summary>No automatic correction</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.AutomaticCorrectionType.HorizontalOnly">
            <summary>Horizontal correction only.</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.AutomaticCorrectionType.VerticalOnly">
            <summary>Vertical  correction only.</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.AutomaticCorrectionType.Both">
            <summary>Enables horizontal and vertical correction.</summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.ModeType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.Mode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.ModeType.Disabled">
            <summary>
            No mode selected. Disables signature capture for this scenario.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.ModeType.Regular">
            <summary>
            Bar code locator. Imager scans bar code; if bar code matches other scenario 
            properties such as <see cref="P:Intermec.DataCollection.scenario.BarcodeIdentifier"/> or <see cref="P:Intermec.DataCollection.scenario.BarcodeMask"/>, 
            signature capture is triggered.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.ModeType.Framing">
            <summary>
            Framing mode. Imager looks for calibrated markings at the corners of the 
            capture area (not supported by all imagers).
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.BarcodeIdentifierType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.BarcodeIdentifier"/> property.
            </summary>        
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_NULL">
            <summary>Any supported symbology.</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_EAN13">
            <summary>EAN-13</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_EAN8">
            <summary> EAN-8</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_UPCA">
            <summary> UPC-A</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_UPCE">
            <summary> UPC-E</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_ITF">
            <summary> Interleaved 2 of 5</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_128">
            <summary> Code 128 </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_93">
            <summary> Code 93 </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_PDF">
            <summary> PDF417 </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_EAN128">
            <summary> GS1-128 /EAN-128 </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_DATAMATRIX">
            <summary> DataMatrix </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_QR">
            <summary> QR Code </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.BarcodeIdentifierType.ID_MAXICODE">
            <summary> Maxicode </summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.FocusType">
            <summary>
            An enum data type for type <see cref="P:Intermec.DataCollection.scenario.FocusCheck"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.FocusType.Disabled">
            <summary>No focus check.</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.FocusType.Medium">
            <summary>Medium level.</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.FocusType.High">
            <summary>High level.</summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.ProjectiveMappingResolutionType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.ProjectiveMappingResolution"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.ProjectiveMappingResolutionType.Disabled">
            <summary>
            Projective mapping disabled. Imager returns the smallest rectangle image containing 
            the capture area.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.ProjectiveMappingResolutionType.Automatic">
            <summary>
            Projective mapping is enabled and resolution is automatically adjusted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.ProjectiveMappingResolutionType.Fixed_1Pixel">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 1 pixel wide.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.ProjectiveMappingResolutionType.Fixed_2Pixels">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 2 pixels wide.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.ProjectiveMappingResolutionType.Fixed_3Pixels">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 3 pixels wide.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.ProjectiveMappingResolutionType.Fixed_4Pixels">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 4 pixels wide.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.OutputFormatMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.OutputFormat"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.OutputFormatMode.GrayScale">
            <summary>Using Gray Scale.</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.OutputFormatMode.Binary">
            <summary>Sets to black and white.</summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.EnableDisable">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.ContrastEnhancement"/> and <see cref="P:Intermec.DataCollection.scenario.Sharpening"/> properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.EnableDisable.Disable">
            <summary>Disables option</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.EnableDisable.Enable">
            <summary>Enables option</summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.FilePaddingType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.FilePadding"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.FilePaddingType.None">
            <summary>No file padding added to file name.</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.FilePaddingType.IncrementalCounter">
            <summary>begins at 1.</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.FilePaddingType.DateTime">
            <summary>Date and time, in format YYMMDDHHMMSS. Hour is based on the 24-hour 
            clock (for example, 1 P.M. = 13).</summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.FileOutputFormatType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.FileOutputFormat"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.FileOutputFormatType.BMP">
            <summary>bitmap format</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.FileOutputFormatType.JPG">
            <summary>JPG format</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.FileOutputFormatType.TIFF">
            <summary>Tiff format</summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.DateTimePositionType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.DateTimePosition"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.DateTimePositionType.Disabled">
            <summary>No date/time stamp</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.DateTimePositionType.LowerRight">
            <summary>Lower right corner of the capture image</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.DateTimePositionType.LowerLeft">
            <summary>Lower left corner of the capture image</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.DateTimePositionType.UpperRight">
            <summary>Upper right corner of the capture image</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.DateTimePositionType.UpperLeft">
            <summary>Upper left corner of the capture image</summary>
        </member>
        <member name="T:Intermec.DataCollection.scenario.CaptionPositionType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.scenario.CaptionPosition"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.CaptionPositionType.Disabled">
            <summary>No caption</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.CaptionPositionType.LowerRight">
            <summary>Lower right corner of the capture image</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.CaptionPositionType.LowerLeft">
            <summary>Lower left corner of the capture image</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.CaptionPositionType.LowerCenter">
            <summary>Lower center of the capture image</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.CaptionPositionType.UpperRight">
            <summary>Upper right corner of the capture image</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.CaptionPositionType.UpperLeft">
            <summary>Upper left corner of the capture image</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.CaptionPositionType.UpperCenter">
            <summary>Upper center of the capture image</summary>
        </member>
        <member name="F:Intermec.DataCollection.scenario.CaptionPositionType.Center">
            <summary>Center of the capture image</summary>
        </member>
        <member name="T:Intermec.DataCollection.Sigcap2CaptureEventHandler">
            <exclude /> 
            <summary>
            The Sigcap2CaptureEventHandler delegate represents the method that will handle the 
            Capture event of CaptureEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class</param>
            <param name="CaptureEventArgs">
            An object of CaptureEventArgs class that passes Scenario and file name information of signature capture.
            </param>
        </member>
        <member name="T:Intermec.DataCollection.Sigcap2DirectionEventHandler">
            <exclude /> 
            <summary>
            The Sigcap2DirectionEventHandler delegate represents the method that will handle the 
            Direction event of DirectionEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class</param>
            <param name="DirectionEventArgs">
            An object of DirectionEventArgs class that passes information of which way to move the imager 
            for a successful capture.
            </param>
        </member>
        <member name="T:Intermec.DataCollection.SignatureCapture2">
            <summary>
            If your Intermec computer is equipped with an imager, this class allows you to perform signature capture. 
            </summary>
            <remarks>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded 
            operations. Instance members are not guaranteed to be thread safe and each instance should be 
            used only within a single thread.
            </para>
            <para>
            Your Intermec computer must have SSPB v5.25 or later to support the SignatureCapture2 class. 
            To check this firmware version, open Intermec Settings on the computer and choose 
            <b>Device Settings > System Component Versions.</b>
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.SignatureCapture2.Scenario1">
            <summary>
            A scenario object that sets and gets Scenario1 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.SignatureCapture2.Scenario2">
            <summary>
            A scenario object that sets and gets Scenario2 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.SignatureCapture2.Scenario3">
            <summary>
            A scenario object that sets and gets Scenario3 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.SignatureCapture2.Scenario4">
            <summary>
            A scenario object that sets and gets Scenario4 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.SignatureCapture2.iFeatureVersion">
            <exclude /> 
            <summary>
            Gets feature version of current source.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.SignatureCapture2.Finalize">
            <exclude />        
        </member>
        <member name="M:Intermec.DataCollection.SignatureCapture2.Dispose">
            <summary>
            Releases all SignatureCapture2 resources. To avoid problems, call 
            Dispose before you exit the application.
            </summary>
            <remarks>
            If there is already an existing instance of SignatureCapture2, you 
            must call Dispose before a creating a new instance of SignatureCapture2. 
            </remarks>
            <example>
            This example releases signature capture resource before exit application.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        }
                        
                        private void btnExit_Click(object sender, EventArgs e)
                        {
                            if (SigCap != null)
                                SigCap.Dispose();
            
                            Application.Exit();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                        End Sub
                     
                        Private Sub btnExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnExit.Click
                            If SigCap Is Nothing Then
                                'do nothing
                            Else
                                SigCap.Dispose()
                            End If
            
                            Application.Exit()
                        End Sub
                        </code>
            </example> 
        </member>
        <member name="M:Intermec.DataCollection.SignatureCapture2.CancelSignatureCapture">
            <exclude />
            <summary>
            Causes a pending signature capture image. 
            </summary>        
        </member>
        <member name="M:Intermec.DataCollection.SignatureCapture2.#ctor">
            <summary>
            Creates an instance of the SignatureCapture2 class.
            </summary>
            <remarks>
            <para>
            To properly clean up resources, call SignatureCapture2.Dispose() 
            before you exit your application.
            </para>
            <para>
            If there is already an existing instance of SignatureCapture2, you 
            must call Dispose before a creating a new instance of SignatureCapture2. 
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            Throws exception when an error has occurred on methods and properties. 
            </exception> 
            <example>
            This example creates an instance of SignatureCapture2 class and release
            SignatureCapture2 resource before exit application.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                        }
                        
                        private void btnExit_Click(object sender, EventArgs e)
                        {
                            if (SigCap != null)
                                SigCap.Dispose();
            
                            Application.Exit();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                        End Sub
                     
                        Private Sub btnExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnExit.Click
                            If SigCap Is Nothing Then
                                'do nothing
                            Else
                                SigCap.Dispose()
                            End If
            
                            Application.Exit()
                        End Sub
                        </code>
            </example> 
        </member>
        <member name="E:Intermec.DataCollection.SignatureCapture2.Capture">
            <summary>
            An event for notifying applications that a successful signature capture has been made. 
            </summary>
            <example>
            This example uses signature capture event.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.Filename = "\\SigSce1";
                            SigCap.Capture += new Sigcap2CaptureEventHandler(SigCap_Capture);
                        }
                        
                        void SigCap_Capture(object sender, CaptureEventArgs CaptureEventArgs)
                        {
                            //gets captured file path
                            string SignaturePath = CaptureEventArgs.Filename.ToString();
            
                            //gets information Scenario
                            this.listBox1.Items.Add("Scenario = " + CaptureEventArgs.Scenario.ToString());
                            this.listBox1.Items.Add("Scenario = " + CaptureEventArgs.Filename.ToString());
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.Filename = "\SigSce1"
                        End Sub
                     
                        Private Sub SigCap_Capture(ByVal sender As Object, ByVal CaptureEventArgs As Intermec.DataCollection.CaptureEventArgs) Handles SigCap.Capture
                            'gets captured file path
                            Dim SignaturePath As String = CaptureEventArgs.Filename.ToString()
            
                            'gets Scenario information 
                            Me.ListBox1.Items.Add("Scenario = " + CaptureEventArgs.Scenario.ToString())
                            Me.ListBox1.Items.Add("Scenario = " + CaptureEventArgs.Filename.ToString())
                        End Sub
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection.SignatureCapture2.Direction">
            <summary>
            An event for notifying applications that the signature capture was 
            unsuccessful. The event indicates which way to move the imager for 
            a successful capture.
            </summary>
            <example>
            This example uses Direction event.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Direction += new Sigcap2DirectionEventHandler(SigCap_Direction);
                        }
                        
                        void SigCap_Direction(object sender, DirectionEventArgs DirectionEventArgs)
                        {
                            bool Backward = DirectionEventArgs.MoveBackward;
                            bool forward = DirectionEventArgs.MoveForward;
                            bool left = DirectionEventArgs.MoveLeft;
                            bool right = DirectionEventArgs.MoveRight;
                            bool up = DirectionEventArgs.MoveUp;
                            bool down = DirectionEventArgs.MoveDown;            
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                        End Sub
                     
                        Private Sub SigCap_Direction(ByVal sender As Object, ByVal DirectionEventArgs As Intermec.DataCollection.DirectionEventArgs) Handles SigCap.Direction
                            Dim backward As Boolean = DirectionEventArgs.MoveBackward
                            Dim forward As Boolean = DirectionEventArgs.MoveForward
                            Dim left As Boolean = DirectionEventArgs.MoveLeft
                            Dim right As Boolean = DirectionEventArgs.MoveRight
                            Dim down As Boolean = DirectionEventArgs.MoveDown
                            Dim up As Boolean = DirectionEventArgs.MoveUp
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SignatureCapture2.LightGoal">
            <summary>
            Specifies the goal for the average lighting of images. Value Range 0 - 255. 
            </summary>
            <remarks>
            <para>
            The lighting goal is the average light intensity that the scanner tries to achieve when 
            capturing an image. If the lighting goal is set too low, the image will be dark (underexposed). 
            If it is set too high the image will be too bright (overexposed).
            </para>
            <para>  
            Range is 20 to 200 for most Intermec computers. Default is 100 (60 for CK61 only). 
            Check Intermec Settings on the computer to determine the exact range for your computer 
            and configuration.       
            </para>
            <note>
            The Light Goal setting applies to all scenarios. 
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SignatureCaptureException">
            throws exception if failed on sets or gets LightGoal value.
            </exception>
            <exception cref="T:System.ArgumentException">
            throws exception in input value is not correct.
            </exception>
            <example>
            This example sets and gets light goal value when capturing an signature image. Assume a trackBar
            is used in application.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            //creates a instance of SignatureCapture2
                            SigCap = new SignatureCapture2();
                            //sets and gets light goal value 
                            SigCap2.LightGoal = this.trackBarLightGoal.Value;
                            listScenarioInfo.Items.Add("LightGoal = " + SigCap2.LightGoal.ToString());
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            'creates a instance of SignatureCapture2     
                            SigCap = New SignatureCapture2()
                            'sets and gets light goal value 
                            SigCap2.LightGoal = me.trackBarLightGoal.Value;
                            listScenarioInfo.Items.Add("LightGoal = " + SigCap2.LightGoal.ToString())
                        End Sub
                        </code>
                        </example>
        </member>
        <member name="P:Intermec.DataCollection.SignatureCapture2.SupportSigCapImageConditioning">
            <summary>
            Gets the status whether Image Conditioning is 
            supported for Siganture Capture.
            </summary>
            <example>
            This example sets and gets light goal value when capturing an signature image. Assume a trackBar
            is used in application.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            //creates a instance of SignatureCapture2
                            SigCap = new SignatureCapture2();
                            string status = SigCap2.SupportSigCapImageConditioning.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            'creates a instance of SignatureCapture2     
                            SigCap = New SignatureCapture2()
                            dim status as string = SigCap2.SupportSigCapImageConditioning.ToString();
                        End Sub
                        </code>
                        </example> 
        </member>
        <member name="T:Intermec.DataCollection.CaptureEventArgs">
            <summary>
            This member class of <see cref="T:Intermec.DataCollection.SignatureCapture2"/> passes information to the 
            calling application when an image is captured.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.CaptureEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance of CaptureEventArgs class and passes file name
            and scenario information.
            </summary>
            <param name="iFilename">
            Complete name for the capture image file, in this format: 
            Filename-Scenario-Padding.OutputFormat. Where:
            <list type="bullet">
            <item>Filename is the name for the file set by Scenario.Filename.</item>
            <item>Scenario is the number of the scenario (1 to 4) that 
            triggered the capture. The scenario is a property of the 
            SignatureCapture2 instance.
            </item>
            <item>Padding is the increment (counter or date and time) 
            set by Scenario.FilePadding.
            </item>
            <item>OutputFormat is the format (.jpg or .bmp) set by 
            Scenario.FileOutputFormat.
            </item>
            </list></param>
            <param name="iscenario">
            Number of the scenario (1 to 4) that triggered the image capture. 
            Note that this is duplicated in the Filename string.
            </param>
            <example>
            This example uses signature capture event.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Scenario1.Filename = "\\SigSce1";
                            SigCap.Capture += new Sigcap2CaptureEventHandler(SigCap_Capture);
                        }
                        
                        void SigCap_Capture(object sender, CaptureEventArgs CaptureEventArgs)
                        {
                            //gets captured file path
                            string SignaturePath = CaptureEventArgs.Filename.ToString();
            
                            //gets information Scenario
                            this.listBox1.Items.Add("Scenario = " + CaptureEventArgs.Scenario.ToString());
                            this.listBox1.Items.Add("Scenario = " + CaptureEventArgs.Filename.ToString());
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                            SigCap.Scenario1.Filename = "\SigSce1"
                        End Sub
                     
                        Private Sub SigCap_Capture(ByVal sender As Object, ByVal CaptureEventArgs As Intermec.DataCollection.CaptureEventArgs) Handles SigCap.Capture
                            'gets captured file path
                            Dim SignaturePath As String = CaptureEventArgs.Filename.ToString()
            
                            'gets Scenario information 
                            Me.ListBox1.Items.Add("Scenario = " + CaptureEventArgs.Scenario.ToString())
                            Me.ListBox1.Items.Add("Scenario = " + CaptureEventArgs.Filename.ToString())
                        End Sub
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.CaptureEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection.CaptureEventArgs.Filename">
            <summary>
            Stores the complete name for the capture image file passed in from 
            iFilename.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CaptureEventArgs.Scenario">
            <summary>
            Stores the number of the scenario that triggered the image capture.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CaptureEventArgs.LabelData">
            <exclude /> 
            <summary>Not used currently.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CaptureEventArgs.LabelDataSize">
            <exclude /> 
            <summary>Not used currently.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CaptureEventArgs.strDataBuffer">
            <exclude /> 
            <summary>Not used currently.</summary>
        </member>
        <member name="T:Intermec.DataCollection.DirectionEventArgs">
            <summary>
            This member class of SignatureCapture2 passes information from the 
            BarcodeReader class to the calling application on an unsuccessful 
            signature capture. The event indicates the direction to move the 
            imager to properly capture the specified area.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.DirectionEventArgs.#ctor(System.Int32)">
            <summary>
            Creates an instance of DirectionEventArgs class.
            </summary>
            <param name="iMovement">
            Direction to move the imager to complete a signature capture:
            </param>
            <example>
            This example uses Direction event.
            <code>
                        private Intermec.DataCollection.SignatureCapture2 SigCap;
                        public frmSignatureCapture()
                        {
                            InitializeComponent();
                            SigCap = new SignatureCapture2();
                            SigCap.Direction += new Sigcap2DirectionEventHandler(SigCap_Direction);
                        }
                        
                        void SigCap_Direction(object sender, DirectionEventArgs DirectionEventArgs)
                        {
                            bool Backward = DirectionEventArgs.MoveBackward;
                            bool forward = DirectionEventArgs.MoveForward;
                            bool left = DirectionEventArgs.MoveLeft;
                            bool right = DirectionEventArgs.MoveRight;
                            bool up = DirectionEventArgs.MoveUp;
                            bool down = DirectionEventArgs.MoveDown;            
                        }
                        </code>
                        <code lang="VB.NET">
                        Private WithEvents SigCap As Intermec.DataCollection.SignatureCapture2
                        Private Sub frmSignatureCapture_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            SigCap = New SignatureCapture2()
                        End Sub
                     
                        Private Sub SigCap_Direction(ByVal sender As Object, ByVal DirectionEventArgs As Intermec.DataCollection.DirectionEventArgs) Handles SigCap.Direction
                            Dim backward As Boolean = DirectionEventArgs.MoveBackward
                            Dim forward As Boolean = DirectionEventArgs.MoveForward
                            Dim left As Boolean = DirectionEventArgs.MoveLeft
                            Dim right As Boolean = DirectionEventArgs.MoveRight
                            Dim down As Boolean = DirectionEventArgs.MoveDown
                            Dim up As Boolean = DirectionEventArgs.MoveUp
                        End Sub
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.DirectionEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection.DirectionEventArgs.MoveUp">
            <summary>
            Stores the direction to move the imager to complete a signature capture:
            <list type="bullet">
            <item>MoveBackward: Move away from the bar code label.</item>
            <item>MoveForward: Move towards the bar code label.</item>
            <item>MoveDown: Move towards the bottom edge of the label.</item>
            <item>MoveLeft: Move towards the left edge of the label.</item>
            <item>MoveRight: Move towards the right edge of the label.</item>
            <item>MoveUp: Move towards the top edge of the label.</item>
            </list>
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DirectionEventArgs.MoveDown">
            <summary>
            Stores the direction to move the imager to complete a signature capture:
            <list type="bullet">
            <item>MoveBackward: Move away from the bar code label.</item>
            <item>MoveForward: Move towards the bar code label.</item>
            <item>MoveDown: Move towards the bottom edge of the label.</item>
            <item>MoveLeft: Move towards the left edge of the label.</item>
            <item>MoveRight: Move towards the right edge of the label.</item>
            <item>MoveUp: Move towards the top edge of the label.</item>
            </list>
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DirectionEventArgs.MoveLeft">
            <summary>
            Stores the direction to move the imager to complete a signature capture:
            <list type="bullet">
            <item>MoveBackward: Move away from the bar code label.</item>
            <item>MoveForward: Move towards the bar code label.</item>
            <item>MoveDown: Move towards the bottom edge of the label.</item>
            <item>MoveLeft: Move towards the left edge of the label.</item>
            <item>MoveRight: Move towards the right edge of the label.</item>
            <item>MoveUp: Move towards the top edge of the label.</item>
            </list>
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DirectionEventArgs.MoveRight">
            <summary>
            Stores the direction to move the imager to complete a signature capture:
            <list type="bullet">
            <item>MoveBackward: Move away from the bar code label.</item>
            <item>MoveForward: Move towards the bar code label.</item>
            <item>MoveDown: Move towards the bottom edge of the label.</item>
            <item>MoveLeft: Move towards the left edge of the label.</item>
            <item>MoveRight: Move towards the right edge of the label.</item>
            <item>MoveUp: Move towards the top edge of the label.</item>
            </list>
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DirectionEventArgs.MoveForward">
            <summary>
            Stores the direction to move the imager to complete a signature capture:
            <list type="bullet">
            <item>MoveBackward: Move away from the bar code label.</item>
            <item>MoveForward: Move towards the bar code label.</item>
            <item>MoveDown: Move towards the bottom edge of the label.</item>
            <item>MoveLeft: Move towards the left edge of the label.</item>
            <item>MoveRight: Move towards the right edge of the label.</item>
            <item>MoveUp: Move towards the top edge of the label.</item>
            </list>
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.DirectionEventArgs.MoveBackward">
            <summary>
            Stores the direction to move the imager to complete a signature capture:
            <list type="bullet">
            <item>MoveBackward: Move away from the bar code label.</item>
            <item>MoveForward: Move towards the bar code label.</item>
            <item>MoveDown: Move towards the bottom edge of the label.</item>
            <item>MoveLeft: Move towards the left edge of the label.</item>
            <item>MoveRight: Move towards the right edge of the label.</item>
            <item>MoveUp: Move towards the top edge of the label.</item>
            </list>
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.utilities">
            <summary>
            Summary description for utilities.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning">
            <summary>
            <para>
            Common helper class for setting properties and filters for images created by Intermec imagers.
            </para>
            <para>
            Properties of this class configure image conditioning settings, which apply digital processing 
            to images generated by the <see cref="T:Intermec.DataCollection.DocumentCapture"/> and <see cref="T:Intermec.DataCollection.Imager"/> classes.
            </para>
            <remarks>
            <para>
            This class is instantiated when you create an instance of the DocumentCapture class.
            </para>
            <para>
            Two objects of this class are created when you create an instance of the Imager class. One object 
            applies to streaming images and the other applies to SnapShot images. These objects are available 
            through either the <see cref="F:Intermec.DataCollection.Imager.ImageConditioning"/> Field or the <see cref="F:Intermec.DataCollection.Imager.SnapShotConditioning"/> 
            Field.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.ImageConditioning.#ctor(System.Byte[],System.Int32,System.Byte,System.Byte)">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection.ImageConditioning.Finalize">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection.ImageConditioning.ImageConditioningVersion(System.Int32@,System.Int32@)">
            <summary>
            Allows determining if Image Conditioning is available on this device and build, and what the version it is.
            </summary>
            <param name="num1">Major Version number X.</param>
            <param name="num2">Minor Version number .X</param>
            <returns>true = Image Conditioning available</returns>
        </member>
        <member name="M:Intermec.DataCollection.ImageConditioning.ImageConditioningAvailable">
            <summary>
            Determines if Image Conditioning is available on this device and build.
            </summary>
            <returns>Returns true if Image Conditioning is available on this device and build combination.</returns>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement">
            <summary>
            Controls whether the image contrast is enhanced. Adjusts brightness and contrast automatically when used. 
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>        
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.TextEnhancement">
            <summary>
            Enables text enhancement, which controls the readability of text in the image.
            </summary>
            <remarks>
            This property sets the level to which contrast changes in an image are exaggerated. 
            By exaggerating the contrast between black text and its white background, it can make 
            text more readable, but too high a level can induce visual noise due to uneven lighting, 
            wrinkled surfaces, or other variables. Choose the lowest level that provides readable text. 
            A value of None turns off text enhancement.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.ImageRotation">
            <summary>
            Rotates the image counterclockwise from its original position by the specified amount.
            </summary>
            <remarks>
            If you also set <see cref="P:Intermec.DataCollection.Imager.FlipPicture"/>, this property is applied first. 
            For best results, do not apply this property if you specify FlipPicture.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.Subsampling">
            <summary>
            Reduces image size and therefore transfer time, by averaging sets of pixels into one new pixel.
            If full resolution is unneeded, reducing this setting can lower computation time and reduce 
            memory consumption. 
            </summary>
            <remarks>
            <para>
            Includes horizontal and vertical grouping, so 1 of 2 would be 1/4 the as large as none.  1 of 8 = 1/64th etc.
            </para>       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.NoiseReduction">
            <summary>
            <para>
            This setting helps reduce the noise resulting from the edge enhancement 
            process. If set to 0, this filtering stage is disabled. The higher the setting value, the higher 
            the filtering. 
            </para> 
            <para>The range is 0 to 9. </para>
            </summary>
            <remarks>
            <para>
            Use this carefully as it may also add some blur.
            </para>
            <para><note>
            Sets it to  0 (zero) for no noise reduction.  Values outside of this range will be 
            limited to the edges of the range.
            </note></para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.ImageLightingCorrection">
            <summary>
            Controls the image lighting correction. Enable this to correct for non-uniform lighting conditions.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.Brightness">
            <summary>
            Lightens or darkens the image. Range is -100 to 100, where -100 is darkest and 100 is lightest.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.ColorMode">
            <summary>
            Sets the color mode. When set to None, gets the default either color image or grayscale image. When set to Monochrome, 
            image content is black and white. This is commonly used for 
            images containing text. Use <see cref="P:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThreshold"/> to set relative levels 
            of brightness or darkness of the image.
            </summary>
            <remarks>
            <para>
            Black and white are commonly used for images containing text. The resulting image will be clearer and use less memory.
            Use ColorModeValue parameters to adjust the binarisation threshold.  Normally used for pictures of text.
            </para>
            <para><note>
            Monochrome choices only really work with TIFF.  Monochrome_Enhanced_TIFF_Quality causes an algorithm that doubles the file size
            but generally produces a higher quality image. 
            </note></para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThreshold">
            <summary>
            Sets the relative level at which grayscale pixels are converted to black or white when 
            <see cref="P:Intermec.DataCollection.ImageConditioning.ColorMode"/> is set to Monochrome.
            </summary>
            <remarks>
            Only applies to TIFF, determines threshold of conversion VeryDark means light gray is converted to black.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.OutputCompression">
            <summary>
            Sets the output file type of the document capture image.
            </summary>
            <remarks>
            JPEG compression is efficient on grayscale pictures, and uses the <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompressionQuality"/> 
            setting for the output quality if JPEG is selected.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.OutputCompressionQuality">
            <summary>
            Controls the JPEG compression level for the captured image, expressed as a percentage with 
            a range of 0 to 100, where 100 is highest quality and largest file size.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.ColorConversion">
            <summary>
            Convert a color image to grayscale image if color image 
            is supported by image source.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.ImageConditioning.CurrentImageConditioningVersion">
            <exclude /> 
            <summary>
            Returns image conditioning version.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning.ContrastEnhancementValue">
            <summary>
             An enum data type for the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ContrastEnhancementValue.None">
            <summary>Disable contrast enhancement.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ContrastEnhancementValue.Photo">
            <summary>Sets brightness and contrast to photo levels</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ContrastEnhancementValue.Black_text_on_white_background">
            <summary>Black text on white background</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ContrastEnhancementValue.White_text_on_black_background">
            <summary>White text on black background</summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning.TextEnhancementValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.ImageConditioning.TextEnhancement"/> property. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.TextEnhancementValue.None">
            <summary>Disables Text Enhancement.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.TextEnhancementValue.Low">
            <summary>Sets low level.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.TextEnhancementValue.Medium">
            <summary>Sets medium level.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.TextEnhancementValue.High">
            <summary>Sets high level.</summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning.ImageRotationValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.ImageConditioning.ImageRotation"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ImageRotationValue.None">
            <summary>Disables image rotation.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ImageRotationValue.Degrees_90">
            <summary>Rotates image counterclockwise 90 degrees.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ImageRotationValue.Degrees_180">
            <summary>Rotates image counterclockwise 180 degrees.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ImageRotationValue.Degrees_270">
            <summary>Rotates image counterclockwise 270 degrees.</summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning.SubsamplingValue">
            <summary>
            An enum data type for the Subsampling property.
            </summary>		
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.SubsamplingValue.None">
            <summary>Full content no subsampling </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.SubsamplingValue.OneOfTwo">
            <summary>Returns image of every 2x2 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.SubsamplingValue.OneOfThree">
            <summary>Returns image of one pixel for every 3x3 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.SubsamplingValue.OneOfFour">
            <summary>Returns image of one pixel for every 4x4 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.SubsamplingValue.OneOfFive">
            <summary>Returns image of one pixel for every 5x5 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.SubsamplingValue.OneOfSix">
            <summary>Returns image of one pixel for every 6x6 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.SubsamplingValue.OneOfSeven">
            <summary>Returns image of one pixel for every 7x7 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.SubsamplingValue.OneOfEight">
            <summary>Returns image of one pixel for every 8x8 square of pixels </summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning.ImageLightingCorrectionValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.ImageConditioning.ImageLightingCorrection"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ImageLightingCorrectionValue.None">
            <summary>
            Disables image lighting correction
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ImageLightingCorrectionValue.Enabled">
            <summary>
            Enables image lighting correction
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning.ColorModeValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.ImageConditioning.ColorMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorModeValue.None">
            <summary>Default image. Gray scale or Color with BMP or JPEG files.</summary>	
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorModeValue.Monochrome_Normal">
            <summary>Black and white, 1 bit/pixel use with TIFF files.</summary>	
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorModeValue.Monochrome_Enhanced_TIFF_Quality">
            <summary>Black and white, 1 bit/pixel use with TIFF files, but interpolated to appear 
            to have twice the pixel density.
            </summary>	
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThresholdValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThreshold"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThresholdValue.VeryDark">
            <summary>
            Only the lightest pixels are converted to white. Results in a generally darker image.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThresholdValue.Dark">
            <summary>Sets dark</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThresholdValue.Normal">
            <summary>Sets normal</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThresholdValue.Bright">
            <summary>Sets bright</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorModeBrightnessThresholdValue.VeryBright">
            <summary>
            Only the darkest pixels are converted to black. Results in a generally lighter image.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning.OutputCompressionValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.ImageConditioning.OutputCompression"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.OutputCompressionValue.Bitmap">
            <summary>Sets output file type to bitmap.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.OutputCompressionValue.Jpeg">
            <summary>Sets output file type to jpeg.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.OutputCompressionValue.TIFF">
            <summary>Sets output file type to tiff.</summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioning.ColorConversionValue">
            <summary>
            Convert the color image to grayscale image if it is supported. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorConversionValue.NoColorConversion">
            <summary>No Color conversion.</summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioning.ColorConversionValue.Grayscale">
            <summary>Convert the color image to grayscale.</summary>
        </member>
        <member name="T:Intermec.DataCollection.ImageConditioningException">
            <summary>
            This class the the exception thrown by image conditioning properties. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImageConditioningException.hResult">
            <summary>
            Error value
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.ImageConditioningException.#ctor(System.Int32,System.String)">
            <summary>
            Stores error information. 
            </summary>
            <param name="inputResult">Error value of the error</param>
            <param name="Message">String describing the error</param>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReaderException">
            <summary>
            This class is the exception thrown by the <see cref="T:Intermec.DataCollection.BarcodeReader"/> class.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReaderException.hResult">
            <summary>Error value of the error.</summary>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReaderException.#ctor(System.Int32,System.String)">
            <summary>Stores error information.</summary>
            <param name="hResult">Error value.</param>
            <param name="Message">String describing the error.</param>
            <example>
            <b><i>Common Exceptions</i></b>
                        <list type="table">
                        <listheader>
                        <term>hResult</term>
                        <description>Message</description>
                        <description>Solution</description>
                        </listheader>
                        <item>
                        <term>-1051852800</term>
                        <description>Invalid scanner name.</description>
                        <description>Make sure you are using correct scanner name string in BarcodeReader constructor.</description>
                        </item>
                        <item>
                        <term>-1051328510</term>
                        <description>Valid DataLED not present.</description>
                        <description>The computer does not have a Data LED.</description>
                        </item>
                        </list>        
                        <para>This example uses BarcodeReaderException.</para>
                        <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    try
                                    {
                                        bcr = new BarcodeReader();                
                                    }
                                    catch (BarcodeReaderException exp)
                                    {
                                        MessageBox.Show(exp.Message);
                                    }          
                                }       
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New BarcodeReader()
                                Catch exp As BarcodeReaderException
                                    MessageBox.Show(ex.Message)
                                End Try
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions">
            <summary>
            Use this class to set preamble, postamble, global symblogy ID, and multicode for bar code symbologies. 
            </summary> 
            <remarks>  
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded 
            operations. Instance members are not guaranteed to be thread safe and each instance should 
            be used only within a single thread.
            </para>
            <para>To use the SymbologyOptions class, the bcSymbologyMapping.xml file must be in the Windows 
            directory of the Intermec computer.
            </para> 
            <para>This Resource Kit includes bcSymbologyMapping.xml. The file is located in the Data 
            Collection Resource Kit\Runtime directory.
            </para>
            <para>
            The Multicode requires itcscan.dll and bcSymbologyMapping.xml with version 4.02.00.1585 or higher. 
            The Multicode options must supported in Intermec Settings.
            </para>
            <note>For more information on symbology attributes and how they apply to your Intermec 
            computer, see the Intermec Computer Command Reference Manual (P/N 073528).
            </note>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.Barcode1">
            <summary> An object for bar code 1 when Multicode is enabled. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.Barcode2">
            <summary> An object for bar code 2 when Multicode is enabled. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.Barcode3">
            <summary> An object for bar code 3 when Multicode is enabled. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.Barcode4">
            <summary> An object for bar code 4 when Multicode is enabled. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.Barcode5">
            <summary> An object for bar code 5 when Multicode is enabled. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.Barcode6">
            <summary> An object for bar code 6 when Multicode is enabled. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.Barcode7">
            <summary> An object for bar code 7 when Multicode is enabled. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.Barcode8">
            <summary> An object for bar code 8 when Multicode is enabled. </summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.#ctor">
            <summary> Creates an instance of the SymbologyOptions class using the default scanner </summary>
            <remarks>
            For the CV41 and CV61 computers, this constructor connects a tethered scanner to COM1.        
            </remarks>
            <example>
            This example creates a instance of SymbologyOptions class.
            <code>
            using Intermec.DataCollection;
            namespace SymbologyOptions_ce
            {
                public partial class frmSymbologyOptions : Form
                {
                    private Intermec.DataCollection.SymbologyOptions symbOption;
                     public frmSymbologyOptions()
                     {
                        InitializeComponent();
                        symbOption = new SymbologyOptions();
                    }       
               }
            }
            </code>
            <code lang="VB.NET">
            Imports Intermec.DataCollection
            Public Class Form1
                Private symbOptions As Intermec.DataCollection.SymbologyOptions
                Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                     symbOptions = New Intermec.DataCollection.SymbologyOptions()
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.#ctor(System.String)">
            <summary>
            <para>Creates an instance of the SymbologyOptions class using a specified scanner. </para>
            <para><b>Note: </b>Multiple simultaneous instances of this class are not supported.</para>
            </summary>       
            <param name="scannerName">Use "default" for the default scanner,  
            "ExtScanner" for a tethered scanner, "BTScanners" for bluetooth scanners</param>        
            <remarks>
            <list type="bullet">
            <item>For the CV41 and CV61, specify "default" for scanners connected to COM1, and specify "ExtScanner" for scanners connected to COM2.</item>
            <item>For the CV60 and CV30, use "ExtScanner_1" if you are connecting 
            the scanner to COM1. Otherwise, ExtScanner assumes the scanner is connected
            to COM2 on the CV60, or COM3 on CV30.</item>  
            </list>     
            </remarks>  
            <example>
            This example creates a instance of SymbologyOptions class.
            <code>
            using Intermec.DataCollection;
            namespace SymbologyOptions_ce
            {
                public partial class frmSymbologyOptions : Form
                {
                    private Intermec.DataCollection.SymbologyOptions symbOption;
                     public frmSymbologyOptions()
                     {
                        InitializeComponent();
                        symbOption = new SymbologyOptions("default");
                    }      
                }
            }
            </code>
            <code lang="VB.NET">
            Imports Intermec.DataCollection
            Public Class Form1
                Private symbOptions As Intermec.DataCollection.SymbologyOptions
                Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                     symbOptions = New Intermec.DataCollection.SymbologyOptions("default")
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)">
            <summary> Enable/Disable using SymbologyOptionException for sets/gets properties. </summary>
            <param name="bVal">True for throw the SymbologyOptionException when a invalid value occur with set/get properties.</param>
            <remarks>
            See <see cref="M:Intermec.DataCollection.SymbologyOptionsException.#ctor(System.Int32,System.String)"/> constructor for common exceptions.
            </remarks>
            <example>
                        This example enables the SymbologyOptionException. 
                        <code>
                            public frmSymbologyOptions()
                            {
                                try
                                {
                                    InitializeComponent();
                                    symbOption = new SymbologyOptions();
                                    symbOption.EnableSymbologyOptionsExceptions(true);
                                    symbOption.Preamble = "Martin";
                                }
                                catch (SymbologyOptionsException exp)
                                {
                                    MessageBox.Show(exp.Message);
                                }           
                            }
                        </code>
                        <code lang="VB.NET">
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    symbOptions = New Intermec.DataCollection.SymbologyOptions()
                                    symbOptions.EnableSymbologyOptionsExceptions(True)
                                    symbOptions.Preamble = "Martin"
                                Catch exp As SymbologyOptionsException
                                    MessageBox.Show(exp.Message)
                                End Try
                            End Sub         
                        </code>
                        </example>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.EnableDataMapperLog(System.Boolean)">
            <exclude /> 
            <summary> 
            Enable or disable generate a data log file for setting/getting property values. 
            When enabled, a SDKDataMapperLog.xml file is generated in root directory of device. 
            </summary>
            <param name="bVal">True, for generate a log file. False, for not generate a log file.</param>
            <example>
            This example enables the SDKDataMapperLog.xml file with preamble setting. 
            <code>
            symbOption.EnableDataMapperLog(true);
            symbOption.Preamble = "Martin";
            </code>
            <code lang="VB.NET">
            symbOptions.EnableDataMapperLog(True)
            symbOptions.Preamble = "Martin"
            </code>
            The SDKDataMapperLog.xmL is generated in root directory of device. It looks like:
            <code lang="XML">
            &lt;?xml version="1.0" ?> 
            &lt;SetCfgEventLog>
                &lt;Event Call="FormatSetXML">
                    &lt;Subsystem Name="Data Collection">
                        &lt;Group Name="Scanners" Instance="1">
                            &lt;Group Name="Symbology Options">
                                &lt;Field Name="Preamble">Martin&lt;/Field> 
                            &lt;/Group>
                        &lt;/Group>
                    &lt;/Subsystem>
                &lt;/Event>
                &lt;Event Call="SetValueXMLReturned">
                    &lt;Subsystem Name="Data Collection">
                        &lt;Group Name="Scanners" Instance="1">
                            &lt;Group Name="Symbology Options">
                                &lt;Field Name="Preamble">Martin&lt;/Field> 
                            &lt;/Group>
                        &lt;/Group>
                    &lt;/Subsystem>
                &lt;/Event>
                &lt;Event Call="dataMapper::~dataMapper() - destruction" /> 
            &lt;/SetCfgEventLog>
            </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.Dispose">
            <summary> Releases all resources for the instance of SymbologyOptions class.</summary>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.scannerPort">
            <exclude /> 
            <summary> Scanner port name </summary>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.Preamble">
            <summary> Sets or gets the character string (up to 20 characters) that is 
            pre_pended to scanned data. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>        
            <example> 
            <para>If the preamble string is set to "Martin", 
            then a data string such as "305481" is returned as "Martin305481."  
            </para> 
            <para>
            Following example sets and gets preamble. The symbOption is a instance of SymbologyOptions class.
            </para>
            <code>
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOption.Preamble = "Martin";
                            string MyPreamble = this.symbOption.Preamble.ToString();
                        }    
                        </code>
                        <code lang="VB.NET">
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOptions.Preamble = "Martin"
                            Dim myPreamble As String = symbOptions.Preamble.ToString()
                        }      
                        </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.Postamble">
            <summary> 
            Sets or gets the character string (up to 20 characters)
            that is appended to scanned data.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example>
            <para>If the postamble is set to "PartNumber", then a data string 
            such as "305481" is returned as "305481PartNumber".
            </para>
            <para>
            Following example sets and gets postamble. The symbOption is a instance of SymbologyOptions class.
            </para>
            <code>
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOption.Postamble = "PartNumber";
                            string MyPostamble = this.symbOption.Postamble.ToString();
                        }         
                        </code>
                        <code lang="VB.NET">
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOptions.Postamble = "PartNumber"
                            Dim MyPostamble As String = symbOptions.Postamble.ToString()
                        }         
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.globalSymbologyID">
            <summary> Sets/Gets the option for the symbology ID to be used. </summary>
            <remarks>
            The Code Mark supported on CN70, CK70, and CK71.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>     
            <example> This example sets and gets global Symbology ID.
            <code>
                        public frmSymbologyOptions()
                        {
                           InitializeComponent();
                           symbOptions = new SymbologyOptions();
                           symbOptions.globalSymbologyID = SymbologyOptions.EGlobalSymbologyID.User_defined;
                           string globalID = symbOptions.globalSymbologyID.ToString();
                        }         
                        </code>
                        <code lang="VB.NET">
                        public frmSymbologyOptions()
                        {
                           InitializeComponent();
                           symbOptions = new SymbologyOptions();
                           symbOptions.globalSymbologyID = SymbologyOptions.EGlobalSymbologyID.User_defined
                           Dim globalID As String = Me.symbOptions.globalSymbologyID.ToString()
                        }         
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.EnableMulticode">
            <summary> Sets and gets the multicode activation status. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example enables multicode and retrieves setting.
            <code>
                        private Intermec.DataCollection.SymbologyOptions symbOptions;
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOptions.EnableMulticode = SymbologyOptions.EnableMulticodeType.Enable;
                            string status = symbOptions.EnableMulticode.ToString();
                        }
                        </code>        
                        <code lang="VB.NET">
                        Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            symbOptions = New SymbologyOptions()
                            symbOptions.EnableMulticode = SymbologyOptions.EnableMulticodeType.Enable
                            Dim status As String = Me.symbOptions.EnableMulticode.ToString()
                        End Sub
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.NumberOfBarcodes">
            <summary> Sets and gets the number of bar codes in a multicode.  
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets number of barcodes and retrieves the setting. 
            <code>
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOptions.NumberOfBarcodes = 2;
                            int num = symbOptions.NumberOfBarcodes;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            symbOptions = New SymbologyOptions()
                            symbOptions.NumberOfBarcodes = 2
                            Dim num As Integer = Me.symbOptions.NumberOfBarcodes
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.BarcodeSeparator">
            <summary> Sets and gets the character string (up to 4 characters)used as a 
            separator between each bar code if Multicode is enabled.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets bar code separator and retrieves the setting. 
            <code>
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOptions.BarcodeSeparator = "*";
                            string Separator = symbOptions.BarcodeSeparator;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            symbOptions = New SymbologyOptions()
                            symbOptions.BarcodeSeparator = "*"
                            Dim Separator As String = Me.symbOptions.BarcodeSeparator
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CompleteMulticode">
            <summary>
            Sets and gets a user-defined symbology identifier (UDSI) of 0 to 4 
            characters for a complete multicode. The UDSI is transmitted as 
            "[UDSI symbology id] &lt;data&gt;"
            </summary>
            <remarks>If there is no characters for Complete Multicode and 
            the symbology identifier transmission is active, no symbology
            identifier will be sent for this symbology only.</remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets complete multicode of a user defined symbology identifier (UDSI)
            and retrieves the setting. 
            <code>
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOptions.CompleteMulticode = "UDM0";
                            string complete = symbOptions.CompleteMulticode;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            symbOptions = New SymbologyOptions()
                            symbOptions.CompleteMulticode = "UDM0"
                            Dim complete As String = Me.symbOptions.CompleteMulticode
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.IncompleteMulticode">
            <summary>
            Sets and gets a user-defined symbology identifier (UDSI) of 0 to 4 
            characters for an incomplete multicode. The UDSI is transmitted
            as "[UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>If there is no characters for Incomplete Multicode UDSI and
            symbology identifier transmission is active, no symbology identifier
            will be sent for this symbology only.</remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets incomplete multicode of a user defined symbology identifier (UDSI)
            and retrieves the setting. 
            <code>
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOptions.IncompleteMulticode = "UDM1";
                            string incomplete = symbOptions.IncompleteMulticode;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            symbOptions = New SymbologyOptions()
                            symbOptions.IncompleteMulticode = "UDM1"
                            Dim incomplete As String = Me.symbOptions.IncompleteMulticode
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.IncompleteTransmission">
            <summary>
            Sets and gets incomplete transmission status. When enabled, 
            the UDSI for an incomplete multicode is transmitted after a timeout.
            </summary>
            <remarks>If using symbology identifiers (code mark or UDSI),
            the identifier is different for an incomplete transmission
            than for a complete.</remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example enables incomplete multicode transmission and retrieves the setting. 
            <code>
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOptions.IncompleteTransmission = SymbologyOptions.IncompleteTransmissionType.Enable;
                            string status = symbOptions.IncompleteTransmission.ToString();
                        }
                        </code>
                        <code lang="VB.NET">
                        Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            symbOptions = New SymbologyOptions()
                            symbOptions.IncompleteTransmission = SymbologyOptions.IncompleteTransmissionType.Enable
                            Dim status As String = Me.symbOptions.IncompleteTransmission.ToString()
                        End Sub
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.IncompleteTransmissionTimeout">
            <summary>
            Sets and gets the incomplete transmission timeout (0 to 65535 milliseconds) when incomplete
            transmission is enabled, the incomplete multicode UDSI is sent after this timeout. 
            The timeout starts after the last bar code is read.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example enables incomplete multicode transmission Timeout to 2 milliseconds and retrieves the setting. 
            <code>
                        public frmSymbologyOptions()
                        {
                            InitializeComponent();
                            symbOptions = new SymbologyOptions();
                            symbOptions.IncompleteTransmissionTimeout = 2;
                            int timeout = symbOptions.IncompleteTransmissionTimeout;
                        }
                        </code>
                        <code lang="VB.NET">
                        Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            symbOptions = New SymbologyOptions()
                            symbOptions.IncompleteTransmissionTimeout = 2
                            Dim timeout As Integer = Me.symbOptions.IncompleteTransmissionTimeout
                        End Sub
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.EGlobalSymbologyID">
            <summary> An enum data type for the globalSymbologyID property </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.EGlobalSymbologyID.Disable">
            <summary> Disables symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.EGlobalSymbologyID.CodeMark">
            <summary>Use code mark </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.EGlobalSymbologyID.AIM_ISO_IEC_standard">
            <summary> AIM ISO/IEC standard for the symbology in use. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.EGlobalSymbologyID.User_defined">
            <summary> String of 1 to 4 characters specifying the symbology ID. </summary>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.EnableMulticodeType">
            <summary> An enum data type for the EnableMulticode property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.EnableMulticodeType.Disable">
            <summary> Read and sent bar code as normal </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.EnableMulticodeType.Enable">
            <summary> Check each bar code to see if it is part of a multicode. 
            If it is not, it will be read and sent as normal</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.EnableMulticodeType.Exclusive">
            <summary> Discard bar code that is not part of multicode. </summary>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.IncompleteTransmissionType">
            <summary> An enum data type for the IncompleteTransmission property.</summary>        
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.IncompleteTransmissionType.Disable">
            <summary> Disable transmission of an incomplete multicode. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.IncompleteTransmissionType.Enable">
            <summary>Enable transmission of an incomplete multicode.
            The Multicode is transmitted when incomplete transmission 
            timeout expires.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.SymbologyType">
            <summary> An enum data type for all symbologies that support multicode. </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.All">
            <summary>Any bar code.</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_13">
            <summary>EAN-13</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_8">
            <summary> EAN-8</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_A">
            <summary> UPC-A</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_E">
            <summary> UPC-E</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_13_Addon_2">
            <summary> EAN-13 with Add-On 2</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_8_Addon_2">
            <summary> EAN-8 with Add-On 2</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_A_Addon_2">
            <summary> UPC-A with Add-On 2</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_E_Addon_2">
            <summary> UPC-E with Add-On 2</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_13_Addon_5">
            <summary> EAN-13 with Add-On 5</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_8_Addon_5">
            <summary> EAN-8 with Add-On 5</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_A_Addon_5">
            <summary> UPC-A with Add-On 5</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_E_Addon_5">
            <summary> UPC-E with Add-On 5</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Code_39">
            <summary> Code 39</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Interleaved_2_of_5">
            <summary> Interleaved 2 of 5</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Standard_2_of_5">
            <summary> Code 2 of 5</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Matrix_2_of_5">
            <summary> Matrix 2 of 5</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Codabar">
            <summary> Codabar </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.MSI">
            <summary> MSI </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Plessey">
            <summary> Plessey </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Code_128">
            <summary> Code 128 </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Code_93">
            <summary> Code 93 </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Code_11">
            <summary> Code 11 </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Telepen">
            <summary> Telepen </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Codablock_A">
            <summary> Codablock A </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Codablock_F">
            <summary> Codablock F </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.PDF417">
            <summary> PDF417 </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_128">
            <summary> GS1-128 </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.ISBT128">
            <summary> ISBT-128 </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Micro_PDF">
            <summary> Micro PDF417 </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_DataBar_Omni_Directional">
            <summary> GS1 DataBar Omni-Directional </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_DataBar_Limited">
            <summary> GS1 DataBar Limited </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_DataBar_Expanded">
            <summary> GS1 DataBar Expanded </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.DataMatrix">
            <summary> DataMatrix </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.QR_Code">
            <summary> QR Code </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Maxicode">
            <summary> Maxicode </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_DataBar_Omni_Dir_Composite_CC_A">
            <summary> GS1 DataBar Omni-Directional Composite (CC-A) </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_DataBar_Limited_Composite_CC_A">
            <summary> GS1 DataBar Limited Composite (CC-A) </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_DataBar_Expanded_Composite_CC_A">
            <summary> GS1 DataBar Expanded Composite (CC-A) </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_Composite_GS1_128_Composite_CC_A">
            <summary> GS1 Composite/GS1-128 Composite (CC-A)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_13_Composite_CC_A">
            <summary> EAN-13 Composite (CC-A)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_8_Composite_CC_A">
            <summary> EAN-8 Composite (CC-A)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_A_Composite_CC_A">
            <summary> UPC-A Composite (CC-A)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_E_Composite_CC_A">
            <summary> UPC-E Composite (CC-A)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_DataBar_Omni_Dir_Composite_CC_B" -->
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_DataBar_Limited_Composite_CC_B">
            <summary> GS1 DataBar Limited Composite (CC-B) </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_DataBar_Expanded_Composite_CC_B">
            <summary> GS1 DataBar Expanded Composite (CC-B) </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_Composite_GS1_128_Composite_CC_B">
            <summary> GS1 Composite/GS1-128 Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_13_Composite_CC_B">
            <summary> EAN-13 Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.EAN_8_Composite_CC_B">
            <summary> EAN-8 Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_A_Composite_CC_B">
            <summary> UPC-A Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.UPC_E_Composite_CC_B">
            <summary> UPC-E Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.GS1_Composite_GS1_128_Composite_CC_C">
            <summary> GS1 Composite/GS1-128 Composite (CC-C)</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.ISBN">
            <summary> ISBN</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Postnet">
            <summary> Postnet</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Planet">
            <summary> Planet</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.BPO">
            <summary> BPO</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Canada_Post">
            <summary> Canada Post</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Australian_Post">
            <summary> Australian Post</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Japan_Post">
            <summary> Japan Post</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Dutch_Post">
            <summary> Dutch Post</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.China_Post">
            <summary> China Post</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Korean_Post">
            <summary> Korean Post</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.TLC39">
            <summary> TLC39</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Trioptic">
            <summary> Trioptic</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.ISMN">
            <summary> ISMN</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.ISSN">
            <summary> ISSN</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Aztec">
            <summary> Aztec</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Sweden_Post">
            <summary> Sweden Post</summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptions.SymbologyType.Infomail">
            <summary> Infomail</summary>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.CBARCODE1">
            <summary> Sets length, mask, and symbology type for the first bar code in a multicode</summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE1.setScannerPort(System.String)">
            <exclude /> 
            <summary> Sets the scanner name of Barcode 1. </summary>
            <param name="scannerPort"> Scanner name that is used for Barcode 1 settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE1.#ctor(System.String)">
            <exclude /> 
            <summary> Sets the scanner name of Barcode 1. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 1 settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE1.Symbology">
            <summary> Sets and gets the symbology type for the first bar code in a multicode symbology. </summary>
            <remarks>
            The bar codes are sent in the order they are defined by the bar code ID. If no bar code
            ID is used and the multicode function is applied to all  bar codes, they will be set in
            the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets barcode 1 symbology and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode1.Symbology = SymbologyOptions.SymbologyType.All;
                                string Barcode1Symbology = symbOptions.Barcode1.Symbology.ToString();
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode1.Symbology = SymbologyOptions.SymbologyType.All
                                Dim Barcode1Symbology As String = Me.symbOptions.Barcode1.Symbology.ToString()
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE1.Length">
            <summary>
            Sets and gets the length of bar code 1 in a multicode symbology. 
            If any length is acceptable, set this property to 0.
            </summary>
            <remarks>
            Range is 0 to 65535.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets bar code length to 25 characters for barcode 1 and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode1.Length = 25;
                                int length = symbOptions.Barcode1.Length;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode1.Length = 25
                                Dim length As Integer = Me.symbOptions.Barcode1.Length
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE1.Mask">
             <summary>
             Sets and gets a mask (up to 26 characters) for the first bar code in a multicode symbology.
             </summary>
             <remarks>           
             The mask is used as a filter to determine which incoming data will be used for first barcode in the multicode.
             No mask is used if there is no character. 
             <list type="bullet">
             <item>* = zero or more character</item>
             <item>? = one character</item>
             <item>\ + wildcard = a backslash plus a special character takes away the wildcard function</item>
             <item>\c = non-numerical value</item>
             <item>\N = numerical value</item>
             </list>
            </remarks>
             <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
             The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
             </exception>   
            <example> 
             <list type="bullet">
             <item>*123* = any code with a consecutive 123.</item>
             <item>???A* = any code with A in the fourth position followed by zero or more characters.</item>
             <item>*1\*3* = any code with a consecutive 1*3 anywhere in the data.</item>
             <item>\C* = any code that starts with a non-numerical value.</item>
             <item>*\N* = any code that contains a numerical value.</item>
             </list>
             <para>
             Following example sets the mask for barcode 1 to *123*. This means any bar code with a 
             consecutive 123 is the first bar code in a multicode. It also retrieves the setting.
             </para>
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode1.Mask = "*123*";
                                string mask = symbOptions.Barcode1.Mask;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode1.Mask = "*123*"
                                Dim mask As String = Me.symbOptions.Barcode1.Mask
                            End Sub
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.CBARCODE2">
            <summary> Sets length, mask, and symbology type for the second bar code in a multicode symbology </summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE2.setScannerPort(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 2. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 2 settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE2.#ctor(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 2. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 2 settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE2.Symbology">
            <summary> Sets and gets the symbology type for the second bar code in a multicode symbology. </summary>
            <remarks>
            The bar codes are sent in the order they are defined by the bar code ID. If no bar code
            ID is used and the multicode function is applied to all  bar codes, they will be set in
            the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets barcode 2 symbology and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode2.Symbology = SymbologyOptions.SymbologyType.All;
                                string Barcode1Symbology = symbOptions.Barcode2.Symbology.ToString();
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode2.Symbology = SymbologyOptions.SymbologyType.All
                                Dim Barcode1Symbology As String = Me.symbOptions.Barcode2.Symbology.ToString()
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE2.Length">
            <summary>
            Sets and gets the length of bar code 2 in a multicode symbology. 
            If any length is acceptable, set this property to 0.
            </summary>
            <remarks>
            Range is 0 to 65535.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets bar code length to 25 characters for barcode 2 and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode2.Length = 25;
                                int length = symbOptions.Barcode2.Length;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode2.Length = 25
                                Dim length As Integer = Me.symbOptions.Barcode2.Length
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE2.Mask">
             <summary>
             Sets and gets a mask (up to 26 characters) for the second bar code in a multicode symbology
             </summary>
             <remarks>             
             The mask is used as a filter to determine which incoming data will be used for second barcode in the multicode.
             No mask is used if there is no character. 
             <list type="bullet">
             <item>* = zero or more character</item>
             <item>? = one character</item>
             <item>\ + wildcard = a backslash plus a special character takes away the wildcard function</item>
             <item>\c = non-numerical value</item>
             <item>\N = numerical value</item>
             </list>
            </remarks>
             <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
             The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
             </exception>   
            <example> 
             <list type="bullet">
             <item>*123* = any code with a consecutive 123.</item>
             <item>???A* = any code with A in the fourth position followed by zero or more characters.</item>
             <item>*1\*3* = any code with a consecutive 1*3 anywhere in the data.</item>
             <item>\C* = any code that starts with a non-numerical value.</item>
             <item>*\N* = any code that contains a numerical value.</item>
             </list>
             <para>
             Following example sets the mask for barcode 2 to *123*. This means any bar code with a 
             consecutive 123 is the second bar code in a multicode. It also retrieves the setting.
             </para>
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode2.Mask = "*123*";
                                string mask = symbOptions.Barcode2.Mask;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode2.Mask = "*123*"
                                Dim mask As String = Me.symbOptions.Barcode2.Mask
                            End Sub
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.CBARCODE3">
            <summary> Sets length, mask, and symbology type for the third bar code in a multicode symbology. </summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE3.setScannerPort(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 3. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 3 settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE3.#ctor(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 3. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 3 settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE3.Symbology">
            <summary> Sets and gets the symbology type for the third bar code in a multicode symbology. </summary>
            <remarks>
            The bar codes are sent in the order they are defined by the bar code ID. If no bar code
            ID is used and the multicode function is applied to all  bar codes, they will be set in
            the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets barcode 3 symbology and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode3.Symbology = SymbologyOptions.SymbologyType.All;
                                string Barcode1Symbology = symbOptions.Barcode3.Symbology.ToString();
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode3.Symbology = SymbologyOptions.SymbologyType.All
                                Dim Barcode1Symbology As String = Me.symbOptions.Barcode3.Symbology.ToString()
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE3.Length">
            <summary>
            Sets and gets the length of bar code 3 in a multicode symbology. 
            If any length is acceptable, set this property to 0.
            </summary>
            <remarks>
            Range is 0 to 65535.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets bar code length to 25 characters for barcode 3 and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode3.Length = 25;
                                int length = symbOptions.Barcode3.Length;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode3.Length = 25
                                Dim length As Integer = Me.symbOptions.Barcode3.Length
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE3.Mask">
             <summary>
             Sets and gets a mask (up to 26 characters) for the first bar code in a multicode symbology.
             </summary>
             <remarks>            
             The mask is used as a filter to determine which incoming data will be used for third barcode in the multicode.
             No mask is used if there is no character. 
             <list type="bullet">
             <item>* = zero or more character</item>
             <item>? = one character</item>
             <item>\ + wildcard = a backslash plus a special character takes away the wildcard function</item>
             <item>\c = non-numerical value</item>
             <item>\N = numerical value</item>
             </list>
            </remarks>
             <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
             The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
             </exception>   
            <example> 
             <list type="bullet">
             <item>*123* = any code with a consecutive 123.</item>
             <item>???A* = any code with A in the fourth position followed by zero or more characters.</item>
             <item>*1\*3* = any code with a consecutive 1*3 anywhere in the data.</item>
             <item>\C* = any code that starts with a non-numerical value.</item>
             <item>*\N* = any code that contains a numerical value.</item>
             </list>
             <para>
             Following example sets the mask for barcode 3 to *123*. This means any bar code with a 
             consecutive 123 is the third bar code in a multicode. It also retrieves the setting.
             </para>
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode3.Mask = "*123*";
                                string mask = symbOptions.Barcode3.Mask;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode3.Mask = "*123*"
                                Dim mask As String = Me.symbOptions.Barcode3.Mask
                            End Sub
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.CBARCODE4">
            <summary> Sets length, mask, and symbology type for the fourth bar code in a multicode symbology. </summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE4.setScannerPort(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 4. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 4 settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE4.#ctor(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 4. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 4 settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE4.Symbology">
            <summary> Sets and gets the symbology type for the fourth bar code in a multicode symbology. </summary>
            <remarks>
            The bar codes are sent in the order they are defined by the bar code ID. If no bar code
            ID is used and the multicode function is applied to all  bar codes, they will be set in
            the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets barcode 4 symbology and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode4.Symbology = SymbologyOptions.SymbologyType.All;
                                string Barcode1Symbology = symbOptions.Barcode4.Symbology.ToString();
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode4.Symbology = SymbologyOptions.SymbologyType.All
                                Dim Barcode1Symbology As String = Me.symbOptions.Barcode4.Symbology.ToString()
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE4.Length">
            <summary>
            Sets and gets the length of bar code 4 in a multicode symbology. 
            If any length is acceptable, set this property to 0.
            </summary>
            <remarks>
            Range is 0 to 65535.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets bar code length to 25 characters for barcode 4 and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode4.Length = 25;
                                int length = symbOptions.Barcode4.Length;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode4.Length = 25
                                Dim length As Integer = Me.symbOptions.Barcode4.Length
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE4.Mask">
             <summary>
             Sets and gets a mask (up to 26 characters) for the fourth bar code in a multicode symbology.
             </summary>
             <remarks>      
             The mask is used as a filter to determine which incoming data will be used for fourth barcode in the multicode.
             No mask is used if there is no character.
             <list type="bullet">
             <item>* = zero or more character</item>
             <item>? = one character</item>
             <item>\ + wildcard = a backslash plus a special character takes away the wildcard function</item>
             <item>\c = non-numerical value</item>
             <item>\N = numerical value</item>
             </list>
            </remarks>
             <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
             The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
             </exception>   
            <example> 
             <list type="bullet">
             <item>*123* = any code with a consecutive 123.</item>
             <item>???A* = any code with A in the fourth position followed by zero or more characters.</item>
             <item>*1\*3* = any code with a consecutive 1*3 anywhere in the data.</item>
             <item>\C* = any code that starts with a non-numerical value.</item>
             <item>*\N* = any code that contains a numerical value.</item>
             </list>
             <para>
             Following example sets the mask for barcode 4 to *123*. This means any bar code with a 
             consecutive 123 is the fourth bar code in a multicode. It also retrieves the setting.
             </para>
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode4.Mask = "*123*";
                                string mask = symbOptions.Barcode4.Mask;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode4.Mask = "*123*"
                                Dim mask As String = Me.symbOptions.Barcode4.Mask
                            End Sub
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.CBARCODE5">
            <summary> Sets length, mask, and symbology type for the fifth bar code in a multicode symbology. </summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE5.setScannerPort(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 5. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 5 settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE5.#ctor(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 5. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 5 settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE5.Symbology">
            <summary> Sets and gets the symbology type for the fifth bar code in a multicode symbology. </summary>
            <remarks>
            The bar codes are sent in the order they are defined by the bar code ID. If no bar code
            ID is used and the multicode function is applied to all  bar codes, they will be set in
            the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets barcode 5 symbology and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode5.Symbology = SymbologyOptions.SymbologyType.All;
                                string Barcode1Symbology = symbOptions.Barcode5.Symbology.ToString();
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender A5 System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode5.Symbology = SymbologyOptions.SymbologyType.All
                                Dim Barcode1Symbology As String = Me.symbOptions.Barcode5.Symbology.ToString()
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE5.Length">
            <summary>
            Sets and gets the length of bar code 5 in a multicode symbology. 
            If any length is acceptable, set this property to 0. 
            </summary>
            <remarks>
            Range is 0 to 65535.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets bar code length to 25 characters for barcode 5 and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode5.Length = 25;
                                int length = symbOptions.Barcode5.Length;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode5.Length = 25
                                Dim length As Integer = Me.symbOptions.Barcode5.Length
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE5.Mask">
             <summary>
             Sets and gets a mask (up to 26 characters) for the fifth bar code in a multicode 
             symbology.
             </summary>
             <remarks>            
             The mask is used as a filter to determine which incoming data will be used for fifth barcode in the multicode.
             No mask is used if there is no character. 
             <list type="bullet">
             <item>* = zero or more character</item>
             <item>? = one character</item>
             <item>\ + wildcard = a backslash plus a special character takes away the wildcard function</item>
             <item>\c = non-numerical value</item>
             <item>\N = numerical value</item>
             </list>
            </remarks>
             <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
             The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
             </exception>   
            <example> 
             <list type="bullet">
             <item>*123* = any code with a consecutive 123.</item>
             <item>???A* = any code with A in the fourth position followed by zero or more characters.</item>
             <item>*1\*3* = any code with a consecutive 1*3 anywhere in the data.</item>
             <item>\C* = any code that starts with a non-numerical value.</item>
             <item>*\N* = any code that contains a numerical value.</item>
             </list>
             <para>
             Following example sets the mask for barcode 5 to *123*. This means any bar code with a 
             consecutive 123 is the fifth bar code in a multicode. It also retrieves the setting.
             </para>
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode5.Mask = "*123*";
                                string mask = symbOptions.Barcode5.Mask;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode5.Mask = "*123*"
                                Dim mask As String = Me.symbOptions.Barcode5.Mask
                            End Sub
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.CBARCODE6">
            <summary> Sets length, mask, and symbology type for the sixth bar code in a multicode symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE6.setScannerPort(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 6. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 6 settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE6.#ctor(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 6. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 6 settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE6.Symbology">
            <summary> Sets and gets the symbology type for the sixth bar code in a multicode symbology. </summary>
            <remarks>
            The bar codes are sent in the order they are defined by the bar code ID. If no bar code
            ID is used and the multicode function is applied to all  bar codes, they will be set in
            the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets barcode 6 symbology and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode6.Symbology = SymbologyOptions.SymbologyType.All;
                                string Barcode1Symbology = symbOptions.Barcode6.Symbology.ToString();
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender A5 System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode6.Symbology = SymbologyOptions.SymbologyType.All
                                Dim Barcode1Symbology As String = Me.symbOptions.Barcode6.Symbology.ToString()
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE6.Length">
            <summary>
            Sets and gets the length of bar code 6 in a multicode symbology. 
            If any length is acceptable, set this property to 0.
            </summary>
            <remarks>
            Range is 0 to 65535.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets bar code length to 25 characters for barcode 6 and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode6.Length = 25;
                                int length = symbOptions.Barcode6.Length;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode6.Length = 25
                                Dim length As Integer = Me.symbOptions.Barcode6.Length
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE6.Mask">
             <summary>
             Sets and gets a mask (up to 26 characters) for the sixth bar code in a multicode symbology.
             </summary>
             <remarks>            
             The mask is used as a filter to determine which incoming data will be used for sixth barcode in the multicode.
             No mask is used if there is no character. 
             <list type="bullet">
             <item>* = zero or more character</item>
             <item>? = one character</item>
             <item>\ + wildcard = a backslash plus a special character takes away the wildcard function</item>
             <item>\c = non-numerical value</item>
             <item>\N = numerical value</item>
             </list>
            </remarks>
             <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
             The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
             </exception>   
            <example> 
             <list type="bullet">
             <item>*123* = any code with a consecutive 123.</item>
             <item>???A* = any code with A in the fourth position followed by zero or more characters.</item>
             <item>*1\*3* = any code with a consecutive 1*3 anywhere in the data.</item>
             <item>\C* = any code that starts with a non-numerical value.</item>
             <item>*\N* = any code that contains a numerical value.</item>
             </list>
             <para>
             Following example sets the mask for barcode 6 to *123*. This means any bar code with a 
             consecutive 123 is the sixth bar code in a multicode. It also retrieves the setting.
             </para>
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode6.Mask = "*123*";
                                string mask = symbOptions.Barcode6.Mask;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode6.Mask = "*123*"
                                Dim mask As String = Me.symbOptions.Barcode6.Mask
                            End Sub
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.CBARCODE7">
            <summary> Sets length, mask, and symbology type for the seventh bar code in a multicode symbology. </summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE7.setScannerPort(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 7. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 7 settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE7.#ctor(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 7. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 7 settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE7.Symbology">
            <summary> Sets and gets the symbology type for the seventh bar code in a multicode symbology. </summary>
            <remarks>
            The bar codes are sent in the order they are defined by the bar code ID. If no bar code
            ID is used and the multicode function is applied to all  bar codes, they will be set in
            the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets barcode 7 symbology and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode7.Symbology = SymbologyOptions.SymbologyType.All;
                                string Barcode1Symbology = symbOptions.Barcode7.Symbology.ToString();
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender A5 System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode7.Symbology = SymbologyOptions.SymbologyType.All
                                Dim Barcode1Symbology As String = Me.symbOptions.Barcode7.Symbology.ToString()
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE7.Length">
            <summary>
            Sets and gets the length of bar code 7 in a multicode symbology. 
            If any length is acceptable, set this property to 0. 
            </summary>
            <remarks>
            Range is 0 to 65535.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets bar code length to 25 characters for barcode 3 and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode7.Length = 25;
                                int length = symbOptions.Barcode7.Length;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode7.Length = 25
                                Dim length As Integer = Me.symbOptions.Barcode7.Length
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE7.Mask">
             <summary>
             Sets and gets a mask (up to 26 characters) for the seventh bar code in a 
             multicode symbology.
             </summary>
             <remarks>            
             The mask is used as a filter to determine which incoming data will be used for seventh barcode in the multicode.
             No mask is used if there is no character. 
             <list type="bullet">
             <item>* = zero or more character</item>
             <item>? = one character</item>
             <item>\ + wildcard = a backslash plus a special character takes away the wildcard function</item>
             <item>\c = non-numerical value</item>
             <item>\N = numerical value</item>
             </list>
            </remarks>
             <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
             The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
             </exception>   
            <example> 
             <list type="bullet">
             <item>*123* = any code with a consecutive 123.</item>
             <item>???A* = any code with A in the fourth position followed by zero or more characters.</item>
             <item>*1\*3* = any code with a consecutive 1*3 anywhere in the data.</item>
             <item>\C* = any code that starts with a non-numerical value.</item>
             <item>*\N* = any code that contains a numerical value.</item>
             </list>
             <para>
             Following example sets the mask for barcode 7 to *123*. This means any bar code with a 
             consecutive 123 is the seventh bar code in a multicode. It also retrieves the setting.
             </para>
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode7.Mask = "*123*";
                                string mask = symbOptions.Barcode7.Mask;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode7.Mask = "*123*"
                                Dim mask As String = Me.symbOptions.Barcode7.Mask
                            End Sub
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptions.CBARCODE8">
            <summary> Sets length, mask, and symbology type for the eighth bar code in a multicode symbology. </summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE8.setScannerPort(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 8. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 8 settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptions.CBARCODE8.#ctor(System.String)">
            <exclude />
            <summary> Sets the scanner name of Barcode 8. </summary>
            <param name="scannerPort">Scanner name that is used for Barcode 8 settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE8.Symbology">
            <summary> Sets and gets the symbology type for the eighth bar code in a multicode symbology. </summary>
            <remarks>
            The bar codes are sent in the order they are defined by the bar code ID. If no bar code
            ID is used and the multicode function is applied to all  bar codes, they will be set in
            the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets barcode 8 symbology and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode8.Symbology = SymbologyOptions.SymbologyType.All;
                                string Barcode1Symbology = symbOptions.Barcode8.Symbology.ToString();
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender A5 System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode8.Symbology = SymbologyOptions.SymbologyType.All
                                Dim Barcode1Symbology As String = Me.symbOptions.Barcode8.Symbology.ToString()
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE8.Length">
            <summary>
            Sets and gets the length of bar code 8 in a multicode symbology. 
            If any length is acceptable, set this property to 0. 
            </summary>
            <remarks>
            Range is 0 to 65535.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </exception>   
            <example> 
            This example sets bar code length to 25 characters for barcode 8 and retrieves the setting. 
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode8.Length = 25;
                                int length = symbOptions.Barcode8.Length;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode8.Length = 25
                                Dim length As Integer = Me.symbOptions.Barcode8.Length
                            End Sub
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.SymbologyOptions.CBARCODE8.Mask">
             <summary>
             Sets and gets a mask (up to 26 characters) for the eighth bar code in a multicode symbology.
             </summary>
             <remarks>            
             The mask is used as a filter to determine which incoming data will be used for eighth barcode in the multicode.
             No mask is used if there is no character. 
             <list type="bullet">
             <item>* = zero or more character</item>
             <item>? = one character</item>
             <item>\ + wildcard = a backslash plus a special character takes away the wildcard function</item>
             <item>\c = non-numerical value</item>
             <item>\N = numerical value</item>
             </list>
            </remarks>
             <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
             The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
             </exception>   
            <example> 
             <list type="bullet">
             <item>*123* = any code with a consecutive 123.</item>
             <item>???A* = any code with A in the fourth position followed by zero or more characters.</item>
             <item>*1\*3* = any code with a consecutive 1*3 anywhere in the data.</item>
             <item>\C* = any code that starts with a non-numerical value.</item>
             <item>*\N* = any code that contains a numerical value.</item>
             </list>
             <para>
             Following example sets the mask for barcode 8 to *123*. This means any bar code with a 
             consecutive 123 is the eighth bar code in a multicode. It also retrieves the setting.
             </para>
            <code>
                            public frmSymbologyOptions()
                            {
                                InitializeComponent();
                                symbOptions = new SymbologyOptions();
                                symbOptions.Barcode8.Mask = "*123*";
                                string mask = symbOptions.Barcode8.Mask;
                            }
                            </code>
                            <code lang="VB.NET">
                            Private Sub frmSymbologyOption_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symbOptions = New SymbologyOptions()
                                symbOptions.Barcode8.Mask = "*123*"
                                Dim mask As String = Me.symbOptions.Barcode8.Mask
                            End Sub
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.SymbologyOptionsException">
            <summary>This class is the exception thrown by the <see cref="T:Intermec.DataCollection.SymbologyOptions"/> class
            when <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyOptionsException.hResult">
            <summary>Error value of the error.</summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyOptionsException.#ctor(System.Int32,System.String)">
            <summary>
            Passing the error value and message for symbology options exceptions.
            </summary>
            <param name="hResult">Error value of the error</param>
            <param name="Message">String describing the error</param>
            <remarks>
            The <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> must set 
            to true in order to use SymbologyOptionsException.
            </remarks>
            <example>
            <list type="table">
            <listheader>
            <term>hResult</term>
            <description>Message</description>
            <description>Solution</description>
            </listheader>
            <item>
            <term>-1</term>
            <description>Exception setting/getting symbology option.</description>
            <description>Make sure the bcSymbologyMapping.xml file is in the Windows directory on the Intermec computer.</description>
            </item>
            <item>
            <term>-9</term>
            <description>Exception, allow max 20 characters.</description>
            <description>Make sure the input value is no more than 20 ASCII characters in length.</description>
            </item>
            <item>
            <term>-20</term>
            <description>Exception, invalid input value.</description>
            <description>Make sure the input value is correct.</description>
            </item>
            </list>   
            <para>
            This example enables the SymbologyOptionException.
            </para>
            <code>
                        public frmSymbologyOptions()
                        {
                            try
                            {
                                InitializeComponent();
                                symbOption = new SymbologyOptions();
                                symbOption.EnableSymbologyOptionsExceptions(true);
                                symbOption.Preamble = "Martin";
                            }
                            catch (SymbologyOptionsException exp)
                            {
                                MessageBox.Show(exp.Message);
                            }           
                        }
                        </code>
                        <code lang="VB.NET">
                        Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            Try
                                symbOptions = New Intermec.DataCollection.SymbologyOptions()
                                symbOptions.EnableSymbologyOptionsExceptions(True)
                                symbOptions.Preamble = "Martin"
                            Catch exp As SymbologyOptionsException
                                MessageBox.Show(exp.Message)
                            End Try
                        End Sub
                        </code>
            </example>       
        </member>
        <member name="T:Intermec.DataCollection.SymbologyException">
            <summary>
            This class is the exception thrown by the <see cref="T:Intermec.DataCollection.CSymbology"/> class 
            when <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.SymbologyException.hResult">
            <summary>Error value.</summary>
        </member>
        <member name="M:Intermec.DataCollection.SymbologyException.#ctor(System.Int32,System.String)">
             <summary>
             Passing the error value and message for symbology exceptions.
             </summary>
             <param name="hResult">Error value of the error</param>
             <param name="Message">String describing the error</param>
             <example>
             <b><i>Common Exceptions </i></b>
             <list type="table">
             <listheader>
             <term>hResult</term>
             <description>Message</description>
             <description>Solution</description>
             </listheader>
             <item>
             <term>-1</term>
             <description>Exception setting/getting symbology option.</description>
             <description>Make sure the bcSymbologyMapping.xml file is in the Windows directory on the Intermec computer.</description>
             </item>
             <item>
             <term>-10</term>
             <description>Exception, allow max 4 ASCII characters.</description>
             <description>Make sure the input value is no more than 4 ASCII characters in length.</description>
             </item>
             <item>
             <term>-12</term>
             <description>Exception, allow value 0 - 255.</description>
             <description>Make sure the input value is between 0 to 255.</description>
             </item>
             <item>
             <term>-14</term>
             <description>Exception, allow value 0 - 64.</description>
             <description>Make sure the input value is between 0 to 64.</description>
             </item>
             <item>
             <term>-20</term>
             <description>Exception, invalid input value.</description>
             <description>Make sure the input value is correct.</description>
             </item>
             </list>       
             </example>
            <remarks>
             The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> must set to true in 
             order to use SymbologyException.
            </remarks>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology">
            <summary> Use Intermec.DataCollection.CSymbology to set decoding and attribute options 
            for bar code symbologies. 
            </summary>	
            <remarks>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded
            operations. Instance members are not guaranteed to be thread safe and each instance should 
            be used only within a single thread.
            </para>
            To use the CSymbology class, the bcSymbologyMapping.xml file must be in the Windows 
            directory of the Intermec computer.
            <para>This Resource Kit includes bcSymbologyMapping.xml in the 
            Data Collection Resource Kit\Runtime dirctory.
            </para>
            <note>
            For more information on symbology attributes and how they apply to your Intermec 
            computer, see the Intermec Computer Command Reference Manual.  
            </note>  
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Code39">
            <summary>Object for Code39 symbolgy settings. </summary>		      
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.UPCEan">
            <exclude />
            <summary>It is deprecated. Replaced by EanUPC</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.EanUPC">
            <summary>Object for Ean/UPC symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Code128">
            <summary>Object for Code128 symbolgoy settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Interleaved2Of5">
            <summary>Object for Interleaved 2 Of 5 symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Code93">
            <summary>Object for Code93 symbolgoy settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Codabar">
            <summary>Object for Codabar symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Code2Of5">
            <summary>Object for Code 2 Of 5 symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Msi">
            <summary>Object for MSI symbolgoy settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Plessey">
            <summary>Object for Plessey symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Code11">
            <summary>Object for Code11 symbolgoy settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Matrix2Of5">
            <summary>Object for Matrix 2 Of 5 symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Telepen">
            <summary>Object for Telepen symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Pdf417">
            <summary>Object for PDF417 symbolgoy settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.MicroPDF417">
            <summary>Object for MicroPDF417 symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Maxicode">
            <summary>Object for Maxicode symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Datamatrix">
            <summary>Object for Datamatrix symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.QrCode">
            <summary>Object for QRCode symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Rss14">
            <exclude /> 
            <summary>It is deprecated. Replaced by GS1DataBarOmniDirectional</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.GS1DataBarOmniDirectional">
            <summary>Object for GS1 DataBar OmniDirectional symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.RssLimited">
            <exclude /> 
            <summary>It is deprecated. Replaced by GS1DataBarLimited</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.GS1DataBarLimited">
            <summary>Object for GS1 DataBar Limited symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.RssExpanded">
            <exclude /> 
            <summary>It is deprecated. Replaced by GS1DataBarExpanded</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.GS1DataBarExpanded">
            <summary>Object for GS1 DataBar Expanded symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CodablockA">
            <summary>Object for Codablock A symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CodablockF">
            <summary>Object for Codablock F symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.UccComposite">
            <exclude /> 
            <summary>It is deprecated. Replaced by GS1Composite</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.GS1Composite">
            <summary>Object for GS1 Composite symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Postnet">
            <summary>Object for Postnet symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Planet">
            <summary>Object for Planet symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Bpo">
            <summary>Object for BPO symbolgoy settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CanadaPost">
            <summary>Object for Canada Post symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.AustraliaPost">
            <summary>Object for Australia Post symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.JapanPost">
            <summary>Object for Japan Post symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.DutchPost">
            <summary>Object for Dutch Post symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Aztec">
            <summary>Object for Aztec symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Tlc39">
            <summary>Object for TLC39 symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.SwedenPost">
            <summary>Object for Sweden Post symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.Infomail">
            <summary>Object for Infomail symbology settings. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.IntelligentMail">
            <summary>
            object for Intelligent Mail symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.HanXin">
            <summary>
            object for Han Xin symbology settings.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.#ctor">
            <summary> Constructor for default scanner. </summary>
            <remarks>
            For the CV41 and CV61 computers, this constructor connects a tethered scanner to COM1.
            </remarks>
            <example>
            This example creates a instance of CSymbology class with default scanner.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmCSymbology : Form
                            {
                                private Intermec.DataCollection.CSymbology symb;
                                public frmCSymbology()
                                {
                                    InitializeComponent();           
                                    symb = new CSymbology();                      
                                }
                            }
                         }
                        </code> 
                        <code lang="VB.NET">
                         Imports Intermec.DataCollection
                         Public Class frmCSymbology
                            Private symb As Intermec.DataCollection.CSymbology
                            Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symb = New CSymbology()
                            End Sub
                         End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.#ctor(System.String)">
            <summary>Overload constructor using a specified scanner. </summary>
            <param name="scannerPort">Support "default", "ExtScanner", and "BTScanners" scanner name string</param>
            <remarks>        
            <list type="bullet">
            If you are using a tethered scanner, specify scannerPort as follows:
            <item>For the CV41 and CV61, specify "default" for scanners connected to COM1, and specify "ExtScanner" for scanners connected to COM2.</item>
            <item>For the CN3 Series and CN4 series computers, specify "ExtScanner" only if you are using a tethered scanner (SR30 or SR60T) connected to the Model AV6 or AV9 vehicle dock.</item>
            <item>For the CV60 and CV30, use ExtScanner_1 if you are Connecting the scanner to COM1.
            Otherwise, ExtScanner assumes the scanner is connected to COM2 on the CV60, Or COM3 on the CV30.</item>
            </list>
            </remarks>
            <example>
            This example creates a instance of CSymbology class with scanner name string.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmCSymbology : Form
                            {
                                private Intermec.DataCollection.CSymbology symb;
                                public frmCSymbology()
                                {
                                    InitializeComponent();           
                                    symb = new CSymbology("default");                      
                                }
                            }
                         }
                        </code> 
                        <code lang="VB.NET">
                         Imports Intermec.DataCollection
                         Public Class frmCSymbology
                            Private symb As Intermec.DataCollection.CSymbology
                            Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symb = New CSymbology("default")
                            End Sub
                         End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)">
            <summary>
            Enables or disables the throwing of exceptions if a get/set of a symbology property fails.
            </summary>
            <param name="bVal">
            Set to true to throw SymbologyExceptions when invalid
            values occur with sets/gets properties.
            </param>
            <remarks>
            See <see cref="M:Intermec.DataCollection.SymbologyException.#ctor(System.Int32,System.String)"/> Constructor for common exceptions.
            </remarks>
            <example>      
            This example enables the SymbologyExceptions. 
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmCSymbology : Form
                            {
                                private Intermec.DataCollection.CSymbology symb;
                                public frmCSymbology()
                                {
                                    InitializeComponent();           
                                    try
                                    {
                                        symb = new CSymbology();
                                        symb.EnableSymbologyExceptions(true);
                                    }
                                    catch (SymbologyException exp)
                                    {
                                        MessageBox.Show(exp.Message);
                                    }                         
                                }
                            }
                         }           
                       </code> 
                       <code lang="VB.NET">
                         Imports Intermec.DataCollection
                         Public Class frmCSymbology
                            Private symb As Intermec.DataCollection.CSymbology
                            Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    symb = New CSymbology()
                                    symb.EnableSymbologyExceptions(True)
                                Catch ex As SymbologyException
                                    MessageBox.Show(ex.Message)
                                End Try
                            End Sub
                        End Class           
                       </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CheckSymbologySetOrGet(System.Int32)">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.EnableDataMapperLog(System.Boolean)">
            <exclude /> 
            <summary> Enable/disable generate a data log file for set/get values. </summary>
            <param name="LogStatus">True, for generate a log file. False, for not generate a log file</param>
            <example>
            This example enables the SDKDataMapperLog.xml file with Code39 enabling. 
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmCSymbology : Form
                            {
                                private Intermec.DataCollection.CSymbology symb;
                                public frmCSymbology()
                                {
                                    InitializeComponent();           
                                    try
                                    {
                                        symb = new CSymbology("default");
                                        symb.EnableDataMapperLog(true);
                                        symb.Code39.Enable = true;
                                    }
                                    catch (SymbologyException exp)
                                    {
                                        MessageBox.Show(exp.Message);
                                    }                          
                                }
                            }
                         }           
                        </code>
                        <code lang="VB.NET">
                         Imports Intermec.DataCollection
                         Public Class frmCSymbology
                            Private symb As Intermec.DataCollection.CSymbology
                            Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    symb = New CSymbology()
                                    symb.EnableDataMapperLog(True)
                                    symb.Code39.Enable = True
                                Catch ex As SymbologyException
                                    MessageBox.Show(ex.Message)
                                End Try
                            End Sub
                        End Class            
                        </code>
                        The SDKDataMapperLog.xmL is generated in root directory of device. It looks like:
                         <code lang="XML">
                            &lt;?xml version="1.0" ?> 
                            &lt;SetCfgEventLog>
                               &lt;Event Call="FormatSetXML">
                                  &lt;Subsystem Name="Data Collection">
                                     &lt;Group Name="Scanners" Instance="1">
                                        &lt;Group Name="Symbologies">
                                            &lt;Group Name="Code 39">
                                               &lt;Field Name="Enable Code 39">1&lt;/Field> 
                                            &lt;/Group>
                                        &lt;/Group>
                                     &lt;/Group>
                                  &lt;/Subsystem>
                               &lt;/Event>
                               &lt;Event Call="SetValueXMLReturned">
                                  &lt;Subsystem Name="Data Collection">
                                     &lt;Group Name="Scanners" Instance="1">
                                        &lt;Group Name="Symbologies">
                                            &lt;Group Name="Code 39">
                                               &lt;Field Name="Enable Code 39">1&lt;/Field> 
                                            &lt;/Group>
                                        &lt;/Group>
                                     &lt;/Group>
                                  &lt;/Subsystem>
                              &lt;/Event>
                              &lt;Event Call="dataMapper::~dataMapper() - destruction" /> 
                           &lt;/SetCfgEventLog>
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.SetCfgValuesFromFile(System.String)">
            <summary> Sets bar code symbology attributes from an XML file.</summary>
            <param name="aFileName">Name of XML file that includes bar code symbology 
            attributes to set
            </param>
            <example>
            <para>
            This example enables Code39 with full ASCII conversion and a user-defined symbology ID
            with default scanner. 
            </para>
            <para>
            Assume a SymbologyCfgFile.xml file is in the root directory of device and its xml 
            string as below. The Name attribute in the Field element is the name of the symbology 
            attribute to set. The Instance value of Scanners defines the scanner to be set.
            </para>        
            <code lang="XML">
                        &lt;Subsystem Name="Data Collection" Version="2.0">
                            &lt;Group Name="Scanners" Instance="0" Version="2.0">
                                &lt;Group Name="Symbologies">
                                    &lt;Group Name="Code 39">
                                        &lt;Field Name="Enable Code 39">1&lt;/Field>
                                        &lt;Group Name="Options">
                                            &lt;Field Name="Full ASCII Conversion">1&lt;/Field>
                                            &lt;Field Name="User defined symbology ID">B1&lt;/Field>
                                        &lt;/Group>
                                    &lt;/Group>
                                &lt;/Group>
                            &lt;/Group>
                        &lt;/Subsystem>
                       </code>
                       <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                           public partial class frmCSymbology : Form
                           {
                               private Intermec.DataCollection.CSymbology symb;
                               public frmCSymbology()
                               {
                                    InitializeComponent();           
                                    symb = new CSymbology(); 
                                    symb.SetCfgValuesFromFile("\\SymbologyCfgFile.xml");
                                    this.listBox1.Items.Add("Code39 Enable = " + symb.Code39.Enable.ToString());
                                    this.listBox1.Items.Add("Full ASCII Conversion = " + symb.Code39.fullAsciiConversion.ToString());
                                    this.listBox1.Items.Add("UDSI = " + symb.Code39.UserDefinedSymbologyId.ToString());
                               }
                           }
                        }
                        </code> 
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmCSymbology
                           Private symb As Intermec.DataCollection.CSymbology
                           Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symb = New CSymbology()
                                symb.SetCfgValuesFromFile("\SymbologyCfgFile.xml")
                                Me.ListBox1.Items.Add("Enable = " + symb.Code39.Enable.ToString())
                                Me.ListBox1.Items.Add("Full ASCII Conversion = " + symb.Code39.fullAsciiConversion.ToString())
                                Me.ListBox1.Items.Add("UDSI = " + symb.Code39.UserDefinedSymbologyId.ToString())
                           End Sub
                        End Class
                        </code> 
            </example>        
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.EnableAll">
            <summary> Enables decoding of all symbologies your Intermec computer is capable of decoding.
            </summary>	
            <example>
            This example enables all symbolgies.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmCSymbology : Form
                            {
                                private Intermec.DataCollection.CSymbology symb;
                                public frmCSymbology()
                                {
                                    InitializeComponent();           
                                    symb = new CSymbology(); 
                                    symb.EnableAll();
                                }
                            }
                         }
                        </code> 
                        <code lang="VB.NET">
                         Imports Intermec.DataCollection
                         Public Class frmCSymbology
                            Private symb As Intermec.DataCollection.CSymbology
                            Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symb = New CSymbology()
                                symb.EnableAll()
                            End Sub
                         End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.DisableAll">
            <summary> Disables all symbology decoding. </summary>
            <example>
            This example disables all symbolgies.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmCSymbology : Form
                            {
                                private Intermec.DataCollection.CSymbology symb;
                                public frmCSymbology()
                                {
                                    InitializeComponent();           
                                    symb = new CSymbology(); 
                                    symb.DisableAll();
                                }
                            }
                         }
                        </code> 
                        <code lang="VB.NET">
                         Imports Intermec.DataCollection
                         Public Class frmCSymbology
                            Private symb As Intermec.DataCollection.CSymbology
                            Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                symb = New CSymbology()
                                symb.DisableAll()
                            End Sub
                         End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.scannerPort">
            <exclude /> 
            <summary> Sets/Gets scanner name </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE39">
            <summary> Defines attributes for decoding the Code 39 symbology. </summary>			
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE39.setScannerPort(System.String)">
            <exclude /> 
            <summary> Sets the scanner name of code39. </summary>
            <param name="scannerPort">Scanner name used for code39 settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE39.#ctor(System.String)">
            <exclude /> 
            <summary> Constructor of Code39 with scanner name string. </summary>
            <param name="scannerPort">Scanner name used for code39 settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.Enable">
            <summary>
            Set to true to enable Code 39 decoding, or set to false to disable decoding.
            </summary>
            <remarks>The Code39 character set consists 43 characters except
            when full ASCII conversion is enabled. 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables code39 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.Enable = true;
                                        string status = symb.Code39.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.Enable = True
                                    Dim status As String = symb.Code39.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.fullAsciiConversion">
            <summary>
            Enables or disables full ASCII decoding.
            </summary>
            <remarks>The Code39 bar codes are transmitted with an extended character set 
            when Code39 full ASCII conversion enabled. The full 128 ASCII character set 
            is encoded in Code39 by combining two regular Code39 characters.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Full ASCII Conversion value of code 39.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.fullAsciiConversion = CSymbology.CCODE39.EFullAsciiConversion.Enable;
                                        string retValue = symb.Code39.fullAsciiConversion.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.fullAsciiConversion = CSymbology.CCODE39.EFullAsciiConversion.Enable
                                    Dim retValue As String = symb.Code39.fullAsciiConversion.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.StartStopTransmission">
            <summary>
            Set to true to enable Start Stop Transmission, 
            or set to false to disable Start Stop Transmission. 
            </summary>
            <remarks>Start/Stop transmission option does not alter Full ASCII conversions 
            or Lengths count.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Start and Stop Transmission and retrieves setting 
            value of code 39.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.StartStopTransmission = true;
                                        string status = symb.Code39.StartStopTransmission.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.StartStopTransmission = True
                                    Dim status As String = symb.Code39.StartStopTransmission.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.startCharacter">
            <summary> Sets and gets the Code 39 start character. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets code 39 start character.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.startCharacter = CSymbology.CCODE39.EStartCharacter.AsterickOnly;
                                        string status = symb.Code39.startCharacter.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.startCharacter = CSymbology.CCODE39.EStartCharacter.AsterickOnly
                                    Dim status As String = symb.Code39.startCharacter.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.verifyCheckDigit">
            <summary> Sets and gets Code 39 check digit verification types. </summary>
            <remarks>Activating one type of check digit deactivates all other check digits.</remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets check digit verification value of code 39.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.verifyCheckDigit = CSymbology.CCODE39.EVerifyCheckDigit.Disable;
                                        string retValue = symb.Code39.verifyCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.verifyCheckDigit = CSymbology.CCODE39.EVerifyCheckDigit.Disable
                                    Dim status As String = symb.Code39.verifyCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.TransmitCheckDigit">
            <summary> Set to true to enable check digit transmission, 
            or set to false to disable transmission. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Check Digit Transmission and retrieves setting of code 39.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.TransmitCheckDigit = true;
                                        string retValue = symb.Code39.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.TransmitCheckDigit = True
                                    Dim status As String = symb.Code39.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.readingRange">
            <summary> Sets and gets the reading range. </summary>
            <remarks>Use extended reading range when long distance reading is important
            for a application. When using extended mode, reading distances are significantly 
            increased. 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets reading range value of code 39.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.readingRange = CSymbology.CCODE39.EReadingRange.Normal;
                                        string retValue = symb.Code39.readingRange.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.readingRange = CSymbology.CCODE39.EReadingRange.Normal
                                    Dim retValue As String = symb.Code39.readingRange.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.UnconventionalCode39">
            <summary>
            Disables and Enables decode of unconventional code 39 such as large intercharacter 
            and ratio between narrow and wide elements 
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //Enable UnconventionalCode39
                                        symb.Code39.UnconventionalCode39 = CSymbology.CCODE39.EUnconventional.Enable;
                                        //get UnconventionalCode39 status
                                        string strValue = symb.Code39.UnconventionalCode39.ToString();
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'Enable UnconventionalCode39
                                    symb.Code39.UnconventionalCode39 = CSymbology.CCODE39.EUnconventional.Enable
                                    'get UnconventionalCode39 status
                                    Dim strValue As String = symb.Code39.UnconventionalCode39.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.readingTolerance">
            <summary> Sets and gets the tolerance level for reading "hard to read" bar codes. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets reading tolerance level value of code 39.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.readingTolerance = CSymbology.CCODE39.EReadingTolerance.Medium;
                                        string retValue = symb.Code39.readingTolerance.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.readingTolerance = CSymbology.CCODE39.EReadingTolerance.Medium
                                    Dim retValue As String = symb.Code39.readingTolerance.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.lengthMode">
            <summary>
            Specifies acceptable bar code length. Length1, length2, and length3 are used 
            differently depending on this property.
            </summary>
            <remarks>When Length 1 is et to 0, no length is specified and any length of 3
            or more characters is accepted.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length mode value of code 39.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.lengthMode = CSymbology.CCODE39.ELengthMode.Length1Minimum;
                                        string retValue = symb.Code39.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.lengthMode = CSymbology.CCODE39.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Code39.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.length1">
            <summary> Integer value specifying bar code length1. </summary>
            <remarks>
            <para>Use Length 1, Length2, and Length 3 to compose a acceptable bar code 
            lengths depending on the length mode. Minimum length for Code39 is 3 characters.
            Bar Code length = &lt;start&gt; + &lt;bar code data&gt; + [check digit] + &lt;stop&gt;
            </para>
            <para>            
            <b>Note:</b> When Length 1, Length2, Length 3 and length mode are set to 0, no length 
            is specified and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length1 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.length1 = 3;
                                        string retValue = symb.Code39.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.length1 = 3
                                    Dim retValue As String = symb.Code39.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.length2">
            <summary> Integer value specifying bar code length2. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length2 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.length2 = 3;
                                        string retValue = symb.Code39.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.length2 = 3
                                    Dim retValue As String = symb.Code39.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.length3">
            <summary> Integer value specifying bar code length3. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length3 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.length3 = 3;
                                        string retValue = symb.Code39.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.length3 = 3
                                    Dim retValue As String = symb.Code39.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.symbologyId">
            <summary> Specifies symbology ID type. </summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured to use the 
            Trakker Antares decode algorithm. 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology identifier value of code 39.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.symbologyId = CSymbology.CCODE39.ESymbologyId.Disable;
                                        string retValue = symb.Code39.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.symbologyId = CSymbology.CCODE39.ESymbologyId.Disable
                                    Dim retValue As String = symb.Code39.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 characters) specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI symbology id]&lt;data&gt;.
            </summary>
            <remarks> 
            <para>The default user-defined symbology ID value is B1.</para>
            <para>
            In order to transmitted the custom identifier, the symbology identifier 
            transmission must be enabled. If the UDSI has zero character and symbolgoy identifier 
            transmission is enabled, no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id value of code 39.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code39.UserDefinedSymbologyId = "UDM0";
                                        string retValue = symb.Code39.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code39.UserDefinedSymbologyId = "UDM0"
                                    Dim retValue As String = symb.Code39.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE39.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
            
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Code39.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Code39.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Code39.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Code39.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE39.EFullAsciiConversion">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE39.fullAsciiConversion"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EFullAsciiConversion.Disable">
            <summary> Disable Full Ascii Conversion. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EFullAsciiConversion.Enable">
            <summary> The Bar codes are transmitted with an extended character set. 
            The full 128 ASCII character set is encoded in Code39 by combining two regular
            Code39 characters. 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE39.EStartCharacter">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE39.startCharacter"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EStartCharacter.DollarOnly">
            <summary> Using "$" as Code39 start character. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EStartCharacter.AsterickOnly">
            <summary> Using "*" as Code39 start character. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EStartCharacter.DollarAndAsterick">
            <summary> Using "$" and "*" as Code39 start characters. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE39.EVerifyCheckDigit">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE39.verifyCheckDigit"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EVerifyCheckDigit.Disable">
            <summary> Disable Code39 check digit verification. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EVerifyCheckDigit.Modulo43">
            <summary> Standard check digit for Code39 that uses the Modulo 43 algorithm.
            It provides extra validation of data. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EVerifyCheckDigit.FrenchCip">
            <summary> Check digit used for France pharmaceutical industry.
            It is only used for codes with 7 characters. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EVerifyCheckDigit.ItalianCpi">
            <summary> Check digit used by the Italian pharmaceutical industry,
            also known as Code32. If the checksum is not validated, the code is 
            transmitted as standard Code39.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE39.EReadingRange">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE39.readingRange"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EReadingRange.Normal">
            <summary> Sets Code39 reading range to standard. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EReadingRange.Extended">
            <summary> Sets Code39 reading range to extended.
            Use extended reading range when log distance reading is important
            in application. 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE39.EReadingTolerance">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE39.readingTolerance"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EReadingTolerance.High">
            <summary> Sets high reading tolerance. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EReadingTolerance.Medium">
            <summary> Sets medium reading tolerance. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EReadingTolerance.Low">
            <summary> Sets low reading tolerance. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE39.ELengthMode">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE39.lengthMode"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.ELengthMode.Length1Minimum">
            <summary> Sets Length1 as minimum length. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.ELengthMode.Lengths1_2_3Fixed">
            <summary> Sets Length1, Length2, and Length3 as fixed lengths. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.ELengthMode.Length1_minimum_Length2_maximum">
            <summary> Sets Length1 as minimum and Length2 as maximum lengths. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE39.ESymbologyId">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE39.symbologyId"/> property. </summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>A</term>
            <description>            
            <list type="bullet">
            <item>0: No check character validation nor full ASCII processing. All data trasmitted as decoded.</item>
            <item>1: Modulo 43 check character validated and transmitted.</item>
            <item>3: Modulo 43 check character validated but not transmitted.</item>
            <item>4: Full ASCII character conversion performed. No check character validation.</item>
            <item>5: Full ASCII character conversion performed. Modulo 43 check character validated and transmitted.</item>
            <item>7: Full ASCII character conversion performed. Modulo 43 check character validated but not transmitted.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.ESymbologyId.Disable">
            <summary> Disable Code39 symbology identifier. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.ESymbologyId.AIMISO_IECStandard">
            <summary> AIM ISO/IEC Standard as symbology identifier. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.ESymbologyId.UserDefined">
            <summary> User-defined symbology identifier. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE39.EUnconventional">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE39.UnconventionalCode39"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EUnconventional.Disable">
            <summary>
            Disable decode of unconventional code 39 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE39.EUnconventional.Enable">
            <summary>
            Enable decode of unconventional code 39 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CUPCEAN">
            <exclude /> 
            <summary>Deprecated. Replaced by CEANUPC class. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CEANUPC">
            <summary> Defines attributes for decoding the EAN/UPC symbology. </summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CEANUPC.setScannerPort(System.String)">
            <exclude /> 
            <summary> Sets the scanner name of EAN/UPC. </summary>
            <param name="scannerPort">Scanner name used for EAN/UPC settings.</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CEANUPC.#ctor(System.String)">
            <exclude /> 
            <summary> Constructor of EAN/UPC with scanner name string. </summary>
            <param name="scannerPort">Scanner name used for EAN/UPC settings.</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.EnableUPCA">
            <summary> 
            Set to true to enable UPC-A decoding, 
            or set to false to disable decoding. 
            </summary>
            <remarks>Enabling this symbology does not ensure decoding will be possible
            for any barcode read. Some options can prevent from decoding, such as Add On required.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC-A and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.EnableUPCA = true;
                                        string retValue = symb.EanUPC.EnableUPCA.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.EnableUPCA = True
                                    Dim retValue As String = symb.EanUPC.EnableUPCA.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.EnableUPCE">
            <summary> Set to true to enable UPC-E decoding, or set to false to disable decoding. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC-E and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.EnableUPCE = true;
                                        string retValue = symb.EanUPC.EnableUPCE.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.EnableUPCE = True
                                    Dim retValue As String = symb.EanUPC.EnableUPCE.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.EnableEan8">
            <summary> Set to true to enable EAN-8 decoding, or set to false to disable decoding. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables EAN-8 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.EnableEan8 = true;
                                        string retValue = symb.EanUPC.EnableEan8.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.EnableEan8 = True
                                    Dim retValue As String = symb.EanUPC.EnableEan8.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.EnableEan13">
            <summary> Set to true to enable EAN-13 decoding, or set to false to disable decoding. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables EAN-13 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.EnableEan13 = true;
                                        string retValue = symb.EanUPC.EnableEan13.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.EnableEan13 = True
                                    Dim retValue As String = symb.EanUPC.EnableEan13.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.EnableUPCE1">
            <summary> Set to true to enable UPC-E1 decoding, or set to false to disable decoding. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC-E1 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.EnableUPCE1 = true;
                                        string retValue = symb.EanUPC.EnableUPCE1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.EnableUPCE1 = True
                                    Dim retValue As String = symb.EanUPC.EnableUPCE1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.addOnDigits">
            <summary> Sets and gets the requirements for EAN/UPC add-on digits. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets add-on digits value. 
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.addOnDigits = CSymbology.CEANUPC.EAddOnDigits.ControlledByAddOnDigits;
                                        string retValue = symb.EanUPC.addOnDigits.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.addOnDigits = CSymbology.CEANUPC.EAddOnDigits.ControlledByAddOnDigits
                                    Dim retValue As String = symb.EanUPC.addOnDigits.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.AddOn2DigitsActive">
            <summary> Set to true to enable EAN/UPC Add-On 2, or set to false to disable it. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC/EAN Add-On 2 and retrieves setting. 
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.AddOn2DigitsActive = true;
                                        string retValue = symb.EanUPC.AddOn2DigitsActive.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.AddOn2DigitsActive = True
                                    Dim retValue As String = symb.EanUPC.AddOn2DigitsActive.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.AddOn5DigitsActive">
            <summary> Set to true to enable EAN/UPC Add-On 5, or set to false to disable it. </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables EAN/UPC Add-On 5 and gets setting. 
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.AddOn5DigitsActive = true;
                                        string retValue = symb.EanUPC.AddOn5DigitsActive.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.AddOn5DigitsActive = True
                                    Dim retValue As String = symb.EanUPC.AddOn5DigitsActive.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.addOnSecurity">
            <summary>
            Sets and gets the security level for decoding. Range is 0 to 100.
            </summary>
            <remarks>The add-on digit security is used only when add-on digits are not 
            required but transmitted. A higher security level results in more secure
            decoding however this can slow the decode rate.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets add On Security value. 
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.addOnSecurity = 32;
                                        string retValue = symb.EanUPC.addOnSecurity.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.addOnSecurity = 32
                                    Dim retValue As String = symb.EanUPC.addOnSecurity.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCACheckDigit">
            <summary> Set to true to enable UPC-A check digit, or set to false to disable it. </summary>
            <remarks>UPC/EAN are always transmitted if GTIN is enabled</remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC-A check digit and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.UPCACheckDigit = true;
                                        string retValue = symb.EanUPC.UPCACheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.UPCACheckDigit = True
                                    Dim retValue As String = symb.EanUPC.UPCACheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCECheckDigit">
            <summary> 
            Set to true to enable UPC-E check digit transmission, or set to false to disable it. 
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC-E check digit and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.UPCECheckDigit = true;
                                        string retValue = symb.EanUPC.UPCECheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.UPCECheckDigit = True
                                    Dim retValue As String = symb.EanUPC.UPCECheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.Ean8CheckDigit">
            <summary> 
            Set to true to enable EAN-8 check digit transmission, or set to false to disable it. 
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables EAN-8 check digit and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.Ean8CheckDigit = true;
                                        string retValue = symb.EanUPC.Ean8CheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.Ean8CheckDigit = True
                                    Dim retValue As String = symb.EanUPC.Ean8CheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.Ean13CheckDigit">
            <summary> 
            Set to true to enable EAN-13 check digit transmission, or set to false to disable it. 
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables EAN-13 check digit and gets setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.Ean13CheckDigit = true;
                                        string retValue = symb.EanUPC.Ean13CheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.Ean13CheckDigit = True
                                    Dim retValue As String = symb.EanUPC.Ean13CheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCANumberSys">
            <summary> 
            Set to true to enable UPC-A Number System Transmission, 
            or set to false to disable it. 
            </summary>
            <remarks>UPC-A has transmitted number system equal to 0. To transmit the additional leading 
            character (country code), select "UPC-A transmitted as EAN-13" option. The number system is
            transmitted as: &lt;leading character&gt;&lt;number system&gt;&lt;data&gt;&lt;check digit&gt;
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC-A Number System Transmission and gets setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.UPCANumberSys = true;
                                        string retValue = symb.EanUPC.UPCANumberSys.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.UPCANumberSys = True
                                    Dim retValue As String = symb.EanUPC.UPCANumberSys.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCENumberSys">
            <summary> 
            Set to true to enable UPC-E Number System Transmission, 
            or set to false to disable it. 
            The number system is transmitted in format &lt;leading character&gt;&lt;number system&gt;&lt;data&gt;&lt;check digit&gt;
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC-A Number System Transmission and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.UPCANumberSys = true;
                                        string retValue = symb.EanUPC.UPCANumberSys.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.UPCANumberSys = True
                                    Dim retValue As String = symb.EanUPC.UPCANumberSys.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCAXmitAsEan13">
            <summary>
            Set to true to enable UPC-A Transmitted as EAN-13, or set to false to disable it. 
            Transmission only takes into account the parameters available for the target bar
            code format.
            </summary>
            <remarks>For all conversions, the symbology identifier (AIM or user defined) is 
            based on destination symbology.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC-A Transmitted as EAN-13 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.UPCAXmitAsEan13 = true;
                                        string retValue = symb.EanUPC.UPCAXmitAsEan13.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.UPCAXmitAsEan13 = True
                                    Dim retValue As String = symb.EanUPC.UPCAXmitAsEan13.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCEXmitAsUPCA">
            <summary>
            Set to true to enable UPC-E Transmitted as UPC-A, or set to false to disable it.
            Transmission only takes into account only the parameters available for the target bar
            code format.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UPC-E Transmitted as UPC-A and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.UPCEXmitAsUPCA = true;
                                        string retValue = symb.EanUPC.UPCEXmitAsUPCA.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.UPCEXmitAsUPCA = True
                                    Dim retValue As String = symb.EanUPC.UPCEXmitAsUPCA.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.Ean8XmitAsEan13">
            <summary>
            Set to true to enable EAN-8 Transmitted as EAN-13, or set to false to disable it. 
            Transmission takes into account only the parameters available for the target bar
            code format.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables EAN-8 Transmitted as EAN-13 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.Ean8XmitAsEan13 = true;
                                        string retValue = symb.EanUPC.Ean8XmitAsEan13.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.Ean8XmitAsEan13 = True
                                    Dim retValue As String = symb.EanUPC.Ean8XmitAsEan13.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.IsbnConversionForEan13">
            <summary>
            Set to true to enable ISBN Conversion for EAN-13, or set to false to disable it. 
            If enabled, no add-on is transmitted even if required.
            </summary>
            <remarks>
            <para>Converts all EAN-13 bar codes beginning with "978" or "979"
            (except for "9790" by removing the first 3 digits, calculating the 
            checksum on the remaining characters, and adding the ISBN (International 
            Standard Book Number) check digit.
            </para>
            <note>No conversion if GTIN is active.</note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables ISBN Conversion for EAN-13 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.IsbnConversionForEan13 = true;
                                        string retValue = symb.EanUPC.IsbnConversionForEan13.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.IsbnConversionForEan13 = True
                                    Dim retValue As String = symb.EanUPC.IsbnConversionForEan13.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.IsmnConversionForEan13">
            <summary>
            Set to true to enable ISMN Conversion, or set to false to disable it.
            </summary>
            <remarks>
            <para>
            When enabled, it converts all EAN-13 bar codes beginning with "9790" 
            by removing the first 3 digits and replacing the "0" with "M." 
            This creates the International Standard Music Number (ISMN).
            </para>
            <note>No conversion is done if GTIN processing is active.</note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables ISMN Conversion For Ean13 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.IsmnConversionForEan13 = true;
                                        string retValue = symb.EanUPC.IsmnConversionForEan13.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.IsmnConversionForEan13 = True
                                    Dim retValue As String = symb.EanUPC.IsmnConversionForEan13.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.IssnConversionForEan13">
            <summary>
            Set to true to enable ISSN Conversion, or set to false to disable it.
            </summary>
            <remarks>
            <para>
            When enabled, it converts all EAN-13 bar codes beginning with "977" 
            by removing the first 3 digits and adding the ISBN check digit. 
            This creates the International Standard Serial Number (ISSN).
            </para>
            <note>No conversion is done if GTIN processing is active.</note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables ISSN Conversion For Ean13 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.IssnConversionForEan13 = true;
                                        string retValue = symb.EanUPC.IssnConversionForEan13.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.IssnConversionForEan13 = True
                                    Dim retValue As String = symb.EanUPC.IssnConversionForEan13.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.GtinCompliant">
            <summary>
            Set to true to enable GTIN Compliant, or set to false to disable it.
            </summary>
            <remarks>
            Enable or disable GTIN processing for all UPC/EAN symbologies. 
            GTIN stands for "Global Trade Item Number" and transmits UPC/EAN 
            symbologies as the 14 character EAN.UCC GTIN.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GTIN Compliant and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.GtinCompliant = true;
                                        string retValue = symb.EanUPC.GtinCompliant.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.GtinCompliant = True
                                    Dim retValue As String = symb.EanUPC.GtinCompliant.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.uPCASymbologyId">
            <summary> Specifies symbology ID type for UPC-A.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has 
            been configured to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology ID for UPC-A value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.uPCASymbologyId = CSymbology.CEANUPC.EUPCASymbologyId.UserDefined;
                                        string retValue = symb.EanUPC.uPCASymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.uPCASymbologyId = CSymbology.CEANUPC.EUPCASymbologyId.UserDefined
                                    Dim retValue As String = symb.EanUPC.uPCASymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCAUserDefinedSymId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined UPC-A symbology ID 
            if not usig the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is A0. </para>
            <para>
            If there is no character for UDSI and symbology identifier transmission is 
            active, no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets UPC-A user defined symbology identifier value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.UPCAUserDefinedSymId = "A0";
                                        string retValue = symb.EanUPC.UPCAUserDefinedSymId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.UPCAUserDefinedSymId = "A0"
                                    Dim retValue As String = symb.EanUPC.UPCAUserDefinedSymId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCACodeMark">
            <summary>
            Compose a one character code mark symbology identifier for this symbology. 
            The code mark is transmitted in format: [code mark symbology id] &lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
            
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.EanUPC.UPCACodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.EanUPC.UPCACodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.EanUPC.UPCACodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.EanUPC.UPCACodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.uPCESymbologyId">
            <summary> Specificies the symbology ID type for UPC-E.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has 
            been configured to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology ID for UPC-E value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.uPCESymbologyId = CSymbology.CEANUPC.EUPCASymbologyId.UserDefined;
                                        string retValue = symb.EanUPC.uPCESymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.uPCESymbologyId = CSymbology.CEANUPC.EUPCASymbologyId.UserDefined
                                    Dim retValue As String = symb.EanUPC.uPCESymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCEUserDefinedSymId">
            <summary>
            String (0 to 4 characters) that specifies a user-defined symbology ID (UDSI) 
            when not using the AIM standard for this symbology. The UDSI is transmitted 
            in the format [UDSI symbology id]&lt;data&gt;. 
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is E0.</para>
            <para>
            If there is no character for UDSI and symbology identifier transmission is 
            active, no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets UPC-E user defined symbology identifier value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.UPCEUserDefinedSymId = "E0";
                                        string retValue = symb.EanUPC.UPCEUserDefinedSymId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.UPCEUserDefinedSymId = "E0"
                                    Dim retValue As String = symb.EanUPC.UPCEUserDefinedSymId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.UPCECodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
            
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.EanUPC.UPCECodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.EanUPC.UPCECodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.EanUPC.UPCECodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.EanUPC.UPCECodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.ean8SymbologyId">
            <summary> Specifies symbology ID type for EAN-8.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has 
            been configured to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology ID for EAN-8 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.ean8SymbologyId = CSymbology.CEANUPC.EUPCASymbologyId.UserDefined;
                                        string retValue = symb.EanUPC.ean8SymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.ean8SymbologyId = CSymbology.CEANUPC.EUPCASymbologyId.UserDefined
                                    Dim retValue As String = symb.EanUPC.ean8SymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.Ean8UserDefinedSymId">
            <summary>
            A string (0 to 4 characters) that specifies a user-defined symbology ID (UDSI) 
            when not using the AIM standard for this symbology. The UDSI is transmitted in 
            the format [UDSI symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is FF.</para>
            <para>
            If there is no character for UDSI and symbology identifier transmission is 
            active, no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Ean8 user defined symbology identifier value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.Ean8UserDefinedSymId = "FF";
                                        string retValue = symb.EanUPC.Ean8UserDefinedSymId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.Ean8UserDefinedSymId = "FF"
                                    Dim retValue As String = symb.EanUPC.Ean8UserDefinedSymId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.Ean8CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
            
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.EanUPC.Ean8CodeMark = "N";
                                        //get CodeMark value
                                        string strValue = symb.EanUPC.Ean8CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.EanUPC.Ean8CodeMark = "N"
                                    'get CodeMark value
                                    Dim strValue As String = symb.EanUPC.Ean8CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.ean13SymbologyId">
            <summary> Specifies symbology ID type for EAN-13.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has 
            been configured to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology ID for EAN-13 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.ean13SymbologyId = CSymbology.CEANUPC.EUPCASymbologyId.UserDefined;
                                        string retValue = symb.EanUPC.ean13SymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.ean13SymbologyId = CSymbology.CEANUPC.EUPCASymbologyId.UserDefined
                                    Dim retValue As String = symb.EanUPC.ean13SymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.Ean13UserDefinedSymId">
            <summary>
            A string (0 to 4 characters) that specifies a user-defined symbology ID (UDSI) 
            when not using the AIM standard for this symbology. The UDSI is transmitted in 
            the format [UDSI symbology ID]&lt;data&gt;.
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is F.</para>
            <para>
            If there is no character for UDSI and symbology identifier transmission is 
            active, no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Ean13 user defined symbology identifier value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.EanUPC.Ean13UserDefinedSymId = "F";
                                        string retValue = symb.EanUPC.Ean13UserDefinedSymId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.EanUPC.Ean13UserDefinedSymId = "F"
                                    Dim retValue As String = symb.EanUPC.Ean13UserDefinedSymId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CEANUPC.Ean13CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>          
            <example>
            <code>
                            using Intermec.DataCollection;
            
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.EanUPC.Ean13CodeMark = "F";
                                        //get CodeMark value
                                        string strValue = symb.EanUPC.Ean13CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.EanUPC.Ean13CodeMark = "F"
                                    'get CodeMark value
                                    Dim strValue As String = symb.EanUPC.Ean13CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CEANUPC.EAddOnDigits">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CEANUPC.addOnDigits"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EAddOnDigits.TransmitIfFound">
            <summary> Not required but transmitted if read.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EAddOnDigits.ControlledByAddOnDigits">
            <summary> required and transmitted. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CEANUPC.EUPCASymbologyId">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CEANUPC.uPCASymbologyId"/> property. </summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>E</term>
            <description>            
            <list type="bullet">
            <item>0: Standard data packet in full EAN format (13 digits for EAN-13, UPC-A, and UPC-E; does not include add-on data).</item>
            <item>1: Two digit add-on data only.</item>
            <item>2: Five digit add-on data only.</item>
            <item>3: Combined data packet comprising 13 digits from EAN-13, UPC-A, or UPC-E symbol and 2 or 5 digits from add-on symbol.</item>
            <item>4: EAN-8 data packet.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EUPCASymbologyId.Disable">
            <summary> Disable UPC-A symbology ID. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EUPCASymbologyId.AIMISO_IECStandard">
            <summary> AIM ISO/IEC Standard symbology ID.  </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EUPCASymbologyId.UserDefined">
            <summary> User defined symbolgy identifier symbology ID.  </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CEANUPC.EUPCESymbologyId">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CEANUPC.uPCESymbologyId"/> property. </summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>E</term>
            <description>            
            <list type="bullet">
            <item>0: Standard data packet in full EAN format (13 digits for EAN-13, UPC-A, and UPC-E; does not include add-on data).</item>
            <item>1: Two digit add-on data only.</item>
            <item>2: Five digit add-on data only.</item>
            <item>3: Combined data packet comprising 13 digits from EAN-13, UPC-A, or UPC-E symbol and 2 or 5 digits from add-on symbol.</item>
            <item>4: EAN-8 data packet.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EUPCESymbologyId.Disable">
            <summary> Disable UPC-E symbology ID </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EUPCESymbologyId.AIMISO_IECStandard">
            <summary> AIM ISO/IEC Standard UPC-E symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EUPCESymbologyId.UserDefined">
            <summary> User-defined symbolgy ID.  </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CEANUPC.EEan8SymbologyId">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CEANUPC.ean8SymbologyId"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EEan8SymbologyId.Disable">
            <summary> Disable EAN-8 symbology ID </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EEan8SymbologyId.AIMISO_IECStandard">
            <summary> AIM ISO/IEC Standard EAN-8 symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EEan8SymbologyId.UserDefined">
            <summary> User-defined symbolgy ID.  </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CEANUPC.EEan13SymbologyId">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CEANUPC.ean13SymbologyId"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EEan13SymbologyId.Disable">
            <summary> Disable EAN-13 symbology ID </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EEan13SymbologyId.AIMISO_IECStandard">
            <summary> AIM ISO/IEC Standard EAN-13 Symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CEANUPC.EEan13SymbologyId.UserDefined">
            <summary> User-defined symbolgy ID.  </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE128">
            <summary> Defines attributes for decoding the Code 128 symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE128.setScannerPort(System.String)">
            <exclude /> 
            <summary> Sets scanner name string for Code128 symbology settings.</summary>
            <param name="scannerPort">scanner name string</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE128.#ctor(System.String)">
            <exclude /> 
            <summary> Code128 constructor </summary>
            <param name="scannerPort">scanner name string</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.Enable">
            <summary> Set to true to enable Code 128 decoding, or set to false to disable decoding.</summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables code 128 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.Enable = true;
                                        string retValue = symb.Code128.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.Enable = True
                                    Dim retValue As String = symb.Code128.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.Ean128">
             <exclude /> 
            Deprecate this property in DCRK3.50
             <summary> Deprecated, replaced by GS1-128. </summary>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.GS1_128">
            <summary> Set to true to enable GS1-128 decoding, or set to false to diable decoding. </summary>
            <remarks>
            Enable GS1-128 permits to decode code 128 with FNC1 in 1st 
            position. This symbology is subject to identical Code 128 
            constraints (length, Reading tolerance.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GS1-128 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.GS1_128 = true;
                                        string retValue = symb.Code128.GS1_128.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.GS1_128 = True
                                    Dim retValue As String = symb.Code128.GS1_128.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.Ean128Identifier">
            <exclude /> 
            <summary> Deprecated, replaced by GS1-128Identifier. </summary>          
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.GS1_128Identifier">
            <summary> Set to true to enable the AIM identifier characters, 
            or set to false to disable the characters.
            </summary>
            <remarks>
            According the GS1-128 norm, the AIM identifier " ]C1 " is 
            added by default in front of each GS1-128 bar code as 
            follows: ]C1 &lt;data&gt;
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GS1-128 Identifier and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.GS1_128Identifier = true;
                                        string retValue = symb.Code128.GS1_128Identifier.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.GS1_128Identifier = True
                                    Dim retValue As String = symb.Code128.GS1_128Identifier.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.ISBT128">
            <summary> Set to true to enable ISBT-128 decoding, 
            or set to false to disable decoding. </summary>
            <remarks>
            Intermec recommends disabling Code 128 and GS1-128 when 
            activating ISBT 128. This avoids confusing between the 
            different bar codes.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables ISBT-128 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.ISBT128 = true;
                                        string retValue = symb.Code128.ISBT128.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.ISBT128 = True
                                    Dim retValue As String = symb.Code128.ISBT128.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.isbtConcatTrans">
            <summary> Selects the transmission mode for concatenated ISBT 128 codes.</summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets transmission mode for concatenated ISBT 128.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.isbtConcatTrans = CSymbology.CCODE128.EISBTConcatTrans.Disable;
                                        string retValue = symb.Code128.isbtConcatTrans.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.isbtConcatTrans = CSymbology.CCODE128.EISBTConcatTrans.Disable
                                    Dim retValue As String = symb.Code128.isbtConcatTrans.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.ConcatenateISBTCodes">
            <summary>
            Set to true to enable ISBT 128 Concatenation, 
            or set to false to disable Concatenation.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables ISBT 128 Concatenation and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.ConcatenateISBTCodes = true;
                                        string retValue = symb.Code128.ConcatenateISBTCodes.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.ConcatenateISBTCodes = True
                                    Dim retValue As String = symb.Code128.ConcatenateISBTCodes.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.GTINcompliant">
            <summary>
            Set to true to enable GTIN processing, 
            or set to false to disable GTIN processing.
            </summary>
            <remarks>
            Only GS1-128 codes of at least 16 characters and 
            beginning with "01" can be processed. Non-compliant 
            GS1-128 codes are not read when GTIN processing is active.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GTIN Compliant and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.GTINcompliant = true;
                                        string retValue = symb.Code128.GTINcompliant.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.GTINcompliant = True
                                    Dim retValue As String = symb.Code128.GTINcompliant.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.checkDigitVerify">
            <summary>
            Enable or disable French CIP check digit verification, 
            used for the French pharmaceutical industry. 
            </summary>
            <remarks>
            <para>
            If French CIP check digit is active, decoding only succeeds 
            if barcode length is 14 characters, start is C type, and 
            CIP check digit is verified.
            </para>
            <note>
            French CIP activation does not force minimum length to 14.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets check digit verification.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.checkDigitVerify = CSymbology.CCODE128.ECheckDigitVerify.Disable;
                                        string retValue = symb.Code128.checkDigitVerify.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.checkDigitVerify = CSymbology.CCODE128.ECheckDigitVerify.Disable
                                    Dim retValue As String = symb.Code128.checkDigitVerify.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.readerTolerance">
            <summary>
            Sets and gets the tolerance level for reading "hard to read" bar codes.
            </summary>  
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets check digit verification.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.readerTolerance = CSymbology.CCODE128.EReaderTolerance.Medium;
                                        string retValue = symb.Code128.readerTolerance.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.readerTolerance = CSymbology.CCODE128.EReaderTolerance.Medium
                                    Dim retValue As String = symb.Code128.readerTolerance.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.UCCEANCode128SymId">
            <summary>
            Set to true to enables the UCC/EAN Code 128 symbology ID, 
            or set to false to disable symbology ID.
            </summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured to use 
            the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables UCC/EAN Code 128 symbology ID and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.UCCEANCode128SymId = true;
                                        string retValue = symb.Code128.UCCEANCode128SymId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.UCCEANCode128SymId = True
                                    Dim retValue As String = symb.Code128.UCCEANCode128SymId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.ISBTSymId">
            <summary>Set to true to enable Code128 ISBT Symbology ID, 
            or set to false to disable Symbology ID. </summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Code128 ISBT Symbology ID and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.ISBTSymId = true;
                                        string retValue = symb.Code128.ISBTSymId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.ISBTSymId = True
                                    Dim retValue As String = symb.Code128.ISBTSymId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.lengthMode">
            <summary>
            Specifies acceptable bar code lengths. Length1, length2, and length3 are 
            used differently depending on this property.
            </summary>
            <remarks>
            When L1, L2, L3 and length mode are set to 0, no length is specified and any 
            length of characters is accepted.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.lengthMode = CSymbology.CCODE128.ELengthMode.Length1Minimum;
                                        string retValue = symb.Code128.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.lengthMode = CSymbology.CCODE128.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Code128.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.length1">
            <summary>
            Integer value specifying bar code length1. 
            Minimum length for Code128/GS1-128 is 1 character. Bar code length = &lt;bar code data&gt;
            </summary>
            <remarks>
            Range is 0 to 255. When L1, L2, L3 and length mode are set to 0 no length is specified and any length 
            of characters is accepted.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 1 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.length1 = 3;
                                        string retValue = symb.Code128.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.length1 = 3
                                    Dim retValue As String = symb.Code128.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.length2">
            <summary>
             Integer value specifying bar code length2.          
            </summary>
            <remarks>
            Range is 0 to 255.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 2 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.length2 = 3;
                                        string retValue = symb.Code128.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.length2 = 3
                                    Dim retValue As String = symb.Code128.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.length3">
            <summary>
            Integer value specifying bar code length3.    
            </summary>
            <remarks>
            Range is 0 to 255.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 3 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.length3 = 3;
                                        string retValue = symb.Code128.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.length3 = 3
                                    Dim retValue As String = symb.Code128.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.symbologyId">
            <summary>
            Specifies Code128 symbology ID type. 
            </summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been 
            configured to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Code128 symbology identifier.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.symbologyId = CSymbology.CCODE128.ESymbologyId.UserDefined;
                                        string retValue = symb.Code128.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.symbologyId = CSymbology.CCODE128.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Code128.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.Code128UserDefSymId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            If there is no character and symbology identifier transmission is enabled, no symbology
            identifier will be sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Code128 user defined symbology identifier.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.Code128UserDefSymId = "B3";
                                        string retValue = symb.Code128.Code128UserDefSymId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.Code128UserDefSymId = "B3"
                                    Dim retValue As String = symb.Code128.Code128UserDefSymId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.Ean128UserDefSymId">
            <exclude /> 
            <summary> Deprecated, replaced by GS1_128UserDefSymId. </summary>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.GS1_128UserDefSymId">
            <summary>
            String (0 to 4 characters) specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            <para>
            The default user-defined symbology ID value is C9. 
            </para>
            If there is no character and symbology identifier transmission is enabled, no symbology
            identifier will be sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets GS1-128 user defined symbology identifier.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code128.GS1_128UserDefSymId = "C9";
                                        string retValue = symb.Code128.GS1_128UserDefSymId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code128.GS1_128UserDefSymId = "C9"
                                    Dim retValue As String = symb.Code128.GS1_128UserDefSymId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.Fnc1Conversion">
            <summary>
            One ASCII character (or a string in hex notation) specifying the Code 128/GS1-128/ISBT 
            FNC1 separator character.Applies only to FNC1 in first or second position 
            (converted FNC1 character not transmitted).
            </summary>
            <remarks>
            <para>This separator is used when multiple identifiers and their fields are concatenated.</para>
            <note>
            This is useful for keyboard wedge interfaces where the &lt;GS&gt; character cannot be transmitted.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets GS1-128 user defined symbology identifier.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        //Set FNC1 conversion to &lt;GS&gt;
                                        symb.Code128.Fnc1Conversion = "\\x1D";
                                        string retValue = symb.Code128.Fnc1Conversion.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    'Set FNC1 conversion to &lt;GS&gt;
                                    symb.Code128.Fnc1Conversion = "\x1D"
                                    Dim retValue As String = symb.Code128.Fnc1Conversion.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.Code128CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>          
            <example>
            <code>
                            using Intermec.DataCollection;
            
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Code128.Code128CodeMark = "D";
                                        //get CodeMark value
                                        string strValue = symb.Code128.Code128CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Code128.Code128CodeMark = "D"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Code128.Code128CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE128.GS1_128CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
            
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Code128.GS1_128CodeMark = "D";
                                        //get CodeMark value
                                        string strValue = symb.Code128.GS1_128CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Code128.GS1_128CodeMark = "D"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Code128.GS1_128CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE128.EISBTConcatTrans">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE128.isbtConcatTrans"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.EISBTConcatTrans.Disable">
            <summary>
            Codes are always transmitted as single codes 
            (no concatenation).
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.EISBTConcatTrans.ConcatenatedCodes">
            <summary>
            Only transmits concatenated codes, does not transmit 
            single codes.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.EISBTConcatTrans.ConcatOrSingleCodes">
            <summary>
            Single codes and concatenated codes are both transmitted. 
            If the product can only "see" one code of a code pair 
            it will send that code as a single code. If the product 
            "sees" both codes of a pair it will concatenate the 
            codes depending on the concatenation mode setting.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE128.ECheckDigitVerify">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE128.checkDigitVerify"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.ECheckDigitVerify.Disable">
            <summary> Disable French CIP Check Digit Verification. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.ECheckDigitVerify.FrenchCip">
            <summary> Enable French CIP check digit Verification. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE128.EReaderTolerance">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE128.readerTolerance"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.EReaderTolerance.High">
            <summary> Sets high reading tolerance. Most permissive (reads codes of variable quality)</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.EReaderTolerance.Medium">
            <summary> Sets medium reading tolerance. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.EReaderTolerance.Low">
            <summary> Sets low reading tolerance. Least permissive - reads only codes that meet the standard for the symbology.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE128.ELengthMode">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE128.lengthMode"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer 
            are read. Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by 
            Length1, Length2 and Length3 will be read.               
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by 
            Length1 and not longer than the maximum length specified by 
            Length2 are read. Length3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE128.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE128.symbologyId"/> property. </summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>C</term>
            <description>            
            <list type="bullet">
            <item>0: Standard data packet. No FNC1 in first or second symbol character position after start character.</item>
            <item>1: EAN/UCC-128 data packet. FNC1 in first symbol character position after start character.</item>
            <item>2: FNC1 in second symbol character position after start character.</item>
            <item>4: Concatenation according to International Society for Blood Transfusion specifications has been performed. Concatenated data follows.</item>
            </list>
            </description>
            </item>
            </list>
            <note>For UCC/EAN128 emulation mode, use ']C1' for the symbology ID.</note>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.ESymbologyId.Disable">
            <summary> Disable symbolgy ID. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.ESymbologyId.AIMISO_IECStandard">
            <summary> AIM ISO/IEC Standard. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE128.ESymbologyId.UserDefined">
            <summary> User Defined Symbology identifier. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5">
            <summary>
            Defines attributes for decoding the Interleaved 2 of 5 symbology.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets the scanner name string </summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.#ctor(System.String)">
            <exclude /> 
            <summary> Construct of CINTERLEAVED2OF5 class. </summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.Enable">
            <summary>
            Set to true to enable Interleaved 2 of 5 decoding, or set to false to disable decoding.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible for 
            any barcode read. Some options can prevent from decoding (Length, check digit..)
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Interleaved 2 of 5 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.Enable = true;
                                        string retValue = symb.Interleaved2Of5.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.Enable = True
                                    Dim retValue As String = symb.Interleaved2Of5.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.caseCode">
            <summary>Selects the Interleaved 2 of 5 case code type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured to 
            use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Interleaved 2 of 5 case code.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.caseCode = CSymbology.CINTERLEAVED2OF5.ECaseCode.Disable;
                                        string retValue = symb.Interleaved2Of5.caseCode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.caseCode = CSymbology.CINTERLEAVED2OF5.ECaseCode.Disable
                                    Dim retValue As String = symb.Interleaved2Of5.caseCode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.verifyCheckDigit">
            <summary>Specifies check digit verification type. </summary>
            <remarks>
            Activating one type of check digit deactivates all other check digits.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Interleaved 2 of 5 check digit verification.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.verifyCheckDigit = CSymbology.CINTERLEAVED2OF5.EVerifyCheckDigit.Disable;
                                        string retValue = symb.Interleaved2Of5.verifyCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.verifyCheckDigit = CSymbology.CINTERLEAVED2OF5.EVerifyCheckDigit.Disable
                                    Dim retValue As String = symb.Interleaved2Of5.verifyCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.TransmitCheckDigit">
            <summary>
            Set to true to enable check digit transmission, or set to false to disable transmission.
            </summary>
            <remarks>
            Check digit transmitted or not, do not impact length counts.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables check digit transmission and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.TransmitCheckDigit = true;
                                        string retValue = symb.Interleaved2Of5.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.TransmitCheckDigit = True
                                    Dim retValue As String = symb.Interleaved2Of5.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.readingTolerance">
            <summary>
            Sets the tolerance level for reading "hard to read" bar codes.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets reading tolerance level.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.readingTolerance = CSymbology.CINTERLEAVED2OF5.EReadingTolerance.Medium;
                                        string retValue = symb.Interleaved2Of5.readingTolerance.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.readingTolerance = CSymbology.CINTERLEAVED2OF5.EReadingTolerance.Medium
                                    Dim retValue As String = symb.Interleaved2Of5.readingTolerance.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.lengthMode">
            <summary> Specifies acceptable bar code length. </summary>
            <remarks>
            <para>
            Use Length1, Length2 and Length3 to compose a acceptable bar code lengths
            depending on the Length mode used. Minimum length for Interleaved 2 of 5 
            is 4 characters: Bar code length = &lt;bar code data&gt; + [check digit].
            </para>
            <note>When Length1, Length2, Length3 and length mode are set to 0, 
            no length is specified and any length of characters is accepted.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.lengthMode = CSymbology.CINTERLEAVED2OF5.ELengthMode.Length1Minimum;
                                        string retValue = symb.Interleaved2Of5.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.lengthMode = CSymbology.CINTERLEAVED2OF5.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Interleaved2Of5.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 - 255.
            </summary> 
            <remarks>
            For computers using the 1400, 1551, 1551E, or 1800 scanners, 
            range is 2 - 50.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 1 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.length1 = 6;
                                        string retValue = symb.Interleaved2Of5.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.length1 = 6
                                    Dim retValue As String = symb.Interleaved2Of5.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 - 255.
            </summary>
            <remarks>
            For computers using the 1400, 1551, 1551E, or 1800 scanners, 
            range is 2 - 50.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 2 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.length2 = 6;
                                        string retValue = symb.Interleaved2Of5.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.length2 = 6
                                    Dim retValue As String = symb.Interleaved2Of5.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 - 255.
            </summary>
            <remarks>
            For computers using the 1400, 1551, 1551E, or 1800 scanners, 
            range is 2 - 50.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 3 value.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.length3 = 6;
                                        string retValue = symb.Interleaved2Of5.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.length3 = 6
                                    Dim retValue As String = symb.Interleaved2Of5.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology ID.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.symbologyId = CSymbology.CINTERLEAVED2OF5.ESymbologyId.UserDefined;
                                        string retValue = symb.Interleaved2Of5.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.symbologyId = CSymbology.CINTERLEAVED2OF5.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Interleaved2Of5.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID
            if not using the AIM standard. The UDSI is transmitted in the format 
            [UDSI symbology id]&lt;data&gt;.
            </summary> 
            <remarks>
            The default user-defined symbology ID value is B2. 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology ID.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Interleaved2Of5.UserDefinedSymbologyId = "B2";
                                        string retValue = symb.Interleaved2Of5.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Interleaved2Of5.UserDefinedSymbologyId = "B2"
                                    Dim retValue As String = symb.Interleaved2Of5.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Interleaved2Of5.CodeMark = "I";
                                        //get CodeMark value
                                        string strValue = symb.Interleaved2Of5.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Interleaved2Of5.CodeMark = "I"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Interleaved2Of5.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ECaseCode">
            <summary>An enum data type of the <see cref="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.caseCode"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ECaseCode.Disable">
            <summary>Disable case code. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ECaseCode.CheckVerifiedButDiscarded">
            <summary> Check digit verified but discarded. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ECaseCode.WithCheckDigit">
            <summary>with check digit. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.EVerifyCheckDigit">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.verifyCheckDigit"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.EVerifyCheckDigit.Disable">
            <summary> No check digit verification. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.EVerifyCheckDigit.Modulo10">
            <summary>
            Check digit usually used for Code Interleaved 2 of 5 that applies 
            the Modulo 10 algorithm.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.EVerifyCheckDigit.FrenchCip">
            <summary>
            Check digit used for the French pharmaceutical industry. 
            It is only used for codes with 7 characters.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.EReadingTolerance">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.readingTolerance"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.EReadingTolerance.High">
            <summary>
            This is the most permissive mode. When enabled, the scanner reads 
            codes of variable quality. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.EReadingTolerance.Medium">
            <summary>This mode allows medium permissiveness. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.EReadingTolerance.Low">
            <summary>
            This is the least permissive mode. When enabled, the scanner reads 
            only high quality codes that meet the official Interleaved 2 of 5 standards. 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ELengthMode">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.lengthMode"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer 
            are read. Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by Length1, Length2 
            and Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by Length1 
            and not longer than the maximum length specified by Length2 are read. 
            L3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>I</term>
            <description>            
            <list type="bullet">
            <item>0: No check character validation.</item>
            <item>1: Modulo 10 symbol check character validated and transmitted.</item>
            <item>3: Modulo 10 symbol check character validated but not transmitted.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ESymbologyId.Disable">
            <summary> No symbology ID. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard symbology ID. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CINTERLEAVED2OF5.ESymbologyId.UserDefined">
            <summary>User-defined symbology ID.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE93">
            <summary>Defines attributes for decoding the Code 93 symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE93.setScannerPort(System.String)">
            <exclude /> 
            <summary> Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE93.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CCODE93 class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE93.Enable">
            <summary>
            Set to true to enable Code 93 decoding, or set to false to disable decoding.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible 
            for any barcode read. Some options can prevent from decoding (Length)
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables code 93 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code93.Enable = true;
                                        string retValue = symb.Code93.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code93.Enable = True
                                    Dim retValue As String = symb.Code93.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE93.lengthMode">
            <summary>Specifies acceptable bar code length.</summary>
            <remarks>
            <para>
            The Length1, Length2, and Length3 are used differently 
            depending on the length mode.
            </para>
            <note>
            when Length1, Length2, Length3 and length mode are set 
            to 0, no length is specified and any length of character is accepted.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets code 93 length mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code93.lengthMode = CSymbology.CCODE93.ELengthMode.Length1Minimum;
                                        string retValue = symb.Code93.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code93.lengthMode = CSymbology.CCODE93.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Code93.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE93.length1">
            <summary>Integer value specifying length1. Range is 0 - 255.</summary>
            <remarks>
            <para>
            Minimum length for Code93 is 1 character: Bar code length = &lt;bar code data&gt;.</para>
            <para><b>Note: </b>when Length1 is set to 0 no length is specified and
            any length of 3 or more character is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 1.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code93.length1 = 1;
                                        string retValue = symb.Code93.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code93.length1 = 1
                                    Dim retValue As String = symb.Code93.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE93.length2">
            <summary>Integer value specifying length2. Range is 0 - 255.</summary>
            <remarks>
            When Length1, Length2, Length3 and length mode are set to 0 no 
            length is specified and any length of characters is accepted.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 2.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code93.length2 = 1;
                                        string retValue = symb.Code93.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code93.length2 = 1
                                    Dim retValue As String = symb.Code93.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE93.length3">
            <summary>Integer value specifying length3. Range is 0 - 255.</summary>
            <remarks>
            When Length1, Length2, Length3 and length mode are set to 0 no 
            length is specified and any length of characters is accepted.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 3.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code93.length3 = 1;
                                        string retValue = symb.Code93.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code93.length3 = 1
                                    Dim retValue As String = symb.Code93.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE93.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured to 
            use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology ID.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code93.symbologyId = CSymbology.CCODE93.ESymbologyId.UserDefined;
                                        string retValue = symb.Code93.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code93.symbologyId = CSymbology.CCODE93.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Code93.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE93.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not 
            using the AIM standard. The UDSI is transmitted in the format [USDI symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is B6.</para>
            <para>
            If there is 0 character and symbology identifier transmission is enabled, 
            no symbology identifier will set for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology ID.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code93.UserDefinedSymbologyId = "B6";
                                        string retValue = symb.Code93.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code93.UserDefinedSymbologyId = "B6"
                                    Dim retValue As String = symb.Code93.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE93.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>          
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Code93.CodeMark = "D";
                                        //get CodeMark value
                                        string strValue = symb.Code93.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Code93.CodeMark = "D"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Code93.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE93.ELengthMode">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE93.lengthMode"/> property. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE93.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 
            and longer are read. Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE93.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by 
            Length1, Length2 and Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE93.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by 
            Length1 and not longer than the maximum length specified 
            by Length2 are read. Length3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE93.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE93.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>G</term>
            <description>No options specified. Always transmit 0.</description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE93.ESymbologyId.Disable">
            <summary>No symbology ID. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE93.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard symbology ID. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE93.ESymbologyId.UserDefined">
            <summary>User-defined symbology ID.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABAR">
            <summary>Defines attributes for decoding the Codabar symbology. </summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODABAR.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODABAR.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CCODABAR class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.Enable">
            <summary>Set to true to enable Codabar decoding, or set to false to disable decoding.</summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible 
            for any barcode read. Some options can prevent from decoding 
            (Length, Check digit,..)
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Codabar and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.Enable = true;
                                        string retValue = symb.Codabar.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.Enable = True
                                    Dim retValue As String = symb.Codabar.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.codabarType">
            <summary>Specifies Codabar type to decode.</summary>
            <remarks>
            Make sure the computer has been configured to use the Trakker 
            Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Codabar Type.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.codabarType = CSymbology.CCODABAR.ECodabarType.Standard;
                                        string retValue = symb.Codabar.codabarType.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.codabarType = CSymbology.CCODABAR.ECodabarType.Standard
                                    Dim retValue As String = symb.Codabar.codabarType.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.startStopTransmit">
            <summary>Specifies start/stop transmission characters.</summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets start/stop transmission.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.startStopTransmit = CSymbology.CCODABAR.EStartStopTransmit.Disable;
                                        string retValue = symb.Codabar.startStopTransmit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.startStopTransmit = CSymbology.CCODABAR.EStartStopTransmit.Disable
                                    Dim retValue As String = symb.Codabar.startStopTransmit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.CLSILibrarySystem">
            <summary>
            Set to true to enable Codabar CLSI library systme, 
            or set to false to disable the library system.
            </summary>
            <remarks>
            The CLSI library system for Codabar inserts spaces after characters 1, 5, 
            and 10 in the 14-character label. Start/stop characters can be transmitted 
            or not transmitted as required. This system is used by some libraries in the USA.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <para>The 39990000192148 is transmitted as 3 9990 00019 2148</para>
            This example enables Codabar CLSI Library System and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.CLSILibrarySystem = true;
                                        string retValue = symb.Codabar.CLSILibrarySystem.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.CLSILibrarySystem = True
                                    Dim retValue As String = symb.Codabar.CLSILibrarySystem.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.VerifyCheckDigit">
            <summary>
            Set to true to enable Codabar check digit verification, 
            or set to false to disable check digit verification.
            </summary>     
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Codabar check digit verification and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.VerifyCheckDigit = true;
                                        string retValue = symb.Codabar.VerifyCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.VerifyCheckDigit = True
                                    Dim retValue As String = symb.Codabar.VerifyCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.TransmitCheckDigit">
            <summary>
            Set to true to enable Codabar check digit transmission, 
            or set to false to disable check digit transmission.
            </summary>
            <remarks>
            Only applicable if check digit verification is enabled. 
            Lengths verification (see lengths Length1 Length2 Length3 length mode) 
            does not include check digit character.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables check digit verification and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.TransmitCheckDigit = true;
                                        string retValue = symb.Codabar.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.TransmitCheckDigit = True
                                    Dim retValue As String = symb.Codabar.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.transmitAbcStartStop">
            <summary>Specifies Codabar ABC start/stop Transmission.</summary>
            <remarks>
            Make sure the computer has been configured to use the Trakker 
            Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Codabar ABC Start/Stop Transmission.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.transmitAbcStartStop = true;
                                        string retValue = symb.Codabar.transmitAbcStartStop.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.transmitAbcStartStop = CSymbology.CCODABAR.ETransmitAbcStartStop.Discard
                                    Dim retValue As String = symb.Codabar.transmitAbcStartStop.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.transmitConcatStartStop">
            <summary>Specifies Codabar Concatenated Start/Stop Transmission.</summary>
            <remarks>
            Make sure the computer has been configured to use the Trakker 
            Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Codabar Concatenated Start/Stop Transmission.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.transmitConcatStartStop = CSymbology.CCODABAR.ETransmitConcatStartStop.Discard;
                                        string retValue = symb.Codabar.transmitConcatStartStop.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.transmitConcatStartStop = CSymbology.CCODABAR.ETransmitConcatStartStop.Discard
                                    Dim retValue As String = symb.Codabar.transmitConcatStartStop.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.concatenation">
            <summary>
            Specifies concatenation. Two adjacent Codabar codes scanned in 
            a single sweep can be concatenated and sent as a single message.
            </summary>
            <remarks>
            Codabar concatenation is applied according to the concatenation mode selected.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets concatenation.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.concatenation = CSymbology.CCODABAR.EConcatenation.Disable;
                                        string retValue = symb.Codabar.concatenation.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.concatenation = CSymbology.CCODABAR.EConcatenation.Disable
                                    Dim retValue As String = symb.Codabar.concatenation.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.concatenationMode">
            <summary>
            Specifies concatenation type. Concatenation is applied 
            differently depending on the concatenation mode.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Concatenation Mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.concatenationMode = CSymbology.CCODABAR.EConcatenationMode.NoRestriction;
                                        string retValue = symb.Codabar.concatenationMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.concatenationMode = CSymbology.CCODABAR.EConcatenationMode.NoRestriction
                                    Dim retValue As String = symb.Codabar.concatenationMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.lengthMode">
            <summary>
            Specifies acceptable bar code length. Length1, Length2, and Length3
            are used differently depending on the length mode.
            </summary>
            <remarks>
            Minimum length for Codabar is 3 characters. 
            Bar code length = &lt;start&gt; + &lt;bar code data&gt; + [check digit] + &lt;stop&gt;.
            When Length1, Length2, Length3 and length mode are set to 0, no length is 
            specified and any length of characters is accepted.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Length Mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.lengthMode = CSymbology.CCODABAR.ELengthMode.Length1Minimum;
                                        string retValue = symb.Codabar.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.lengthMode = CSymbology.CCODABAR.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Codabar.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.length1">
            <summary>
            Integer value specifying length1. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 1.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.length1 = 6;
                                        string retValue = symb.Codabar.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.length1 = 6
                                    Dim retValue As String = symb.Codabar.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.length2">
            <summary>
            Integer value specifying length2. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 2.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.length2 = 6;
                                        string retValue = symb.Codabar.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.length2 = 6
                                    Dim retValue As String = symb.Codabar.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.length3">
            <summary>
            Integer value specifying length3. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 3.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.length3 = 6;
                                        string retValue = symb.Codabar.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.length3 = 6
                                    Dim retValue As String = symb.Codabar.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been 
            configured to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.symbologyId = CSymbology.CCODABAR.ESymbologyId.UserDefined;
                                        string retValue = symb.Codabar.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.symbologyId = CSymbology.CCODABAR.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Codabar.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not
            using the AIM standard. The UDSI is transmitted as:[UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>
            The default user-defined symbology ID value is B7. 
            </para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Codabar.UserDefinedSymbologyId = "B7";
                                        string retValue = symb.Codabar.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Codabar.UserDefinedSymbologyId = "B7"
                                    Dim retValue As String = symb.Codabar.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABAR.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Codabar.CodeMark = "D";
                                        //get CodeMark value
                                        string strValue = symb.Codabar.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Codabar.CodeMark = "D"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Codabar.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABAR.ECodabarType">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODABAR.codabarType"/> property.</summary>
            <remarks>
            Make sure the computer has been configured to use the Trakker 
            Antares decode algorithm. 
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ECodabarType.Standard">
            <summary>Standard Codabar.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ECodabarType.Abc">
            <summary>ABC Codabar.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ECodabarType.Concatenated">
            <summary>Concatenated Codabar.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABAR.EStartStopTransmit">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODABAR.startStopTransmit"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EStartStopTransmit.Disable">
            <summary>Not transmitted.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EStartStopTransmit.a_b_c_d">
            <summary>a, b, c, d </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EStartStopTransmit.A_B_C_D">
            <summary>A, B, C, D</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EStartStopTransmit.a_b_c_d_t_n_asterick_e">
            <summary>a, b, c, d / t, n, *, e </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EStartStopTransmit.DC1_DC2_DC3_DC4">
            <summary>DC1, DC2, DC3, DC4</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABAR.ETransmitAbcStartStop">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODABAR.transmitAbcStartStop"/> property.</summary>
            <remarks>
            Make sure the computer has been configured to use the Trakker Antares 
            decode algorithm. 
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ETransmitAbcStartStop.Discard">
            <summary>Not transmitted.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ETransmitAbcStartStop.A_B_C_D">
            <summary>A,B,C,D </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ETransmitAbcStartStop.DC1_DC2_DC3_DC4">
            <summary>DC1,DC2,DC3,DC4</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABAR.ETransmitConcatStartStop">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODABAR.transmitConcatStartStop"/> property.</summary>
            <remarks>
            Make sure the computer has been configured to use the Trakker Antares 
            decode algorithm. 
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ETransmitConcatStartStop.Discard">
            <summary>Codabar Concatenated Start/Stop Transmission.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ETransmitConcatStartStop.A_B_C_D">
            <summary>A,B,C,D</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ETransmitConcatStartStop.DC1_DC2_DC3_DC4">
            <summary>DC1,DC2,DC3,DC4</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABAR.EConcatenation">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODABAR.concatenation"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EConcatenation.Disable">
            <summary>Disable Concatenation.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EConcatenation.TransmitConcatOnly">
            <summary>
            Only transmit concatenated codes are transmitted. Non-concatenated codes are ignored.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EConcatenation.TransmitConcatOrSingle">
            <summary>Transmit concatenated codes and non-concatenated codes.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABAR.EConcatenationMode">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODABAR.concatenationMode"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EConcatenationMode.NoRestriction">
            <summary>
            Concatenates all adjacent codes, intermediate start/stop 
            characters are not transmitted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EConcatenationMode.SecondCodeEquals1stCodeStart">
            <summary>
            First code stop = second code start. 
            </summary>
            <example>
            Only concatenates adjacent codes if the first code stop 
            character is the same as the second code start character 
            (C123456A + A123456D = 123456123456 or 
            C123456123456D if start/stop characters are transmitted).
            </example>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.EConcatenationMode.ABC">
            <summary>American Blood Commission (ABC).</summary>
            <example>
            Only concatenates adjacent codes if the stop character of 
            the first code = D and the start character of the second 
            code = D (C123456D + D123456A = 123456123456 or C123456123456A 
            if start/stop characters are transmitted).
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABAR.ELengthMode">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODABAR.lengthMode"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer 
            are read. Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by Length1, Length2 
            and Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by Length1 
            and not longer than the maximum length specified by Length2 are read. 
            Length3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABAR.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODABAR.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>F</term>
            <description>            
            <list type="bullet">
            <item>0: Standard Codabar symbol. No special processing.</item>
            <item>1: ABC (American Blood Commission) Codabar concatenate/message append performed.</item>
            <item>2: Reader has validated the check character.</item>
            <item>4: Reader has stripped the check character before transmission.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ESymbologyId.Disable">
            <summary>Disable Codabar symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODABAR.ESymbologyId.UserDefined">
            <summary>User Defined symbology ID.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE2OF5">
            <summary>
            Defines attributes for decoding the Code 2 of 5 symbology.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE2OF5.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE2OF5.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CCODE2OF5 class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.Enable">
            <summary>
            Set to true to enable Code 2 of 5 decoding, 
            or set to false to disable decoding.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible 
            for any barcode read. Some options can prevent from decoding 
            (Length, check digit).
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables code 2 of 5 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.Enable = true;
                                        string retValue = symb.Code2Of5.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.Enable = True
                                    Dim retValue As String = symb.Code2Of5.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.format">
            <summary>Specifies the Code 2 of 5 format type to decode.</summary>
            <remarks>            
            If setting the format to Computer Identics format, it is recommend 
            disabling Interleaved 2 of 5 symbology (risks of misreading between 
            both symbologies).
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets format type.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.format = CSymbology.CCODE2OF5.EFormat.Identicon_6S_sBars;
                                        string retValue = symb.Code2Of5.format.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.format = CSymbology.CCODE2OF5.EFormat.Identicon_6S_sBars
                                    Dim retValue As String = symb.Code2Of5.format.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.verifyCheckDigit">
            <summary>
            Specifies whether or not to verify Code 2 of 5 using a Modulo 10 algorithm. 
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Verify Check Digit.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.verifyCheckDigit = CSymbology.CCODE2OF5.EVerifyCheckDigit.Disable;
                                        string retValue = symb.Code2Of5.verifyCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.verifyCheckDigit = CSymbology.CCODE2OF5.EVerifyCheckDigit.Disable
                                    Dim retValue As String = symb.Code2Of5.verifyCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.TransmitCheckDigit">
            <summary>
            Set to true to enable Code 2 of 5 check digit transmission, 
            or set to false to disable check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables check digit transmission and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.TransmitCheckDigit = true;
                                        string retValue = symb.Code2Of5.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.TransmitCheckDigit = True
                                    Dim retValue As String = symb.Code2Of5.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.lengthMode">
            <summary>Specifies acceptable bar code length.</summary>
            <remarks>
            Length2, and length3 are used differently depending on the length mode.
            When Length1, Length2, Length3 and length mode are set to 0, no length is specified 
            and any length of characters is accepted.
            Minimum length for Standard 2 of 5 is 3 characters. 
            Bar code length = &lt;bar code data&gt; + [check digit]
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.lengthMode = CSymbology.CCODE2OF5.ELengthMode.Length1Minimum;
                                        string retValue = symb.Code2Of5.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.lengthMode = CSymbology.CCODE2OF5.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Code2Of5.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.length1">
            <summary>
            Integer value specifying bar code length 1. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 1.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.length1 = 6;
                                        string retValue = symb.Code2Of5.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.length1 = 6
                                    Dim retValue As String = symb.Code2Of5.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.length2">
            <summary>
            Integer value specifying bar code length 2. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 2.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.length2 = 6;
                                        string retValue = symb.Code2Of5.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.length2 = 6
                                    Dim retValue As String = symb.Code2Of5.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.length3">
            <summary>
            Integer value specifying bar code length 3. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 3.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.length3 = 6;
                                        string retValue = symb.Code2Of5.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.length3 = 6
                                    Dim retValue As String = symb.Code2Of5.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.symbologyId = CSymbology.CCODE2OF5.ESymbologyId.UserDefined;
                                        string retValue = symb.Code2Of5.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.symbologyId = CSymbology.CCODE2OF5.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Code2Of5.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not using 
            the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is B5.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code2Of5.UserDefinedSymbologyId = "B5";
                                        string retValue = symb.Code2Of5.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code2Of5.UserDefinedSymbologyId = "B5"
                                    Dim retValue As String = symb.Code2Of5.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE2OF5.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            Set Standard 2 of 5 code mark to "D"
            </example>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Code2Of5.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Code2Of5.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Code2Of5.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Code2Of5.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE2OF5.EFormat">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE2OF5.format"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.EFormat.Identicon_6S_sBars">
            <summary>Identicon (6 start/stop bars).</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.EFormat.CompIdentics_4S_sBars">
            <summary>Computer Identics (4 start/stop bars).</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE2OF5.EVerifyCheckDigit">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE2OF5.verifyCheckDigit"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.EVerifyCheckDigit.Disable">
            <summary>Disable Code 2 of 5 check digit verification.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.EVerifyCheckDigit.Modulo10">
            <summary>Code 2 of 5 check digit verification as modulo 10.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE2OF5.ELengthMode">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE2OF5.lengthMode"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer are 
            read. Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by Length1, 
            Length2 and Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by Length1 
            and not longer than the maximum length specified by Length2 are read. 
            Length3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE2OF5.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE2OF5.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>R</term>
            <description>            
            <list type="bullet">
            <item>0: No check character validation.</item>
            <item>1: Modulo 7 check character validated and transmitted.</item>
            <item>3: Modulo 7 check character validated but not transmitted.</item>
            </list>
            </description>
            </item>
            </list>
            <para>For 3-bar start-stop, using following character to specify a bar code symbology using the AIM format.</para>
            <para>Precede symbology ID characters with ']': </para>
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>S</term>
            <description>No options specified. Always transmit 0.</description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.ESymbologyId.Disable">
            <summary> No symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE2OF5.ESymbologyId.UserDefined">
            <summary>User-defined symbology ID.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMSI">
            <summary>Defines attributes for decoding the MSI symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CMSI.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CMSI.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CMSI class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.Enable">
            <summary>Set to true to enable MSI decoding, or set to false to disable decoding.</summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible for any 
            barcode read. Some options can prevent from decoding (Length, check digit..)
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables MSI and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Msi.Enable = true;
                                        string retValue = symb.Msi.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Msi.Enable = True
                                    Dim retValue As String = symb.Msi.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.verifyCheckDigit">
            <summary>Specifies MSI check digit verification type.</summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets check digit verification.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Msi.verifyCheckDigit = CSymbology.CMSI.EVerifyCheckDigit.Modulo10;
                                        string retValue = symb.Msi.verifyCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Msi.verifyCheckDigit = CSymbology.CMSI.EVerifyCheckDigit.Modulo10
                                    Dim retValue As String = symb.Msi.verifyCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.TransmitCheckDigit">
            <summary>
            Set to true to enable MSI code check digit transmission, 
            or set to false to disable transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables check digit transmission and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Msi.TransmitCheckDigit = true;
                                        string retValue = symb.Msi.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Msi.TransmitCheckDigit = True
                                    Dim retValue As String = symb.Msi.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.lengthMode">
            <summary>Specifies acceptable bar code length. </summary>
            <remarks>
            <para>
            Use Length1, Length2 and Length3 to compose acceptable bar code lengths 
            depending on the length mode used. Minimum length for MSI Code is 3 
            characters.
            Bar code length = &lt;bar code data&gt; + [check digit]
            </para>
            <note>When Length1, Length2, Length3 and length mode are set to 0, no 
            length is specified and any length of characters is accepted.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Msi.lengthMode = CSymbology.CMSI.ELengthMode.Length1Minimum;
                                        string retValue = symb.Msi.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Msi.lengthMode = CSymbology.CMSI.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Msi.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 - 255.
            </summary>
            <remarks>
            For computers using the 1400, 1551, 1551E, or 1800 scanners, range is 2 - 50.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 1.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Msi.length1 = 6;
                                        string retValue = symb.Msi.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Msi.length1 = 6
                                    Dim retValue As String = symb.Msi.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 - 255.
            </summary>
            <remarks>
            For computers using the 1400, 1551, 1551E, or 1800 scanners, range is 2 - 50.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 2.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Msi.length2 = 6;
                                        string retValue = symb.Msi.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Msi.length2 = 6
                                    Dim retValue As String = symb.Msi.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 - 255.
            </summary>
            <remarks>
            For computers using the 1400, 1551, 1551E, or 1800 scanners, range is 2 - 50.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 3.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Msi.length3 = 6;
                                        string retValue = symb.Msi.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Msi.length3 = 6
                                    Dim retValue As String = symb.Msi.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Msi.symbologyId = CSymbology.CMSI.ESymbologyId.UserDefined;
                                        string retValue = symb.Msi.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Msi.symbologyId = CSymbology.CMSI.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Msi.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if 
            not using the AIM standard. The UDSI is transmitted in the format 
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is B8.</para>
            <para>
            If there is no character and and symbology identifier transmission 
            is active, no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Msi.UserDefinedSymbologyId = "B8";
                                        string retValue = symb.Msi.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Msi.UserDefinedSymbologyId = "B8"
                                    Dim retValue As String = symb.Msi.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMSI.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Msi.CodeMark = "D";
                                        //get CodeMark value
                                        string strValue = symb.Msi.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Msi.CodeMark = "D"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Msi.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMSI.EVerifyCheckDigit">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CMSI.verifyCheckDigit"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMSI.EVerifyCheckDigit.Modulo10">
            <summary>
            Check digit usually used for MSI Code that applies the Modulo 10 algorithm.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMSI.EVerifyCheckDigit.DoubleModulo10">
            <summary>
            The MSI bar code has two Modulo 10 checksum digits.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMSI.ELengthMode">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CMSI.lengthMode"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMSI.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer are read. 
            Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMSI.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by Length1, Length2 and 
            Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMSI.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by Length1 and not 
            longer than the maximum length specified by Length2 are read. Length3 
            is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMSI.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CMSI.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>M</term>
            <description>            
            <list type="bullet">
            <item>0: Modulo 10 symbol check character validated and transmitted.</item>
            <item>1: Modulo 10 symbol check character validated but not transmitted.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMSI.ESymbologyId.Disable">
            <summary>No symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMSI.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMSI.ESymbologyId.UserDefined">
            <summary>User Defined symbology ID.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CPLESSEY">
            <summary>Defines attributes for decoding the Plessey symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CPLESSEY.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CPLESSEY.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CPLESSEY class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.Enable">
            <summary>
            Set to true to enable Plessey decoding, or set to false to disable decoding.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible for 
            any barcode read. Some options can prevent from decoding (Length)
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Plessey and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Plessey.Enable = true;
                                        string retValue = symb.Plessey.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Plessey.Enable = True
                                    Dim retValue As String = symb.Plessey.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.UnconventionalStop">
            <summary>
            Sets/Gets unconventional stop
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //Enable UnconventionalStop
                                        symb.Plessey.UnconventionalStop = CSymbology.CPLESSEY.EUnconventionalStop.Enable;
                                        //get UnconventionalStop status
                                        string strValue = symb.Plessey.UnconventionalStop.ToString();
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'Enable UnconventionalStop
                                    symb.Plessey.UnconventionalStop = CSymbology.CPLESSEY.EUnconventionalStop.Enable
                                    'get UnconventionalStop status
                                    Dim strValue As String = symb.Plessey.UnconventionalStop.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.TransmitCheckDigit">
            <summary>
            Set to true to enable Plessey code check digit transmission, 
            or set to false to disable transmission.
            </summary>
            <remarks>
            Check digit transmitted or not, do not impact length counts.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables check digit transmission and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Plessey.TransmitCheckDigit = true;
                                        string retValue = symb.Plessey.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Plessey.TransmitCheckDigit = True
                                    Dim retValue As String = symb.Plessey.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.lengthMode">
            <summary>Specifies acceptable bar code length.</summary>
            <remarks>
            <para>
            Use Length1, Length2 and Length3 to compose acceptable bar code lengths depending 
            on the length mode used. Minimum length for Plessey Code is 3 characters. 
            Bar code length = &lt;bar code data&gt; + [check digit]
            </para>
            <note>When Length1, Length2, Length3 and length mode are set to 0, no length is specified 
            and any length of characters is accepted.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Length Mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Plessey.lengthMode = CSymbology.CPLESSEY.ELengthMode.Length1Minimum;
                                        string retValue = symb.Plessey.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Plessey.lengthMode = CSymbology.CPLESSEY.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Plessey.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Length 1.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Plessey.length1 = 5;
                                        string retValue = symb.Plessey.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Plessey.length1 = 5
                                    Dim retValue As String = symb.Plessey.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Length 2.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Plessey.length2 = 5;
                                        string retValue = symb.Plessey.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Plessey.length2 = 5
                                    Dim retValue As String = symb.Plessey.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Length 3.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Plessey.length3 = 5;
                                        string retValue = symb.Plessey.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Plessey.length3 = 5
                                    Dim retValue As String = symb.Plessey.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been 
            configured to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Plessey.symbologyId = CSymbology.CPLESSEY.ESymbologyId.UserDefined;
                                        string retValue = symb.Plessey.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Plessey.symbologyId = CSymbology.CPLESSEY.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Plessey.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not 
            using the AIM standard. The UDSI is transmitted in the format
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is C2.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Plessey.UserDefinedSymbologyId = "C2";
                                        string retValue = symb.Plessey.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Plessey.UserDefinedSymbologyId = "C2"
                                    Dim retValue As String = symb.Plessey.UserDefinedSymbologyId.ToString()                    End Sub
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLESSEY.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>        
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Plessey.CodeMark = "D";
                                        //get CodeMark value
                                        string strValue = symb.Plessey.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Plessey.CodeMark = "D"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Plessey.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CPLESSEY.ELengthMode">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CPLESSEY.lengthMode"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPLESSEY.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer are read. 
            Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPLESSEY.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by Length1, Length2 and 
            Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPLESSEY.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by Length1 and not 
            longer than the maximum length specified by Length2 are read. Length3 
            is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CPLESSEY.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CPLESSEY.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>P</term>
            <description>No options specified. Always transmit 0.</description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPLESSEY.ESymbologyId.Disable">
            <summary>No symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPLESSEY.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPLESSEY.ESymbologyId.UserDefined">
            <summary>User Defined.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CPLESSEY.EUnconventionalStop">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CPLESSEY.UnconventionalStop"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPLESSEY.EUnconventionalStop.Disable">
            <summary>
            Disable Plessey Unconventional Stop
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPLESSEY.EUnconventionalStop.Enable">
            <summary>
            Enable Plessey Unconventional Stop
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE11">
            <summary>Defines attributes for decoding the Code 11 symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE11.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODE11.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CCODE11 class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.Enable">
            <summary>Set to true for enable Code11 decoding, or set to false for disable decoding.</summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible for any 
            barcode read. Some options can prevent from decoding (Length, check digit).
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Code 11 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code11.Enable = true;
                                        string retValue = symb.Code11.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code11.Enable = True
                                    Dim retValue As String = symb.Code11.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.verifyCheckDigit">
            <summary>
            Sets the number of check digits for Code 11 check digit verification.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets check digit verification.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code11.verifyCheckDigit = CSymbology.CCODE11.EVerifyCheckDigit.OneDigit;
                                        string retValue = symb.Code11.verifyCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code11.verifyCheckDigit = CSymbology.CCODE11.EVerifyCheckDigit.OneDigit
                                    Dim retValue As String = symb.Code11.verifyCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.TransmitCheckDigit">
            <summary>
            Set to true to enable Code 11 check digit transmission, 
            or set to false to disable check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets check digit transmission.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code11.TransmitCheckDigit = true;
                                        string retValue = symb.Code11.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code11.TransmitCheckDigit = True
                                    Dim retValue As String = symb.Code11.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.lengthMode">
            <summary>Specifies acceptable bar code length.</summary>
            <remarks>
            <para>
            Use Length1, Length2 and Length3 to compose acceptable bar code lengths depending on the 
            length mode used. Minimum length for Code 11 is 2 characters.
            Bar code length = &lt;bar code data&gt;
            </para>
            <note>
            When Length1, Length2, Length3 and length mode are set to 0, no length is 
            specified and any length of characters is accepted.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code11.lengthMode = CSymbology.CCODE11.ELengthMode.Length1Minimum;
                                        string retValue = symb.Code11.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code11.lengthMode = CSymbology.CCODE11.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Code11.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.length1">
            <summary>
            Integer value specifying bar code length 1. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 1.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code11.length1 = 2;
                                        string retValue = symb.Code11.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code11.length1 = 2
                                    Dim retValue As String = symb.Code11.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.length2">
            <summary>
            Integer value specifying bar code length 2. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 2.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code11.length2 = 2;
                                        string retValue = symb.Code11.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code11.length2 = 2
                                    Dim retValue As String = symb.Code11.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.length3">
            <summary>
            Integer value specifying bar code length 3. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 3.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code11.length3 = 2;
                                        string retValue = symb.Code11.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code11.length3 = 2
                                    Dim retValue As String = symb.Code11.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code11.symbologyId = CSymbology.CCODE11.ESymbologyId.UserDefined;
                                        string retValue = symb.Code11.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code11.symbologyId = CSymbology.CCODE11.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Code11.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format 
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>
            The default user-defined symbology ID value is C1. 
            </para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Code11.UserDefinedSymbologyId = "C1";
                                        string retValue = symb.Code11.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Code11.UserDefinedSymbologyId = "C1"
                                    Dim retValue As String = symb.Code11.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODE11.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Code11.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Code11.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Code11.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Code11.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE11.EVerifyCheckDigit">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE11.verifyCheckDigit"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE11.EVerifyCheckDigit.OneDigit">
            <summary>One digit.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE11.EVerifyCheckDigit.TwoDigits">
            <summary>Two digits.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE11.ELengthMode">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE11.lengthMode"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE11.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer are read. 
            Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE11.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by Length1, Length2 
            and Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE11.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by Length1 and not 
            longer than the maximum length specified by Length2 are read. Length3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODE11.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CCODE11.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>H</term>
            <description>            
            <list type="bullet">
            <item>0: Single modulo 11 check character validated and transmitted.</item>
            <item>1: Two modulo 11 check characters validated and transmitted.</item>
            <item>3: Check characters validated but not transmitted.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE11.ESymbologyId.Disable">
            <summary>No symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE11.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CCODE11.ESymbologyId.UserDefined">
            <summary>User Defined symbology ID.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMATRIX2OF5">
            <summary>
            Defines attributes for decoding the Matrix 2 of 5 symbology.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CMATRIX2OF5.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CMATRIX2OF5.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CMATRIX2OF5 class. </summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.Enable">
            <summary>
            Set to true to enable Matrix 2 of 5 decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Matrix 2 of 5 and gets setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Matrix2Of5.Enable = true;
                                        string retValue = symb.Matrix2Of5.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Matrix2Of5.Enable = True
                                    Dim retValue As String = symb.Matrix2Of5.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.StartStop">
            <summary>Sets Start and Stop Type.</summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Start and Stop Type.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Matrix2Of5.StartStop = CSymbology.CMATRIX2OF5.EStartStop.Regular;
                                        string retValue = symb.Matrix2Of5.StartStop.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Matrix2Of5.StartStop = CSymbology.CMATRIX2OF5.EStartStop.Regular
                                    Dim retValue As String = symb.Matrix2Of5.StartStop.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.lengthMode">
            <summary>
            Specifies the length mode type. 
            </summary>
            <remarks>
            <para>
            Use Length1, Length2 and Length3 to compose acceptable bar code lengths
            depending on the length mode used. Minimum length for Matrix 2 of 5 is 
            3 characters. Bar code length = &lt;bar code data&gt;.
            </para>
            <note>When Length1, Length2, Length3 and length mode are set to 0, no 
            length is specified and any length of characters is accepted.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Length Mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Matrix2Of5.lengthMode = CSymbology.CMATRIX2OF5.ELengthMode.Length1Minimum;
                                        string retValue = symb.Matrix2Of5.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Matrix2Of5.lengthMode = CSymbology.CMATRIX2OF5.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Matrix2Of5.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Length 1.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Matrix2Of5.length1 = 6;
                                        string retValue = symb.Matrix2Of5.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Matrix2Of5.length1 = 6
                                    Dim retValue As String = symb.Matrix2Of5.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Length 2.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Matrix2Of5.length2 = 6;
                                        string retValue = symb.Matrix2Of5.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Matrix2Of5.length2 = 6
                                    Dim retValue As String = symb.Matrix2Of5.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Length 3.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Matrix2Of5.length3 = 6;
                                        string retValue = symb.Matrix2Of5.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Matrix2Of5.length3 = 6
                                    Dim retValue As String = symb.Matrix2Of5.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID
            if not using the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is B4.</para>
            <para>
            If there is no character and symbology identifier transmission is active,
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>      
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Matrix2Of5.UserDefinedSymbologyId = "B4";
                                        string retValue = symb.Matrix2Of5.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Matrix2Of5.UserDefinedSymbologyId = "B4"
                                    Dim retValue As String = symb.Matrix2Of5.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Matrix2Of5.CodeMark = "D";
                                        //get CodeMark value
                                        string strValue = symb.Matrix2Of5.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Matrix2Of5.CodeMark = "D"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Matrix2Of5.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMATRIX2OF5.EStartStop">
            <summary>An enum data tyep for the <see cref="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.StartStop"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMATRIX2OF5.EStartStop.Regular">
            <summary>
            Enable Start/stop characters and checksum are not transmitted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMATRIX2OF5.EStartStop.ChinaPost">
            <summary>
            Start/stop characters are not transmitted but the checksum is transmitted.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMATRIX2OF5.ELengthMode">
            <summary> An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CMATRIX2OF5.lengthMode"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMATRIX2OF5.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer are read. 
            Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMATRIX2OF5.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by Length1, Length2 and 
            Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMATRIX2OF5.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by Length1 and 
            not longer than the maximum length specified by Lenght2 are read. Length3 
            is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CTELEPEN">
            <summary> Defines attributes for decoding the Telepen symbology. </summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CTELEPEN.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CTELEPEN.#ctor(System.String)">
            <exclude /> 
            <summary>Contructor of CTELEPEN class</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTELEPEN.Enable">
            <summary>
            Set to true to enable Telepen decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Telepen and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Telepen.Enable = true;
                                        string retValue = symb.Telepen.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Telepen.Enable = True
                                    Dim retValue As String = symb.Telepen.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTELEPEN.format">
            <summary>
            Specifies ASCII or Numeric as the format type for Telepen.
            </summary>
            <remarks>
            With numeric format, the start stop and check digit remain unchanged like 
            characters with ASCII values between 0 and 16. Characters from 17 to 26 
            result to values from '0X' to '9X'. Values over 26, are obtained by 
            subtracting 27 to their ASCII value.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets format type.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Telepen.format = CSymbology.CTELEPEN.EFormat.Ascii;
                                        string retValue = symb.Telepen.format.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Telepen.format = CSymbology.CTELEPEN.EFormat.Ascii
                                    Dim retValue As String = symb.Telepen.format.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTELEPEN.lengthMode">
            <summary>
            Specifies the length mode type.
            </summary>
            <remarks>
            <para>
            Use Length1, Length2 and Length3 to compose acceptable bar code lengths depending 
            on the length mode used. Minimum length for MSI Code is 3 characters.
            Bar code length = &lt;bar code data&gt; + [check digit]
            </para>
            <note>When Length1, Length2, Length3 and length mode are set to 0, no length is specified 
            and any length of characters is accepted.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Telepen.lengthMode = CSymbology.CTELEPEN.ELengthMode.Length1Minimum;
                                        string retValue = symb.Telepen.lengthMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Telepen.lengthMode = CSymbology.CTELEPEN.ELengthMode.Length1Minimum
                                    Dim retValue As String = symb.Telepen.lengthMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTELEPEN.length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 1.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Telepen.length1 = 1;
                                        string retValue = symb.Telepen.length1.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Telepen.length1 = 1
                                    Dim retValue As String = symb.Telepen.length1.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTELEPEN.length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 2.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Telepen.length2 = 1;
                                        string retValue = symb.Telepen.length2.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Telepen.length2 = 1
                                    Dim retValue As String = symb.Telepen.length2.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTELEPEN.length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 - 255.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets length 3.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Telepen.length3 = 1;
                                        string retValue = symb.Telepen.length3.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Telepen.length3 = 1
                                    Dim retValue As String = symb.Telepen.length3.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTELEPEN.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format 
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is C6.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Telepen.UserDefinedSymbologyId = "C6";
                                        string retValue = symb.Telepen.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Telepen.UserDefinedSymbologyId = "C6"
                                    Dim retValue As String = symb.Telepen.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTELEPEN.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Telepen.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Telepen.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Telepen.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Telepen.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CTELEPEN.EFormat">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CTELEPEN.format"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CTELEPEN.EFormat.Ascii">
            <summary>ASCII</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CTELEPEN.EFormat.Numeric">
            <summary>Numeric</summary>                
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CTELEPEN.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CTELEPEN.lengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CTELEPEN.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer are read. 
            Length2 and Length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CTELEPEN.ELengthMode.Lengths1_2_3Fixed">
            <summary>
            Only codes that comply with the lengths specified by Length1, Length2 and 
            Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CTELEPEN.ELengthMode.Length1_minimum_Length2_maximum">
            <summary>
            Codes that are at least the minimum length specified by Length1 and not 
            longer than the maximum length specified by Length2 are read. Length3 
            is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CPDF417">
            <summary>Defines attributes for decoding the PDF417 symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CPDF417.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CPDF417.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of PDF417 class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.Enable">
            <summary>
            Set to true to enable PDF417 decoding, or set to false to disable decoding.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible for 
            any barcode read. Some options can prevent from decoding (Length)
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables PDF 417 and gets setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.Enable = true;
                                        string retValue = symb.Pdf417.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.Enable = True
                                    Dim retValue As String = symb.Pdf417.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.MacroPDFBuffered">
            <summary>
            Set to true to enable MacroPDF buffering, or set to false to disable it. When enabled, 
            multi-labeled PDF417 messages are stored in the scanner buffer until the 
            whole message has been read. Once it has been read it is transmitted. 
            Bar codes can be read in any order.
            </summary>	
            <remarks>
             MacroPDF buffering is not supported by the 1400, 1551, 1551E, or 1800 scanners.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables MacroPDF Buffered and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.MacroPDFBuffered = true;
                                        string retValue = symb.Pdf417.MacroPDFBuffered.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.MacroPDFBuffered = True
                                    Dim retValue As String = symb.Pdf417.MacroPDFBuffered.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.ControlHeaderTransmission">
            <summary>
            Set to true to enable Control header Transmission, or set to false to disable it.
            The control header is always transmitted when using Macro PDF417 UnBuffered.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Control Header Transmission and gets setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.ControlHeaderTransmission = true;
                                        string retValue = symb.Pdf417.ControlHeaderTransmission.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.ControlHeaderTransmission = True
                                    Dim retValue As String = symb.Pdf417.ControlHeaderTransmission.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.OptionalFieldsFileNameXmit">
            <summary>
            Set to true to enable file name transmission for Macro PDF417, or set to false to disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables file name transmission for Macro PDF417 and gets setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.OptionalFieldsFileNameXmit = true;
                                        string retValue = symb.Pdf417.OptionalFieldsFileNameXmit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.OptionalFieldsFileNameXmit = True
                                    Dim retValue As String = symb.Pdf417.OptionalFieldsFileNameXmit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.SegmentCountTransmitted">
            <summary>
            Set to true to enable segment count transmitted, or set to false to disable it.             
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables segment count transmitted and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.SegmentCountTransmitted = true;
                                        string retValue = symb.Pdf417.SegmentCountTransmitted.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.SegmentCountTransmitted = True
                                    Dim retValue As String = symb.Pdf417.SegmentCountTransmitted.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.TimeStampTransmitted">
            <summary>
            Set to true to enable time stamp transmitted, or set to false to disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables time stamp transmitted and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.TimeStampTransmitted = true;
                                        string retValue = symb.Pdf417.TimeStampTransmitted.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.TimeStampTransmitted = True
                                    Dim retValue As String = symb.Pdf417.TimeStampTransmitted.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.SenderTransmitted">
            <summary>
            Set to true to enable Sender Transmitted, or set to false to disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Sender Transmitted and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.SenderTransmitted = true;
                                        string retValue = symb.Pdf417.SenderTransmitted.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.SenderTransmitted = True
                                    Dim retValue As String = symb.Pdf417.SenderTransmitted.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.AddresseeTransmitted">
            <summary>
            Set to true to enable Addressee Transmitted, or set to false to disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Addressee Transmitted and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.AddresseeTransmitted = true;
                                        string retValue = symb.Pdf417.AddresseeTransmitted.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.AddresseeTransmitted = True
                                    Dim retValue As String = symb.Pdf417.AddresseeTransmitted.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.FileSizeTransmitted">
            <summary>
            Set to true to enable File Size Transmitted, or set to false to disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables File Size Transmitted and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.FileSizeTransmitted = true;
                                        string retValue = symb.Pdf417.FileSizeTransmitted.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.FileSizeTransmitted = True
                                    Dim retValue As String = symb.Pdf417.FileSizeTransmitted.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.ChecksumTransmitted">
            <summary>
            Set to true to enable Checksum Transmitted, or set to false to disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Checksum Transmitted and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.ChecksumTransmitted = true;
                                        string retValue = symb.Pdf417.ChecksumTransmitted.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.ChecksumTransmitted = True
                                    Dim retValue As String = symb.Pdf417.ChecksumTransmitted.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.symbologyId">
            <summary>
            Specifies symbology ID type.
            </summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.symbologyId = CSymbology.CPDF417.ESymbologyId.UserDefined;
                                        string retValue = symb.Pdf417.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.symbologyId = CSymbology.CPDF417.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Pdf417.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.PDFWithDataLengthID0">
            <summary>
            Enables Irregular PDF. When enabled, PDF417 labels with the symbology 
            length descriptor set to 0 can still be read. 
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example disables set PDF with Data Length ID to zero.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.PDFWithDataLengthID0 = CSymbology.CPDF417.EPDFWithDataLengthID0.Disable;
                                        string retValue = symb.Pdf417.PDFWithDataLengthID0.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.PDFWithDataLengthID0 = CSymbology.CPDF417.EPDFWithDataLengthID0.Disable
                                    Dim retValue As String = symb.Pdf417.PDFWithDataLengthID0.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format 
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is C7.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Pdf417.UserDefinedSymbologyId = "C7";
                                        string retValue = symb.Pdf417.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Pdf417.UserDefinedSymbologyId = "C7"
                                    Dim retValue As String = symb.Pdf417.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPDF417.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Pdf417.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Pdf417.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Pdf417.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Pdf417.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CPDF417.EPDFWithDataLengthID0">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CPDF417.PDFWithDataLengthID0"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPDF417.EPDFWithDataLengthID0.Disable">
            <summary>
            Disable Irregular PDF to read labels with symbol length descriptor set to 0.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPDF417.EPDFWithDataLengthID0.Enable">
            <summary>
            Enable Irregular PDF to read labels with symbol length descriptor set to 0.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CPDF417.ESymbologyId">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CPDF417.symbologyId"/> property.
            </summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>L</term>
            <description>            
            <list type="bullet">
            <item>0: Reader set to conform with protocol defined in 1994 PDF 417 specifications.</item>
            <item>1: Reader set to follow protocol of ENV 12925 for Extended Channel Interpretation (all data characters 92 doubled).</item>
            <item>2: Reader set to follow protocol of ENV 12925 for Basic Channel Interpretation (data characters 92 are not doubled).</item>
            <item>3: Code 128 emulation: implied FNC1 in first position.</item>
            <item>4: Code 128 emulation: implied FNC1 after initial letter or pair of digits.</item>
            <item>5: Code 128 emulation: no implied FNC1.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPDF417.ESymbologyId.Disable">
            <summary>Disable symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPDF417.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard symbology ID. </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CPDF417.ESymbologyId.UserDefined">
            <summary>User Defined symbology ID.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMICROPDF417">
            <summary>Defines attributes for decoding the MicroPDF417 symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CMICROPDF417.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CMICROPDF417.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CMICROPDF417 class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMICROPDF417.Enable">
            <summary>
            Set to true to enable Micro PDF417 decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Micro PDF417 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.MicroPDF417.Enable = true;
                                        string retValue = symb.MicroPDF417.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.MicroPDF417.Enable = True
                                    Dim retValue As String = symb.MicroPDF417.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMICROPDF417.MicroPDFCode128Emulation">
            <summary>
            Set to true to enable Micro PDF Code128 Emulation, or set to false to disable it.
            When enabled, this option constraints the MicroPDF characters set to 
            EAN128 Characters set. Transmission is identical to EAN128 (i.e. ]C1xxx)
            </summary>
            <remarks>
            If the option is enabled, and EAN128Idendifier is enabled, microPDF AIM 
            identifier will be forced to ]C1. If the option is enabled, and 
            EAN128Idendifier is disabled, AIM identifier will be ]L3. 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Micro PDF Code128 Emulation and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.MicroPDF417.MicroPDFCode128Emulation = true;
                                        string retValue = symb.MicroPDF417.MicroPDFCode128Emulation.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.MicroPDF417.MicroPDFCode128Emulation = True
                                    Dim retValue As String = symb.MicroPDF417.MicroPDFCode128Emulation.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMICROPDF417.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is C8.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.MicroPDF417.UserDefinedSymbologyId = "C8";
                                        string retValue = symb.MicroPDF417.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.MicroPDF417.UserDefinedSymbologyId = "C8"
                                    Dim retValue As String = symb.MicroPDF417.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMICROPDF417.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.MicroPDF417.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.MicroPDF417.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.MicroPDF417.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.MicroPDF417.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMAXICODE">
            <summary>Defines attributes for decoding the Maxicode symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CMAXICODE.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CMAXICODE.#ctor(System.String)">
            <exclude /> 
            <summary>Constrictor of CMAXICODE class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMAXICODE.Enable">
            <summary>
            Set to true to enable Maxicode decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enable Maxicode symbology and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Maxicode.Enable = true;
                                        string retValue = symb.Maxicode.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Maxicode.Enable = True
                                    Dim retValue As String = symb.Maxicode.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMAXICODE.Mode0">
            <summary>
            Set to true to enable Mode0, or set to false to disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enable Mode0 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Maxicode.Mode0 = true;
                                        string retValue = symb.Maxicode.Mode0.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Maxicode.Mode0 = True
                                    Dim retValue As String = symb.Maxicode.Mode0.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMAXICODE.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Maxicode.symbologyId = CSymbology.CMAXICODE.ESymbologyId.UserDefined;
                                        string retValue = symb.Maxicode.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Maxicode.symbologyId = CSymbology.CMAXICODE.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Maxicode.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMAXICODE.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not using 
            the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;           
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is D2.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Maxicode.UserDefinedSymbologyId = "D2";
                                        string retValue = symb.Maxicode.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Maxicode.UserDefinedSymbologyId = "D2"
                                    Dim retValue As String = symb.Maxicode.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CMAXICODE.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>            
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Maxicode.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Maxicode.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Maxicode.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Maxicode.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CMAXICODE.ESymbologyId">
            <summary>An enum data type of the <see cref="P:Intermec.DataCollection.CSymbology.CMAXICODE.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>U</term>
            <description>            
            <list type="bullet">
            <item>0: Symbol in Mode 4 or 5.</item>
            <item>1: Symbol in Mode 2 or 3.</item>
            <item>2: Symbol in Mode 4 or 5, ECI protocol implemented.</item>
            <item>3: Symbol in Mode 2 or 3, ECI protocol implemented in secondary message.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMAXICODE.ESymbologyId.Disable">
            <summary>Disable symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMAXICODE.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CMAXICODE.ESymbologyId.UserDefined">
            <summary>User Defined symbology ID.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CDATAMATRIX">
            <summary>Defines attributes for decoding the Data Matrix symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CDATAMATRIX.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string. </summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CDATAMATRIX.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CDATAMATRIX class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CDATAMATRIX.Enable">
            <summary>
            Set to true to enable Data Matrix decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enable Data Matrix symbology and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Datamatrix.Enable = true;
                                        string retValue = symb.Datamatrix.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Datamatrix.Enable = True
                                    Dim retValue As String = symb.Datamatrix.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CDATAMATRIX.MirroredLabels">
            <summary>
            Sets and Gets mirrored labels. When disabled, only normal labels are
            decoded. When enabled, mirrored labels can be read as well as normal
            labels.
            </summary> 
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //Enable MirroredLabels
                                        symb.Datamatrix.MirroredLabels = CSymbology.CDATAMATRIX.EMirroredLabels.Enable;
                                        //get MirroredLabels status
                                        string strValue = symb.Datamatrix.MirroredLabels.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'Enable MirroredLabels
                                    symb.Datamatrix.MirroredLabels = CSymbology.CDATAMATRIX.EMirroredLabels.Enable
                                    'get MirroredLabels status
                                    Dim strValue As String = symb.Datamatrix.MirroredLabels.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CDATAMATRIX.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Datamatrix.symbologyId = CSymbology.CDATAMATRIX.ESymbologyId.UserDefined;
                                        string retValue = symb.Datamatrix.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Datamatrix.symbologyId = CSymbology.CDATAMATRIX.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.Datamatrix.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CDATAMATRIX.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying user-defined symbology ID if not using the 
            AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is D0. </para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Datamatrix.UserDefinedSymbologyId = "D0";
                                        string retValue = symb.Datamatrix.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Datamatrix.UserDefinedSymbologyId = "D0"
                                    Dim retValue As String = symb.Datamatrix.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CDATAMATRIX.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>          
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Datamatrix.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Datamatrix.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Datamatrix.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Datamatrix.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CDATAMATRIX.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CDATAMATRIX.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>d</term>
            <description>            
            <list type="bullet">
            <item>0: ECC 000-140.</item>
            <item>1: ECC 200.</item>
            <item>2: ECC 200, FNC1 in first or fifth position.</item>
            <item>3: ECC 200, FNC1 in second or sixth position.</item>
            <item>4: ECC 200, ECI protocol implemented.</item>
            <item>5: ECC 200, FNC1 in first or fifth position, ECI protocol implemented.</item>
            <item>6: ECC 200, FNC1 in second or sixth position, ECI protocol implemented.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CDATAMATRIX.ESymbologyId.Disable">
            <summary>Disable Symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CDATAMATRIX.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard Symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CDATAMATRIX.ESymbologyId.UserDefined">
            <summary>User Defined Symbology ID.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CDATAMATRIX.EMirroredLabels">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CDATAMATRIX.MirroredLabels"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CDATAMATRIX.EMirroredLabels.Disable">
            <summary>
            Disable Mirrored Labels. Only normal labels are decoded
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CDATAMATRIX.EMirroredLabels.Enable">
            <summary>
            Enable Mirrored Labels. Mirrored labels can be read as well as normal labels.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CQRCODE">
            <summary>Defines attributes for decoding the QRCode symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CQRCODE.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CQRCODE.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CQRCODE class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CQRCODE.Enable">
            <summary>
            Set to true for enable QR code decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables QR code symbology.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.QrCode.Enable = true;
                                        string retValue = symb.QrCode.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.QrCode.Enable = True
                                    Dim retValue As String = symb.QrCode.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CQRCODE.ReverseVideo">
            <summary>
            Sets and Gets reverse video.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //Enable ReverseVideo
                                        symb.QrCode.ReverseVideo = CSymbology.CQRCODE.EReverseVideo.Normal;
                                        //get ReverseVideo status
                                        string strValue = symb.QrCode.ReverseVideo.ToString();
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'Enable ReverseVideo
                                    symb.QrCode.ReverseVideo = CSymbology.CQRCODE.EReverseVideo.Normal
                                    'get ReverseVideo status
                                    Dim strValue As String = symb.QrCode.ReverseVideo.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CQRCODE.UnconventionalQRCode">
            <summary>
            Sets and Gets unconventional QR Code.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //Enable UnconventionalQRCode
                                        symb.QrCode.UnconventionalQRCode = CSymbology.CQRCODE.EUnconventionalQRCode.Enable;
                                        //get UnconventionalQRCode status
                                        string strValue = symb.QrCode.UnconventionalQRCode.ToString();
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'Enable UnconventionalQRCode
                                    symb.QrCode.UnconventionalQRCode = CSymbology.CQRCODE.EUnconventionalQRCode.Enable
                                    'get UnconventionalQRCode status
                                    Dim strValue As String = symb.QrCode.UnconventionalQRCode.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CQRCODE.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.QrCode.symbologyId = CSymbology.CQRCODE.ESymbologyId.UserDefined;
                                        string retValue = symb.QrCode.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.QrCode.symbologyId = CSymbology.CQRCODE.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.QrCode.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CQRCODE.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is D1.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.QrCode.UserDefinedSymbologyId = "D1";
                                        string retValue = symb.QrCode.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.QrCode.UserDefinedSymbologyId = "D1"
                                    Dim retValue As String = symb.QrCode.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CQRCODE.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>          
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.QrCode.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.QrCode.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.QrCode.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.QrCode.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CQRCODE.ESymbologyId">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CQRCODE.symbologyId"/> property.
            </summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>Q</term>
            <description>            
            <list type="bullet">
            <item>0: Model 1 symbol.</item>
            <item>1: Model 2 symbol, ECI protocol not implemented.</item>
            <item>2: Model 2 symbol, ECI protocol implemented.</item>
            <item>3: Model 2 symbol, ECI protocol not implemented, FNC1 implied in first position.</item>
            <item>4: Model 2 symbol, ECI protocol implemented, FNC1 implied in first position.</item>
            <item>5: Model 2 symbol, ECI protocol not implemented, FNC1 implied in second position.</item>
            <item>6: Model 2 symbol, ECI protocol implemented, FNC1 implied in second positio.</item>
            </list>
            </description>
            </item>
            </list>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CQRCODE.ESymbologyId.Disable">
            <summary>Disable Symbology Id.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CQRCODE.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CQRCODE.ESymbologyId.UserDefined">
            <summary>User Defined.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CQRCODE.EReverseVideo">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CQRCODE.ReverseVideo"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CQRCODE.EReverseVideo.Normal">
            <summary>
            Used for decoding black bar codes printed on white background
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CQRCODE.EReverseVideo.Inverse">
            <summary>
            Used for decoding white bar codes printed on black background
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CQRCODE.EReverseVideo.Automatic">
            <summary>
            Both types of bar codes can be read
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CQRCODE.EUnconventionalQRCode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CQRCODE.UnconventionalQRCode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CQRCODE.EUnconventionalQRCode.Disable">
            <summary>
            The structured append label headers are transmitted in 
            accordance with ECI protocol.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CQRCODE.EUnconventionalQRCode.Enable">
            <summary>
            The label header is transmitted as the first 2 bytes of every symbol. 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CRSS14">
            <exclude /> 
            <summary>Deprecated, replaced by CGS1DATABAROMNIDIRECTIONAL class. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL">
            <summary>Defines attributes for decoding the GS1 DataBar Omni-Directional symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string. </summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CGS1DATABAROMNIDIRECTIONAL class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.Enable">
            <summary>
            Set to true to enable GS1 DataBar Omni-Directional decoding, or set to false to disable decoding.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible for any 
            barcode read. Some options can prevent from decoding (Length).
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GS1 DataBar Omni-Directional and gets setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1DataBarOmniDirectional.Enable = true;
                                        string retValue = symb.GS1DataBarOmniDirectional.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1DataBarOmniDirectional.Enable = True
                                    Dim retValue As String = symb.GS1DataBarOmniDirectional.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured to 
            use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology ID.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1DataBarOmniDirectional.symbologyId = CSymbology.CGS1DATABAROMNIDIRECTIONAL.ESymbologyId.UserDefined;
                                        string retValue = symb.GS1DataBarOmniDirectional.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1DataBarOmniDirectional.symbologyId = CSymbology.CGS1DATABAROMNIDIRECTIONAL.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.GS1DataBarOmniDirectional.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not 
            using the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is C3.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1DataBarOmniDirectional.UserDefinedSymbologyId = "C3";
                                        string retValue = symb.GS1DataBarOmniDirectional.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1DataBarOmniDirectional.UserDefinedSymbologyId = "C3"
                                    Dim retValue As String = symb.GS1DataBarOmniDirectional.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.GS1DataBarOmniDirectional.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.GS1DataBarOmniDirectional.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.GS1DataBarOmniDirectional.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.GS1DataBarOmniDirectional.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>e0</term>
            <description>None</description>
            </item>
            </list>
            <note>
            GS1 DataBar Omni-Directional is transmitted as ]e001abcde2, where: 
            <list type="bullet">
            <item>]e0 is the symbology ID.</item>
            <item>01 is the application identifier for item identification.</item>
            <item>abcde is the encoded data.</item>
            <item>2 is a check digit appended to the data string.</item>
            </list>
            </note>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.ESymbologyId.Disable">
            <summary>Disable Symbology Id.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1DATABAROMNIDIRECTIONAL.ESymbologyId.UserDefined">
            <summary>User Defined.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CRSSLIMITED">
            <exclude /> 
            <summary>Deprecated, replaced by CGS1DATABARLIMITED class</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED">
            <summary>Defines attributes for decoding the GS1 DataBar Limited symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CGS1DATABARLIMITED class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.Enable">
            <summary>
            True for enable GS1 DataBar Limited decoding, or false for disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GS1 DataBar Limited symbology.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1DataBarLimited.Enable = true;
                                        string retValue = symb.GS1DataBarLimited.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1DataBarLimited.Enable = True
                                    Dim retValue As String = symb.GS1DataBarLimited.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.symbologyId">
            <summary>Specifies type of symbology ID.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GS1 DataBar Limited symbology and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1DataBarLimited.symbologyId = CSymbology.CGS1DATABARLIMITED.ESymbologyId.UserDefined;
                                        string retValue = symb.GS1DataBarLimited.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1DataBarLimited.symbologyId = CSymbology.CGS1DATABARLIMITED.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.GS1DataBarLimited.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not 
            using the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is C4.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1DataBarLimited.UserDefinedSymbologyId = "C4";
                                        string retValue = symb.GS1DataBarLimited.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1DataBarLimited.UserDefinedSymbologyId = "C4"
                                    Dim retValue As String = symb.GS1DataBarLimited.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>          
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.GS1DataBarLimited.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.GS1DataBarLimited.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.GS1DataBarLimited.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.GS1DataBarLimited.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.ESymbologyId">
            <summary>An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.symbologyId"/> property.</summary>
            <remarks>
            Use following character to specify a bar code symbology using the AIM format. Precede symbology ID characters with ']': 
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Modifier Characters</description>
            </listheader>
            <item>
            <term>e0</term>
            <description>None</description>
            </item>
            </list>
            <note>
            GS1 DataBar Limited is transmitted as ]e001abcde2, where: 
            <list type="bullet">
            <item>]e0 is the symbology ID.</item>
            <item>01 is the application identifier for item identification.</item>
            <item>abcde is the encoded data.</item>
            <item>2 is a check digit appended to the data string.</item>
            </list>
            </note>
            <para>
            For more information, see the latest ISO/IEC Data Carrier/Symbology Identifiers 
            documentation. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.ESymbologyId.Disable">
            <summary>Disable Symbology Id.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1DATABARLIMITED.ESymbologyId.UserDefined">
            <summary>User Defined.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CRSSEXPANDED">
            <exclude /> 
            <summary>Deprecated, replaced by CGS1DATABAREXPANDED class.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED">
            <summary>Defines attributes for decoding the GS1 DataBar Expanded symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CGS1DATABAREXPANDED class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.Enable">
            <summary>
            Set to true to enable GS1 DataBar Expanded decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GS1 DataBar Expanded symbology and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1DataBarExpanded.Enable = true;
                                        string retValue = symb.GS1DataBarExpanded.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1DataBarExpanded.Enable = True
                                    Dim retValue As String = symb.GS1DataBarExpanded.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.symbologyId">
            <summary>Specifies symbology ID type.</summary>
            <remarks>
            Supported only by CK30 and CK31. Make sure the computer has been configured 
            to use the Trakker Antares decode algorithm.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets symbology ID.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1DataBarExpanded.symbologyId = CSymbology.CGS1DATABAREXPANDED.ESymbologyId.UserDefined;
                                        string retValue = symb.GS1DataBarExpanded.symbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1DataBarExpanded.symbologyId = CSymbology.CGS1DATABAREXPANDED.ESymbologyId.UserDefined
                                    Dim retValue As String = symb.GS1DataBarExpanded.symbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not using 
            the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is C5.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1DataBarExpanded.UserDefinedSymbologyId = "C5";
                                        string retValue = symb.GS1DataBarExpanded.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1DataBarExpanded.UserDefinedSymbologyId = "C5"
                                    Dim retValue As String = symb.GS1DataBarExpanded.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.GS1DataBarExpanded.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.GS1DataBarExpanded.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.GS1DataBarExpanded.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.GS1DataBarExpanded.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.ESymbologyId">
            <summary>An enum data type of the <see cref="P:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.symbologyId"/> property.</summary>
            <remarks>
            GS1 Data Bar Expanded symbols that exceed 48 data characters must be transmitted as 
            two or more separate messages. Each message must not exceed 48 characters and must 
            use ']C1' as the symbology ID. 
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.ESymbologyId.Disable">
            <summary>Disable symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.ESymbologyId.AIMISO_IECStandard">
            <summary>AIM ISO/IEC Standard symbology ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1DATABAREXPANDED.ESymbologyId.UserDefined">
            <summary>User Defined symbology ID. </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABLOCKA">
            <summary>Defines attributes for decoding the Codablock A symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODABLOCKA.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string. </summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODABLOCKA.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CCODABLOCKA class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABLOCKA.Enable">
            <summary>
            Set to true to enable Codablock A decoding, or set to false to disable decoding.
            </summary>
            <remarks>
            Codablock A is based on Code 39. To avoid confusion Intermec recommend disable 
            Code 39 when enabling Codablock A.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Codablock A and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.CodablockA.Enable = true;
                                        string retValue = symb.CodablockA.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.CodablockA.Enable = True
                                    Dim retValue As String = symb.CodablockA.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABLOCKA.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted as: [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>
            The default user-defined symbology ID value is K0. 
            </para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.CodablockA.UserDefinedSymbologyId = "K0";
                                        string retValue = symb.CodablockA.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.CodablockA.UserDefinedSymbologyId = "K0"
                                    Dim retValue As String = symb.CodablockA.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABLOCKA.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.CodablockA.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.CodablockA.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.CodablockA.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.CodablockA.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCODABLOCKF">
            <summary>Defines attributes for decoding the Codablock F symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODABLOCKF.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCODABLOCKF.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CCODABLOCKF class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABLOCKF.Enable">
            <summary>
            Set to true to enable Codablock F decoding, 
            or set to false to disable for disable decoding.
            </summary>
            <remarks>
            Codablock F is based on Code 128. To avoid confusion Intermec recommend 
            disable Code 128 when enabling Codablock F.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Codablock F and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.CodablockF.Enable = true;
                                        string retValue = symb.CodablockF.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.CodablockF.Enable = True
                                    Dim retValue As String = symb.CodablockF.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABLOCKF.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format 
            [UDSI symbology id] &lt;data&gt;
            </summary>	
            <remarks>
            <para>
            The default user-defined symbology ID value is K1. 
            </para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.CodablockF.UserDefinedSymbologyId = "";
                                        string retValue = symb.CodablockF.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.CodablockF.UserDefinedSymbologyId = "K1"
                                    Dim retValue As String = symb.CodablockF.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCODABLOCKF.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>            
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.CodablockF.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.CodablockF.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.CodablockF.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.CodablockF.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CUCCCOMPOSITE">
            <exclude /> 
            <summary>Deprecated, replaced by CGS1COMPOSITE class.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CGS1COMPOSITE">
            <summary>Defines attributes for decoding the GS1 Composite symbology.</summary>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CGS1COMPOSITE class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.Enable">
            <summary>
            Set to true to enable GS1 Composite A/B, or set to false to disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GS1 Composite A/B and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1Composite.Enable = true;
                                        string retValue = symb.GS1Composite.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1Composite.Enable = True
                                    Dim retValue As String = symb.GS1Composite.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EnableGS1CompositeC">
            <summary>
            Set to true to enable GS1 Composite C decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables GS1 Composite C and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1Composite.EnableGS1CompositeC = true;
                                        string retValue = symb.GS1Composite.EnableGS1CompositeC.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1Composite.EnableGS1CompositeC = True
                                    Dim retValue As String = symb.GS1Composite.EnableGS1CompositeC.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.LinearOnlyXmitMode">
            <summary>
            Set to true to enable Linear only transmission mode, or set to false to disable it.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Linear only transmission mode and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1Composite.LinearOnlyXmitMode = true;
                                        string retValue = symb.GS1Composite.LinearOnlyXmitMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1Composite.LinearOnlyXmitMode = True
                                    Dim retValue As String = symb.GS1Composite.LinearOnlyXmitMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EAN_UPCCompMsgDecode">
            <summary>
            Sets the manner in which the linear and stacked parts of the bar code are read.
            </summary>    
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets linear only transmit mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1Composite.EAN_UPCCompMsgDecode = CSymbology.CGS1COMPOSITE.EAN_UPCCompMsgDecodeType.Auto_discriminate;
                                        string retValue = symb.GS1Composite.EAN_UPCCompMsgDecode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1Composite.EAN_UPCCompMsgDecode = CSymbology.CGS1COMPOSITE.EAN_UPCCompMsgDecodeType.Auto_discriminate
                                    Dim retValue As String = symb.GS1Composite.EAN_UPCCompMsgDecode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.UnconventionalGS1Composite">
            <summary>
            Sets and gets unconventional GS1 Composite. 
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //Enable UnconventionalGS1Composite
                                        symb.GS1Composite.UnconventionalGS1Composite = CSymbology.CGS1COMPOSITE.EUnconventionalGS1Composite.Enable;
                                        //get UnconventionalGS1Composite status
                                        string strValue = symb.GS1Composite.UnconventionalGS1Composite.ToString();
            
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'Enable UnconventionalGS1Composite
                                    symb.GS1Composite.UnconventionalGS1Composite = CSymbology.CGS1COMPOSITE.EUnconventionalGS1Composite.Enable
                                    'get UnconventionalGS1Composite status
                                    Dim strValue As String = symb.GS1Composite.UnconventionalGS1Composite.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.A_B_UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID for GS1 Composite A/B 
            if not using the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is G0.</para>
            <para>
            If there is no character and symbology identifier transmission is active, no symbology 
            identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets A/B User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1Composite.A_B_UserDefinedSymbologyId = "G0";
                                        string retValue = symb.GS1Composite.A_B_UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1Composite.A_B_UserDefinedSymbologyId = "G0"
                                    Dim retValue As String = symb.GS1Composite.A_B_UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.A_B_CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>            
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.GS1Composite.A_B_CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.GS1Composite.A_B_CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.GS1Composite.A_B_CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.GS1Composite.A_B_CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.C_UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID for GS1 Composite C 
            if no using the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is G1.</para>
            <para>
            If there is no character and symbology identifier transmission is active, no symbology 
            identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets C User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.GS1Composite.C_UserDefinedSymbologyId = "G1";
                                        string retValue = symb.GS1Composite.C_UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.GS1Composite.C_UserDefinedSymbologyId = "G1"
                                    Dim retValue As String = symb.GS1Composite.C_UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.C_CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.GS1Composite.C_CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.GS1Composite.C_CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.GS1Composite.C_CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.GS1Composite.C_CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EAN_UPCCompMsgDecodeType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EAN_UPCCompMsgDecode"/> property. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EAN_UPCCompMsgDecodeType.Never_linked">
            <summary>
            The EAN/UPC bar code is not linked to the 2D composite component - 
            only the EAN/UPC bar code is transmitted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EAN_UPCCompMsgDecodeType.Always_linked">
            <summary>
            The EAN/UPC bar code is always linked to the 2D composite component - 
            both the EAN/UPC bar code and 2D composite component are transmitted. 
            If a 2D composite component is not present, the UPC bar code is not 
            transmitted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EAN_UPCCompMsgDecodeType.Auto_discriminate">
            <summary>
            Applies only to imagers. 
            The imager detects if there is a 2D composite component or not and 
            then transmits the data accordingly. This option allows the scanner 
            to send EAN/UPC bar codes only or both the EAN/UPC bar code with the 
            2D composite component if present.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EUnconventionalGS1Composite">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.UnconventionalGS1Composite"/> property. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EUnconventionalGS1Composite.Disable">
            <summary>
            Disable unconventional GS1 Composite
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CGS1COMPOSITE.EUnconventionalGS1Composite.Enable">
            <summary>
            Enable unconventional GS1 Composite
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CPOSTNET">
            <summary>Defines attributes for decoding the Postnet symbology.</summary>
            <remarks>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers such as the EA10, EA11, EA21, 
            or EX25.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CPOSTNET.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CPOSTNET.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CPOSTNET class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPOSTNET.Enable">
            <summary>
            Set to true to enable Postnet decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Postnet and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Postnet.Enable = this;
                                        string retValue = symb.Postnet.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Postnet.Enable = True
                                    Dim retValue As String = symb.Postnet.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPOSTNET.TransmitCheckDigit">
            <summary>
            Set to true to enable Postnet check digit transmission, 
            or set to false to disable transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables check digit transmission and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Postnet.TransmitCheckDigit = this;
                                        string retValue = symb.Postnet.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Postnet.TransmitCheckDigit = True
                                    Dim retValue As String = symb.Postnet.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPOSTNET.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is P0.</para>
            <para>
            If there is no character and symbology identifier transmission is active, no symbology 
            identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Postnet.UserDefinedSymbologyId = "P0";
                                        string retValue = symb.Postnet.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Postnet.UserDefinedSymbologyId = "P0"
                                    Dim retValue As String = symb.Postnet.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPOSTNET.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Planet.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Planet.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Planet.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Planet.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CPLANET">
            <summary>Defines attributes for decoding the Planet symbology.</summary>
            <remarks>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers such as the EA10, EA11, EA21, or EX25.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CPLANET.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CPLANET.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CPLANET class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLANET.Enable">
            <summary>
            Set to true to enable Planet decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Planet symbology and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Planet.Enable = true;
                                        string retValue = symb.Planet.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Planet.Enable = True
                                    Dim retValue As String = symb.Planet.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLANET.TransmitCheckDigit">
            <summary>
            Set to true to enable Planet check digit transmission, or set to false to disable transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables check digit transmission and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Planet.TransmitCheckDigit = true;
                                        string retValue = symb.Planet.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Planet.TransmitCheckDigit = True
                                    Dim retValue As String = symb.Planet.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLANET.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format 
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is P1.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Planet.UserDefinedSymbologyId = "P1";
                                        string retValue = symb.Planet.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Planet.UserDefinedSymbologyId = "P1"
                                    Dim retValue As String = symb.Planet.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CPLANET.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Planet.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Planet.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Planet.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Planet.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CBPO">
            <summary>Defines attributes for decoding the BPO(British Post Office) symbology.</summary>
            <remarks>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers such as the EA10, EA11, EA21,or EX25.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CBPO.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CBPO.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CBPO class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CBPO.Enable">
            <summary>
            set to true to enable decoding BPO(British Post Office) symbology, 
            or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables BPO and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Bpo.Enable = true;
                                        string retValue = symb.Bpo.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Bpo.Enable = True
                                    Dim retValue As String = symb.Bpo.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CBPO.TransmitCheckDigit">
            <summary>
            set to true to enable decoding BPO check digit transmission, 
            or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables BPO check digit transmission and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Bpo.TransmitCheckDigit = true;
                                        string retValue = symb.Bpo.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Bpo.TransmitCheckDigit = True
                                    Dim retValue As String = symb.Bpo.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CBPO.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not using the AIM standard.
            The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>
            The default user-defined symbology ID value is P2. 
            </para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Bpo.UserDefinedSymbologyId = "P2";
                                        string retValue = symb.Bpo.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Bpo.UserDefinedSymbologyId = "P2"
                                    Dim retValue As String = symb.Bpo.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CBPO.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Bpo.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Bpo.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Bpo.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Bpo.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CCANADAPOST">
            <summary>Defines attributes for decoding the Canada Post symbology.</summary>
            <remarks>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers such as the EA10, EA11, EA21 
            or EX25.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCANADAPOST.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CCANADAPOST.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CCANADAPOST class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCANADAPOST.Enable">
            <summary>
            Set to true to enable Canada post decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Canada post.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.CanadaPost.Enable = true;
                                        string retValue = symb.CanadaPost.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.CanadaPost.Enable = True
                                    Dim retValue As String = symb.CanadaPost.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCANADAPOST.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not using the AIM standard.
            </summary>
            <remarks>
            The default user-defined symbology ID value is P6. 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.CanadaPost.UserDefinedSymbologyId = "P3";
                                        string retValue = symb.CanadaPost.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.CanadaPost.UserDefinedSymbologyId = "P6"
                                    Dim retValue As String = symb.CanadaPost.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CCANADAPOST.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.CanadaPost.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.CanadaPost.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.CanadaPost.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.CanadaPost.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CAUSTRALIAPOST">
            <summary>Defines attributes for decoding the Australia Post symbology.</summary>
            <remarks>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers such as the EA10, EA11, EA21 
            or EX25.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CAUSTRALIAPOST.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CAUSTRALIAPOST.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CAUSTRALIAPOST class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAUSTRALIAPOST.Enable">
            <summary>
            Set to true to enable Australian Post decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Australian Post and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.AustraliaPost.Enable = true;
                                        string retValue = symb.AustraliaPost.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.AustraliaPost.Enable = True
                                    Dim retValue As String = symb.AustraliaPost.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAUSTRALIAPOST.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not 
            using the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;.
            </summary>
            <remarks>
            <para>
            The default user-defined symbology ID value is P3. 
            </para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.AustraliaPost.UserDefinedSymbologyId = "P3";
                                        string retValue = symb.AustraliaPost.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.AustraliaPost.UserDefinedSymbologyId = "P3"
                                    Dim retValue As String = symb.AustraliaPost.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAUSTRALIAPOST.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.AustraliaPost.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.AustraliaPost.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.AustraliaPost.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.AustraliaPost.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CJAPANPOST">
            <summary>Defines attributes for decoding the Japan Post symbology.</summary>
            <remarks>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers such as the EA10, EA11, EA21 
            or EX25.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CJAPANPOST.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CJAPANPOST.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CJAPANPOST class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CJAPANPOST.Enable">
            <summary>
            Set to true to enable Japan Post decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Japan Post and gets setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.JapanPost.Enable = true;
                                        string retValue = symb.JapanPost.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.JapanPost.Enable = True
                                    Dim retValue As String = symb.JapanPost.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CJAPANPOST.TransmitCheckDigit">
            <summary>
            Set to true to enable Japan Post Check Digit Transmission, 
            or set to false to disable transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Check Digit Transmission and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.JapanPost.TransmitCheckDigit = true;
                                        string retValue = symb.JapanPost.TransmitCheckDigit.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.JapanPost.TransmitCheckDigit = True
                                    Dim retValue As String = symb.JapanPost.TransmitCheckDigit.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CJAPANPOST.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not 
            using the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is P5.</para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.JapanPost.UserDefinedSymbologyId = "P5";
                                        string retValue = symb.JapanPost.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.JapanPost.UserDefinedSymbologyId = "P5"
                                    Dim retValue As String = symb.JapanPost.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CJAPANPOST.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>            
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.JapanPost.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.JapanPost.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.JapanPost.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.JapanPost.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CDUTCHPOST">
            <summary>Defines attributes for decoding the Dutch Post symbology.</summary>
            <remarks>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers such as the EA10, EA11, EA21 
            or EX25.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CDUTCHPOST.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CDUTCHPOST.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CDUTCHPOST class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CDUTCHPOST.Enable">
            <summary>
            Set to true to enable Dutch Post decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Dutch Post and gets setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.DutchPost.Enable = true;
                                        string retValue = symb.DutchPost.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.DutchPost.Enable = True
                                    Dim retValue As String = symb.DutchPost.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CDUTCHPOST.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not using the 
            AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is P4.</para>
            <para>
            If there is no characte and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.DutchPost.UserDefinedSymbologyId = "P4";
                                        string retValue = symb.DutchPost.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.DutchPost.UserDefinedSymbologyId = "P4"
                                    Dim retValue As String = symb.DutchPost.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CDUTCHPOST.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>          
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.DutchPost.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.DutchPost.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.DutchPost.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.DutchPost.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CAZTEC">
            <summary>Defines attributes for decoding the Aztec symbology.</summary>
            <remarks>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers such as the EA10, EA11, EA21 
            or EX25.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CAZTEC.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanne name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CAZTEC.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CAZTEC class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAZTEC.Enable">
            <summary>
            Set to true to enable Aztec decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Aztec and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Aztec.Enable = true;
                                        string retValue = symb.Aztec.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Aztec.Enable = True
                                    Dim retValue As String = symb.Aztec.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAZTEC.StructuredAppendMode">
            <summary>
            Specify Aztec Structure Append Mode type.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Structure Append Mode.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Aztec.StructuredAppendMode = CSymbology.CAZTEC.EStructuredAppendMode.Disable;
                                        string retValue = symb.Aztec.StructuredAppendMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Aztec.StructuredAppendMode = CSymbology.CAZTEC.EStructuredAppendMode.Disable
                                    Dim retValue As String = symb.Aztec.StructuredAppendMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAZTEC.Runes">
            <summary>
            Specify Aztec Runes type.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets Runes.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Aztec.Runes = CSymbology.CAZTEC.ERunes.Disable;
                                        string retValue = symb.Aztec.Runes.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Aztec.Runes = CSymbology.CAZTEC.ERunes.Disable
                                    Dim retValue As String = symb.Aztec.Runes.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAZTEC.EAN128Emulation">
            <exclude /> 
            <summary>Deprecated. Replaced by GS1_128Emulation.</summary>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAZTEC.GS1_128Emulation">
            <summary>
            Specify Aztec GS1-128 emulation type.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets GS1-128 emulation.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Aztec.GS1_128Emulation = CSymbology.CAZTEC.EGS1_128Emulation.Disable;
                                        string retValue = symb.Aztec.GS1_128Emulation.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Aztec.GS1_128Emulation = CSymbology.CAZTEC.EGS1_128Emulation.Disable
                                    Dim retValue As String = symb.Aztec.GS1_128Emulation.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAZTEC.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID if not using AIM standard.
            The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>
            The default user-defined symbology ID value is D3. 
            </para>
            <para>
            If there is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only. 
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Aztec.UserDefinedSymbologyId = "D3";
                                        string retValue = symb.Aztec.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Aztec.UserDefinedSymbologyId = "D3"
                                    Dim retValue As String = symb.Aztec.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CAZTEC.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Aztec.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Aztec.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Aztec.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Aztec.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CAZTEC.EStructuredAppendMode">
            <summary>
            A enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CAZTEC.StructuredAppendMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CAZTEC.EStructuredAppendMode.Disable">
            <summary>Disable Aztec structure append mode.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CAZTEC.EStructuredAppendMode.Enable">
            <summary>Aztec structured append header is used instead of ECI.</summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CAZTEC.ERunes">
            <summary>A enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CAZTEC.Runes"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CAZTEC.ERunes.Disable">
            <summary>Disable Aztec Runes.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CAZTEC.ERunes.Enable">
            <summary>
            Enabled decoding of Aztec runes (special symbols).
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CAZTEC.EEAN128Emulation">
            <exclude /> 
            <summary>Deprecated. Replaced by EGS1_128Emulation.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CAZTEC.EEAN128Emulation.Disable">
            <summary>Disable Aztec EAN 128 Emulation.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CAZTEC.EEAN128Emulation.Enable">
            <summary>
            AZTEC with FNC1 preceding 1st message character receive ]C1 symbology identifier
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CAZTEC.EGS1_128Emulation">
            <summary>A enum data type for the <see cref="P:Intermec.DataCollection.CSymbology.CAZTEC.GS1_128Emulation"/> property.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CAZTEC.EGS1_128Emulation.Disable">
            <summary>Disable Aztec EAN 128 emulation.</summary>
        </member>
        <member name="F:Intermec.DataCollection.CSymbology.CAZTEC.EGS1_128Emulation.Enable">
            <summary>
            AZTEC with FNC1 preceding 1st message character receive ]C1 symbology identifier
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CTLC39">
            <summary>Defines attributes for decoding the TLC39 symbology.</summary>
            <remarks>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers such as the EA10, EA11, EA21 
            or EX25.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CTLC39.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CTLC39.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CTLC39 class. </summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTLC39.Enable">
            <summary>
            Set to true to enable TLC39 decoding, or set to false to disable decoding.
            </summary>
            <remarks>
            To activate TLC 39, you must also activate Micro PDF417 and Code 39
            When TLC39 is activated, extended range on standard code 39 is no more available
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables TLC 39 and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Tlc39.Enable = true;
                                        string retValue = symb.Tlc39.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Tlc39.Enable = True
                                    Dim retValue As String = symb.Tlc39.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTLC39.LinearOnlyXmitMode">
            <summary>
            Set to true to enableTLC 39 Linear Only Transmission Mode, 
            or set to false to disable it.
            </summary>
            <remarks>
            In this mode, only data from the Code 39 label is transmitted and the Micro 
            PDF417 data is ignored.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Linear Only Transmission Mode and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Tlc39.LinearOnlyXmitMode = true;
                                        string retValue = symb.Tlc39.LinearOnlyXmitMode.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Tlc39.LinearOnlyXmitMode = True
                                    Dim retValue As String = symb.Tlc39.LinearOnlyXmitMode.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTLC39.ECISecurity">
            <summary>
            Integer value specifying the security. Range is 0 to 100.
            </summary>
            <remarks>
            Security operated on TLC39 reading if ECI has been found and code 39 enabled. 
            If code is 6 digit, will attempt to decode a TLC39 ECI part with more security. 
            Greater is the value, more secure will be the decoding but decoding will be 
            less snappy.
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets security.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Tlc39.ECISecurity = 10;
                                        string retValue = symb.Tlc39.ECISecurity.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Tlc39.ECISecurity = 10
                                    Dim retValue As String = symb.Tlc39.ECISecurity.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTLC39.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format 
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is H0.</para>
            <para>
            If there no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Tlc39.UserDefinedSymbologyId = "H0";
                                        string retValue = symb.Tlc39.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Tlc39.UserDefinedSymbologyId = "H0"
                                    Dim retValue As String = symb.Tlc39.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CTLC39.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Tlc39.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Tlc39.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Tlc39.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Tlc39.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CSWEDENPOST">
            <summary>Defines attributes for decoding the Sweden Post symbology.</summary>
            <remarks>
            This class requires Sweden Post is supported in Intermec Settings.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CSWEDENPOST.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CSWEDENPOST.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CSWEDENPOST class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CSWEDENPOST.Enable">
            <summary>
            Set to true to enable Sweden Post decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Sweden Post and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.SwedenPost.Enable = true;
                                        string retValue = symb.SwedenPost.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.SwedenPost.Enable = True
                                    Dim retValue As String = symb.SwedenPost.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CSWEDENPOST.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format
            [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is P7.</para>
            <para>
            If there  is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Sweden Post and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.SwedenPost.UserDefinedSymbologyId = "P7";
                                        string retValue = symb.SwedenPost.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.SwedenPost.UserDefinedSymbologyId = "P7"
                                    Dim retValue As String = symb.SwedenPost.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CSWEDENPOST.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>           
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.SwedenPost.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.SwedenPost.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.SwedenPost.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.SwedenPost.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CINFOMAIL">
            <summary>Defines attributes for decoding the Infomail symbology.</summary>
            <remarks>
            This class requires Infomail is supported in Intermec Settings.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CINFOMAIL.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CINFOMAIL.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CINFOMAIL class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINFOMAIL.Enable">
            <summary>
            Set to true to enable Infomail decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Infomail and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Infomail.Enable = true;
                                        string retValue = symb.Infomail.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Infomail.Enable = True
                                    Dim retValue As String = symb.Infomail.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINFOMAIL.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is P8.</para>
            <para>
            If there  is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.Infomail.UserDefinedSymbologyId = "P8";
                                        string retValue = symb.Infomail.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.Infomail.UserDefinedSymbologyId = "P8"
                                    Dim retValue As String = symb.Infomail.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINFOMAIL.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>            
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.Infomail.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.Infomail.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.Infomail.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.Infomail.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CINTELLIGENTMAIL">
            <summary>
            Defines attributes for decoding the IntelligentMail symbology
            </summary>
            <remarks>
            This class requires IntelligentMail is supported in Intermec Settings.
            </remarks> 
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CINTELLIGENTMAIL.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CINTELLIGENTMAIL.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CINTELLIGENTMAIL class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTELLIGENTMAIL.Enable">
            <summary>
            Enables and disables Intelligent Mail
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //Enable IntelligentMail
                                        symb.IntelligentMail.Enable = true;
                                        //get IntelligentMail status
                                        string strValue = symb.IntelligentMail.Enable.ToString();
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'Enable IntelligentMail
                                    symb.IntelligentMail.Enable = True
                                    'get IntelligentMail status
                                    Dim strValue As String = symb.IntelligentMail.Enable.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTELLIGENTMAIL.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 characters) specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI symbology id]&lt;data&gt;.
            </summary>
            <remarks> 
            <para>The default user-defined symbology ID value is B1.</para>
            <para>
            In order to transmitted the custom identifier, the symbology identifier 
            transmission must be enabled. If the UDSI has zero character and symbolgoy identifier 
            transmission is enabled, no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set UserDefinedSymbologyId
                                        symb.IntelligentMail.UserDefinedSymbologyId = "B1";
                                        //get UserDefinedSymbologyId value
                                        string strValue = symb.IntelligentMail.UserDefinedSymbologyId.ToString();
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set UserDefinedSymbologyId
                                    symb.IntelligentMail.UserDefinedSymbologyId = "B1"
                                    'get UserDefinedSymbologyId value
                                    Dim strValue As String = symb.IntelligentMail.UserDefinedSymbologyId.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CINTELLIGENTMAIL.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.IntelligentMail.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.IntelligentMail.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.IntelligentMail.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.IntelligentMail.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.CSymbology.CHANXIN">
            <summary>Defines attributes for decoding the Han Xin symbology.</summary>
            <remarks>
            This class requires Infomail is supported in Intermec Settings.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CHANXIN.setScannerPort(System.String)">
            <exclude /> 
            <summary>Sets scanner name string.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="M:Intermec.DataCollection.CSymbology.CHANXIN.#ctor(System.String)">
            <exclude /> 
            <summary>Constructor of CHANXIN class.</summary>
            <param name="scannerPort">Scanner name</param>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CHANXIN.Enable">
            <summary>
            Set to true to enable Han Xin decoding, or set to false to disable decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example enables Han Xin and retrieves setting.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.HanXin.Enable = true;
                                        string retValue = symb.HanXin.Enable.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.HanXin.Enable = True
                                    Dim retValue As String = symb.HanXin.Enable.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CHANXIN.UserDefinedSymbologyId">
            <summary>
            String (0 to 4 ASCII characters) specifying a user-defined symbology ID 
            if not using the AIM standard. The UDSI is transmitted in the format [UDSI symbology id] &lt;data&gt;
            </summary>
            <remarks>
            <para>The default user-defined symbology ID value is P8.</para>
            <para>
            If there  is no character and symbology identifier transmission is active, 
            no symbology identifier will be sent for this symbology only.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>
            <example>
            This example sets and gets User Defined Symbology Id.
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();           
                                        symb = new CSymbology(); 
                                        symb.HanXin.UserDefinedSymbologyId = "D4";
                                        string retValue = symb.HanXin.UserDefinedSymbologyId.ToString();
                                    }
                                }
                             }
                            </code> 
                            <code lang="VB.NET">
                             Imports Intermec.DataCollection
                             Public Class frmCSymbology
                                Private symb As Intermec.DataCollection.CSymbology
                                Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
                                    symb.HanXin.UserDefinedSymbologyId = "D4"
                                    Dim retValue As String = symb.HanXin.UserDefinedSymbologyId.ToString()
                                End Sub
                             End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.CSymbology.CHANXIN.CodeMark">
            <summary>
            Compose a one character code mark sysmbology
            identifier for this symbology. The code mark is transmitted as following:
            [code mark symbology id]&lt;data&gt;.
            </summary>
            <remarks>
            Allows 1 ASCII character, or 1 non-printable ASCII character such as "\x12". 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true.
            </exception>            
            <example>
            <code>
                            using Intermec.DataCollection;
                            namespace DataCollection
                            {
                                public partial class frmCSymbology : Form
                                {
                                    private Intermec.DataCollection.CSymbology symb;
                                    public frmCSymbology()
                                    {
                                        InitializeComponent();
                                        symb = new CSymbology();
            
                                        //set CodeMark
                                        symb.HanXin.CodeMark = "*";
                                        //get CodeMark value
                                        string strValue = symb.HanXin.CodeMark.ToString(); 
                                    }
                                }
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection
                            Public Class frmCSymbology
                               Private symb As Intermec.DataCollection.CSymbology
                               Private Sub frmCSymbology_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    symb = New CSymbology()
            
                                    'set CodeMark
                                    symb.HanXin.CodeMark = "*"
                                    'get CodeMark value
                                    Dim strValue As String = symb.HanXin.CodeMark.ToString()
                               End Sub
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.ImagerException">
            <summary>
            This class is the exception thrown by the <see cref="T:Intermec.DataCollection.Imager"/> class. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.ImagerException.hResult">
            <summary>Stores value of error.</summary>
        </member>
        <member name="M:Intermec.DataCollection.ImagerException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImagerException"/> class.
            </summary>
            <param name="hResult">Error value of the error.</param>
            <param name="Message">String describing the error.</param>
            <example>
            <para>
            <b><i>Common Exceptions</i></b>
            <list type="table">
            <listheader>
            <term>hResult</term>
            <description>Message</description>
            <description>Solution</description>
            </listheader>
            <item>
            <term>-4</term>
            <description>An Imager instance is already running. Please close that instance.</description>
            <description>Close the instance that is already running.</description>
            </item>
            <item>
            <term>-5</term>
            <description>Imager is disabled by policy.</description>
            <description>Close the application.</description>
            </item>
            <item>
            <term>-6</term>
            <description>Can not open Imager.</description>
            <description>Close the application.</description>
            </item>
            <item>
            <term>N/A</term>
            <description>Exception in Imager COM wrapper hResult.</description>
            <description>
            Make sure that the Intermec computer has an imager and that ITCImager.dll is in the 
            Windows directory of the computer.
            </description>
            </item>
            <item>
            <term>N/A</term>
            <description>Can't find PInvoke DLL 'ITCimager.DLL'.</description>
            <description>Make sure that ITCImager.dll is in the Windows directory of the computer.</description>
            </item>
            </list>
            </para>
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    try
                                    {            
                                        img = new Imager(pictureBox1);
                                    }
                                    catch (ImagerException imgexp)
                                    {
                                        MessageBox.Show(imgexp.Message);
                                    }
                                }
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try 
                                    img = New Imager(pictureBox1) 
                                Catch imgexp As ImagerException 
                                    MessageBox.Show(imgexp.Message) 
                                End Try 
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReadEventArgs">
            <summary>
            This member class of <see cref="T:Intermec.DataCollection.BarcodeReader"/> passes information from the BarcodeReader class to the 
            calling application when a BarcodeRead event is handled.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReadEventArgs.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor of the BarcodeReadEventArgs class. 
            </summary>
            <param name="InpDataBuffer">Buffer that contains the data read.</param>
            <param name="InpBytesInBuffer">Size of the data buffer in bytes.</param>
            <param name="InpSymbology">Deprecated. Replaced by InpSymbologyDetail</param>
            <param name="InpSymbologyDetail">Symbology of the read bar code.</param>
            <param name="InpDataType">Type of data: 1 (ASCII) or 2 (Unicode).</param>
            <remarks>
            See <see cref="F:Intermec.DataCollection.BarcodeReadEventArgs.SymbologyDetail"/> for the type of bar code symbology read. 
            </remarks>
            <example>
            This example uses BarcodeRead event with the default BarcodeReadEventArgs constructor.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();              
                                    bcr.BarcodeRead += new BarcodeReadEventHandler(bcr_BarcodeRead);
                                    bcr.ThreadedRead(true);
                                }       
                            }
                        
                            void bcr_BarcodeRead(object sender, BarcodeReadEventArgs bre)
                            {
                                this.listBox1.Items.Add(bre.strDataBuffer);
                                this.listBox1.Items.Add(bre.SymbologyDetail.ToString());
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                                bcr.ThreadedRead(True)
                            End Sub
                      
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                Me.ListBox1.Items.Add(bre.strDataBuffer)
                                Me.ListBox1.Items.Add(bre.SymbologyDetail.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReadEventArgs.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Intermec.DataCollection.Device)">
            <summary>
            Overload constructor for the BarcodeReadEventArgs class that includes information about 
            the scanner that read the bar code.
            </summary>
            <remarks>
            <para>
            This overload constructor works only if "AllScanners" is specified as the DeviceName in 
            the <see cref="T:Intermec.DataCollection.BarcodeReader"/> constructor.
            </para>
            <para>
            See <see cref="F:Intermec.DataCollection.BarcodeReadEventArgs.SymbologyDetail"/> for the type of bar code symbology read. 
            </para>
            </remarks>
            <param name="InpDataBuffer">Buffer that contains the data read.</param>
            <param name="InpBytesInBuffer">Size of the data buffer in bytes.</param>
            <param name="InpSymbology">Deprecated. Replaced by InpSymbologyDetail</param>
            <param name="InpSymbologyDetail">Symbology of the read bar code.</param>
            <param name="InpDataType">Type of data: 1 (ASCII) or 2 (Unicode).</param>
            <param name="inpDevice">A preconstructed instance of the <see cref="T:Intermec.DataCollection.Device"/> Class that includes 
            information about the scanner that read the bar code.
            </param>
            <example>
            This example uses BarcodeRead event with overload BarcodeReadEventArgs constructor.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("AllScanners");              
                                    bcr.BarcodeRead += new BarcodeReadEventHandler(bcr_BarcodeRead);
                                    bcr.ThreadedRead(true);
                                }       
                            }
                        
                            void bcr_BarcodeRead(object sender, BarcodeReadEventArgs bre)
                            {
                                this.listBox1.Items.Add(bre.strDataBuffer);
                                this.listBox1.Items.Add(bre.SymbologyDetail.ToString());
                                this.listBox1.Items.Add(bre.MyDevice.PortName);
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("AllScanners")
                                bcr.ThreadedRead(True)
                            End Sub
                      
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                Me.ListBox1.Items.Add(bre.strDataBuffer)
                                Me.ListBox1.Items.Add(bre.SymbologyDetail.ToString())
                                Me.ListBox1.Items.Add(bre.MyDevice.PortName)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReadEventArgs.MyDevice">
            <summary>Stores information about the scanner that read the bar code.</summary>
            <remarks>
            This field works only if "AllScanners" is specified as the ScannerName in the 
            <see cref="T:Intermec.DataCollection.BarcodeReader"/> constructor.
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReadEventArgs.DataBuffer">
            <summary>Stores the buffer that containing the data that was read.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReadEventArgs.BytesInBuffer">
            <summary>Stores the size in bytes of the data buffer.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReadEventArgs.Symbology">
            <exclude /> 
            <summary>Deprecated. Replaced by SymbologyDetail</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReadEventArgs.SymbologyDetail">
            <summary>Stores the symbology of the bar code that was read.</summary>
            <!-- Failed to insert some or all of included XML --><include file="document\SymbologyIdentifiers.xml" path="SymbologyIdentifiers/*"/>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReadEventArgs.DataType">
            <summary>Stores the type of data in the bar code.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReadEventArgs.strDataBuffer">
            <summary>Stores data in the buffer as a string. This value is null if conversion 
            to a string is not possible.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReadCancelEventArgs">
            <exclude /> 
            <summary>Deprecated.</summary>
        </member>
        <member name="T:Intermec.DataCollection.ScannerNotifyEventArgs">
            <summary>
            This member class of <see cref="T:Intermec.DataCollection.BarcodeReader"/> passes information about scanner events to 
            the application.
            </summary>
            <remarks>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multithreaded 
            operations. Any instance members are not guaranteed to be thread safe.
            </para>
            <note>
            The event handler works only if "AllScanners" is specified as the DeviceName in 
            the BarcodeReader constructor. 
            </note>
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.ScannerNotifyEventArgs.#ctor(System.Int32,System.Int32,Intermec.DataCollection.Device)">
            <summary>
            Creates an instance of  ScannerNotifyEventArgs class.
            </summary>
            <param name="InpGroupEvent">Type of scanner group event that has occurred.</param>
            <param name="InpPortState">Type of port state change that has occurred.</param>
            <param name="MyDevice">Instance of the <see cref="T:Intermec.DataCollection.Device"/> class used to track scanner information.</param>
            <example>
            This example uses ScannerNotify event.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("AllScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {  
                                this.listBox1.Items.Add("GroupEvent = " + sne.GroupEvent);
                                this.listBox1.Items.Add("PortState = " + sne.PortState.ToString());
                                this.listBox1.Items.Add("PortID = " + sne.DeviceInfo.PortID.ToString());
                                this.listBox1.Items.Add("PortName = " + sne.DeviceInfo.PortName.ToString());
                                this.listBox1.Items.Add("DeviceHandle = " + sne.DeviceInfo.DeviceHandle.ToString());
                                this.listBox1.Items.Add("DeviceType = " + sne.DeviceInfo.DeviceType.ToString());
                                   
                                if(bcr.Devices != null)
                                {
                                    foreach (Device myDevice in bcr.Devices)
                                    {
                                        //enables all Bluetooth scanners
                                        if (myDevice.FriendlyName.Length &gt; 0)
                                        {
                                            myDevice.ScannerEnable = true; 
                                        }
                                    }
                                }             
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("AllScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                Me.ListBox1.Items.Add("GroupEvent = " + sne.GroupEvent.ToString())
                                Me.ListBox1.Items.Add("PortState = " + sne.PortState.ToString())
                                Me.ListBox1.Items.Add("PortID = " + sne.DeviceInfo.PortID.ToString())
                                Me.ListBox1.Items.Add("PortName = " + sne.DeviceInfo.PortName.ToString())
                                Me.ListBox1.Items.Add("DeviceHandle = " + sne.DeviceInfo.DeviceHandle.ToString())
                                Me.ListBox1.Items.Add("DeviceType = " + sne.DeviceInfo.DeviceType.ToString())
            
                                If bcr.Devices Is Nothing Then
                                    'do nothing
                                Else
                                    Dim myDevice As Device
                                    For Each myDevice In bcr.Devices
                                        'enables all Bluetooth scanners
                                        If myDevice.FriendlyName.Length &gt; 0 Then
                                            myDevice.ScannerEnable = True
                                        End If
                                    Next
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection.ScannerNotifyEventArgs.GroupEvent">
            <summary>
            Identifies the type of scanner group event that has occurred. 
            </summary>
            <remarks>
            The NotifyGroupEvent enumeration is defined as: 
            <list type="bullet">
            <item>DeviceAdded: A device was added to the scanner group.</item>
            <item>DeviceRemoved: A device was removed from the scanner group.</item>
            <item>DevicePortStateChanged: The port state changed for a device in the scanner group.</item>
            </list>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.ScannerNotifyEventArgs.PortState">
            <summary>
            Identifies the type of port state change that has occurred. 
            Such as DeviceDisabled, DeviceEnabled, DeviceInoperative, DeviceDisconnected.
            </summary>
            <remarks>
            The NotifyGroupEvent enumeration is defined as:
            <list type="bullet">
            <item>DeviceDisabled: This device is disabled.</item>
            <item>DeviceEnabled: This device is enabled.</item>
            <item>DeviceInoperative: This device is inoperative.</item>
            <item>DeviceDisconnected: This device is disconnected.</item>
            </list>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.ScannerNotifyEventArgs.DeviceInfo">
            <summary>
            Instance of the Device class used to track scanner information.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReadErrorEventArgs">
            <summary>
            This member class of <see cref="T:Intermec.DataCollection.BarcodeReader"/> passes information about error events to 
            the application.
            </summary>
            <remarks>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multithreaded 
            operations. Any instance members are not guaranteed to be thread safe.
            </para>  
            </remarks>    
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReadErrorEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Event for notifying when an error has occurred. Such as insufficient response buffer size.
            </summary>
            <param name="errorCode">Error code</param>
            <param name="errorMessage">Error message</param>
            <example>
            This example uses BarcodeReadError event.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader(256);
                                    bcr.BarcodeRead += new BarcodeReadEventHandler(bcr_BarcodeRead);
                                    bcr.BarcodeReadError += new BarcodeReadErrorEventHandler(bcr_BarcodeReadError);
                                    bcr.ThreadedRead(true);
                                }       
                            }
                            
                            void bcr_BarcodeReadError(object sender, BarcodeReadErrorEventArgs breErr)
                            {  
                                this.listBox1.Items.Add("Error = " + breErr.errMessage.ToString());
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader(256)
                                bcr.ThreadedRead(true)
                            End Sub
                      
                            Private Sub bcr_BarcodeReadError(ByVal sender As Object, ByVal breErr As Intermec.DataCollection.BarcodeReadErrorEventArgs) Handles bcr.BarcodeReadError
                                listBox1.Items.Add("Error = " + breErr.errMessage.ToString())                    
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReadErrorEventArgs.errCode">
            <summary>
            Stores error code
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReadErrorEventArgs.errMessage">
            <summary>
            Stores error message
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.NoBarcodeReadEventArgs">
            <summary>
            This member class of <see cref="T:Intermec.DataCollection.BarcodeReader"/> passes information about no barcode read
            events to the application.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.NoBarcodeReadEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Event for indicating no barcode data read.
            </summary>
            <param name="errorCode">Error code</param>
            <param name="errorMessage">Error message</param>
            <example>
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();
                                    bcr.ThreadedRead(true);
                     
                                    bcr.EnableNoBarcodeReadEvent = true;
                                    bcr.NoBarcodeRead += new NoBarcodeReadEventHandler(bcr_NoBarcodeRead);
                                }       
                            }
                            
                            void bcr_NoBarcodeRead(object sender, NoBarcodeReadEventArgs noBre)
                            {                   
                                this.listBox1.Items.Add("noBre messge" + noBre.errMessage);                   
                            }                         
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                                bcr.ThreadedRead(true)
                            End Sub
                      
                            Private Sub bcr_NoBarcodeRead(ByVal sender As Object, ByVal noBre As Intermec.DataCollection.NoBarcodeReadEventArgs) Handles bcr.NoBarcodeRead
                                listBox1.Items.Add("noBre messge = " + noBre.errMessage.ToString())                    
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection.NoBarcodeReadEventArgs.errCode">
            <summary>
            Stores error code
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.NoBarcodeReadEventArgs.errMessage">
            <summary>
            Stores error message
            </summary>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReadEventHandler">
            <exclude />
            <summary>
            The BarcodeReadEventHandler delegate represents the method that will handle the 
            BarcodeReader event of BarcodeReadEventArgs class.
            </summary>
            <param name="sender">An object of System.Object class</param>
            <param name="bre">
            An object of BarcodeReadEventArgs class that passes informatin of a bar code has been read.
            </param>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReadErrorEventHandler">
            <exclude />
            <summary>
            The BarcodeReadErrorEventHandler delegate represents the method that will handle the 
            BarcodeReader error event of BarcodeReadErrorEventArgs class.
            </summary>
            <param name="sender">An object of System.Object class</param>
            <param name="breErr">An object of BarcodeReadErrorEventArgs class that passes informatin of errors.</param>
        </member>
        <member name="T:Intermec.DataCollection.NoBarcodeReadEventHandler">
            <exclude />
            <summary>
            The NoBarcodeReadEventHandler delegate represents the method that will handle the 
            NoBarcodeRead event of NoBarcodeReadEventArgs class.
            </summary>
            <param name="sender">An object of System.Object class</param>
            <param name="noBre">An object of NoBarcodeReadEventArgs class that passes informatin of no barcode read.</param>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReadCancelEventHandler">
            <exclude /> 
            <summary>
            Deprecated. 
            </summary>
            <param name="sender">Object of System.Object class</param>
            <param name="bce">Object of BarcodeReadCancelEventArgs class.</param>
        </member>
        <member name="T:Intermec.DataCollection.ScannerNotifyEventHandler">
            <exclude />
            <summary>
            This delegate represents the method that will handle the 
            ScannerNotify event of the ScannerNotifyEventArgs class.
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="sne">
            An object of the ScannerNotifyEventArgs class that passes information about scanner events.
            </param>
        </member>
        <member name="T:Intermec.DataCollection.Device">
            <summary>
            Represents a scanner device. Use this class to manage all scanners. A preconstructed instance of 
            this class is passed in the <see cref="T:Intermec.DataCollection.BarcodeReadEventArgs"/> event handler when the application 
            gets a scan event.
            </summary>    
            <remarks>
            <para>
            The class contains device-specific information such as friendly name, port name, and port ID. This 
            class also provides methods to get and set device attributes.
            </para>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded operations. 
            Instance members are not guaranteed to be thread safe and each instance should be used only within a 
            single thread.
            </para>
            <note>
            This class is supported by Intermec computers with IVA version 4.03 and later. Your application may 
            throw an exception if used on computers with previous versions of IVA.
            </note>
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection.Device.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creating an instance of a scanner device.
            </summary>
            <param name="MyComHandle">The COM objects interface handle</param>
            <param name="DHandle">Integer for the native handle of the data struct that contains the device's detailed information.</param>
            <param name="PortID">Port ID to which the scanner is connected.</param>
            <param name="fname">Friendly name for this Bluetooth scanner.</param>
            <param name="devtype">String containing the device type.</param>
            <param name="Portname">String containing the device port name.</param>
        </member>
        <member name="P:Intermec.DataCollection.Device.ScannerEnable">
            <summary>
            Enables or disables the scanner.
            </summary>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties.
            </exception>
            <example>
            This example enables all bluetooth scanners.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {                         
                                if(bcr.Devices != null)
                                {
                                    foreach (Device myDevice in bcr.Devices)
                                    {
                                        //enables all Bluetooth scanners
                                        if (myDevice.FriendlyName.Length &gt; 0)
                                        {
                                            this.listBox1.Items.Add("FriendlyName = " + myDevice.FriendlyName.ToString());
                                            myDevice.ScannerEnable = true;
                                            this.listBox1.Items.Add("ScannerEnable = " + myDevice.ScannerEnable.ToString());
                                        }
                                    }                
                                }             
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                If bcr.Devices Is Nothing Then
                                    'do nothing
                                Else
                                    Dim myDevice As Device                        
                                    For Each myDevice In bcr.Devices                          
                                        If myDevice.FriendlyName.Length &gt; 0 Then
                                            Me.ListBox1.Items.Add("FriendlyName = " + myDevice.FriendlyName.ToString())
                                            myDevice.ScannerEnable = False
                                            Me.ListBox1.Items.Add("ScannerEnable = " + myDevice.ScannerEnable.ToString())
                                        End If                            
                                    Next
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Device.ContinuesScan">
            <exclude />
            <summary>
            Deprecated. Use TriggerScanner property. 
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.Device.TriggerScanner">
            <summary>
            Turns a scanner on or off. 
            </summary>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection.Device.ReadLED">
            <summary>
            Turns the good read LED on or off. Supported only by Intermec computers with a good read LED.
            </summary>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties.
            </exception>
            <example>
            This example enables ReadLED for the internal scanner.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {                         
                                if(bcr.Devices != null)
                                {
                                    foreach (Device myDevice in bcr.Devices)
                                    {
                                        //enables ReadLED for default internal scanner
                                        if (myDevice.PortName == "Internal")
                                        {
                                            this.listBox1.Items.Add("PortName = " + myDevice.PortName.ToString());
                                            myDevice.ReadLED = true;
                                        }
                                    }                
                                }             
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                If bcr.Devices Is Nothing Then
                                    'do nothing
                                Else
                                    Dim myDevice As Device                        
                                    For Each myDevice In bcr.Devices                          
                                        If (myDevice.PortName = "Internal") Then
                                            Me.ListBox1.Items.Add("PortName = " + myDevice.PortName.ToString())
                                            myDevice.ReadLED = True
                                        End If                           
                                    Next
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Device.Online">
            <summary>
            Checks whether the device is on line. 
            </summary>
            <example>
            This example gets the online status of all bluetooth scanners.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {                         
                                if(bcr.Devices != null)
                                {
                                    foreach (Device myDevice in bcr.Devices)
                                    {
                                        //gets bluetooth scanners Online information
                                        if (myDevice.FriendlyName.Length > 0)
                                        {
                                            this.listBox1.Items.Add("FriendlyName = " + myDevice.FriendlyName.ToString());
                                            this.listBox1.Items.Add("Online = " + myDevice.Online.ToString());
                                        }
                                    }                
                                }             
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                If bcr.Devices Is Nothing Then
                                    'do nothing
                                Else
                                    Dim myDevice As Device                        
                                    For Each myDevice In bcr.Devices                          
                                        If (myDevice.FriendlyName.Length > 0) Then
                                            Me.ListBox1.Items.Add("FriendlyName = " + myDevice.FriendlyName.ToString())
                                            Me.ListBox1.Items.Add("Online = " + myDevice.Online.ToString())
                                        End If                          
                                    Next
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Device.PortID">
            <summary>
            Gets the port ID for this scanner device.
            </summary>
            <example>
            This example gets the PortID for scanners.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {  
                                this.listBox1.Items.Add("PortID = " + sne.DeviceInfo.PortID.ToString());
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                Me.ListBox1.Items.Add("PortID = " + sne.DeviceInfo.PortID.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Device.DeviceHandle">
            <summary>
            Gets the native handle of the data structure that holds the device information. 
            </summary>
            <example>
            This example gets the device handle for all scanners.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {  
                               this.listBox1.Items.Add("DeviceHandle = " + sne.DeviceInfo.DeviceHandle.ToString());
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                Me.ListBox1.Items.Add("DeviceHandle = " + sne.DeviceInfo.DeviceHandle.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Device.DeviceType">
            <summary>
            Gets the device type.
            </summary>
            <example>
            This example gets the device type for all scanners.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {  
                                this.listBox1.Items.Add("DeviceType = " + sne.DeviceInfo.DeviceType.ToString());                
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                Me.ListBox1.Items.Add("DeviceType = " + sne.DeviceInfo.DeviceType.ToString())                
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Device.FriendlyName">
            <summary>
            Gets the friendly name for the Bluetooth scanner. Data in this field is 
            undefined for non-Bluetooth scanners.
            </summary>
            <example>
            This example gets the friendly Name of all bluetooth scanners.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {  
                                if (sne.DeviceInfo.FriendlyName.Length > 0)
                                    this.listBox1.Items.Add(sne.DeviceInfo.FriendlyName.ToString());
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                If (sne.DeviceInfo.FriendlyName.Length > 0) Then
                                    Me.ListBox1.Items.Add(sne.DeviceInfo.FriendlyName.ToString())
                                End If                
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Device.PortName">
            <summary>
            Gets the port name for this scanner device.
            </summary>
            <example>
            This example gets the port Name of all scanners.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {  
                                this.listBox1.Items.Add(sne.DeviceInfo.PortName.ToString());
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                Me.ListBox1.Items.Add(sne.DeviceInfo.PortName.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReader">
            <summary>
            The BarcodeReader class allows you to control the internal or external bar code scanner.
            </summary>
            <remarks>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded 
            operations. Instance members are not guaranteed to be thread safe and each instance should be 
            used only within a single thread.
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE39">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE93">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE49">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_I2OF5">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODABAR">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_UPC">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE128">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE16K">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_PLESSEY">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE11">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_MSI">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_PDF417">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_D2OF5">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_TELEPEN">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_MATRIX2OF5">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODABLOCK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_ANKERCODE">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_MAXICODE">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_OTHERBC">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_SYSTEM_EX">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_NON_BARCODE">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_DUPLICATE">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_UNKNOWN">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE39_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE93_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE49_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_I2OF5_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODABAR_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_UPC_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE128_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE16K_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_PLESSEY_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODE11_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_MSI_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_PDF417_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_D2OF5_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_TELEPEN_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_MATRIX2OF5_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_CODABLOCK_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_ANKERCODE_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_MAXICODE_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_OTHERBC_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_SYSTEM_EX_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_NON_BARCODE_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_DUPLICATE_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_UNKNOWN_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_SYMBOLOGY_ALL_MASK">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.ITC_DATASOURCE_USERINPUT">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.ITC_DATASOURCE_READER_COMMAND">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.ITC_DATASOURCE_ALL">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_DATA_TYPE_UNKNOWN">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_DATA_TYPE_ASCII">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_DATA_TYPE_UNICODE">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BARCODE_DATA_TYPE_DOUBLE_BYTE">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NOTIFY_DEVICE_ADDED">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NOTIFY_DEVICE_REMOVED">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NOTIFY_DEVICE_PORT_STATE_CHANGE">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NOTIFY_PORT_CHANGE_DEVICE_DISABLED">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NOTIFY_PORT_CHANGE_DEVICE_ENABLED">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NOTIFY_PORT_CHANGE_DEVICE_INOPERATIVE">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NOTIFY_PORT_CHANGE_DEVICE_DISCONNECTED">
            <exclude />
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.Devices">
            <summary>
            A container of objects that are created from the <see cref="T:Intermec.DataCollection.Device"/> class. 
            Each object stores information for a specific attached scanner.
            </summary>
            <remarks>
            The Devices instance of Devcie class is instantiated in BarcodeReader construct.
            The instance only supports scanner group, such as when "BTScanners" is specified  
            as the device name in a BarcodeReader construct.        
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example uses Devices for scanner information.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    
                                    if(bcr.Devices != null)
                                    {               
                                        foreach (Device myDevice in bcr.Devices)
                                        {
                                            //get devices type 
                                            this.listBox1.Items.Add("device type = " + myDevice.DeviceType);
                                        }                    
                                    }      
                                }       
                            }                         
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                     
                                If bcr.Devices IsNot Nothing Then 
                                    For Each myDevice As Device In bcr.Devices 
                                        'get devices type 
                                        Me.listBox1.Items.Add("device type = " + myDevice.DeviceType)
                                    Next 
                                End If 
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.symbology">
            <summary>
            An object of <see cref="T:Intermec.DataCollection.CSymbology"/> class that sets and gets symbology settings 
            through the BarcodeReader class. 
            </summary>        
            <remarks>
            The symbology instance of CSymbology class is instantiated in BarcodeReader construct. 
            </remarks>       
            <exception cref="T:Intermec.DataCollection.SymbologyException">
            The SymbologyException class throws an exception 
            when <see cref="M:Intermec.DataCollection.CSymbology.EnableSymbologyExceptions(System.Boolean)"/> is set to true and
            an error has occurred.
            </exception>
            <example>
            This example enables code39 symbology and gets settings through the BarcodeReader class.
            <code> 
                       using Intermec.DataCollection;
                       namespace DataCollection
                       {
                           public partial class frmBarcodeReader : Form
                           {
                               private Intermec.DataCollection.BarcodeReader bcr;
                               public frmBarcodeReader()
                               {
                                   InitializeComponent();
                                   bcr = new BarcodeReader();              
                                   bcr.symbology.Code39.Enable = true;
                                   this.listBox1.Items.Add("code39 enable = " + bcr.symbology.Code39.Enable.ToString());
                               }       
                           }                
                       }
                       </code>
                       <code lang="VB.NET">
                       Imports Intermec.DataCollection
                       Public Class frmBarcodeReader
                           Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                           Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                               bcr = New BarcodeReader()
                               bcr.symbology.Code39.Enable = True 
                               Me.listBox1.Items.Add("code39 enable = " + bcr.symbology.Code39.Enable.ToString()) 
                           End Sub               
                       End Class
                       </code> 
            </example> 
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.symbologyOptions">
            <summary>
            An object of <see cref="T:Intermec.DataCollection.SymbologyOptions"/> class that sets and gets symbology options settings
            through the BarcodeReader class.
            </summary>
            <remarks>
            The symbologyOptions instance of SymbologyOptions class is instantiated in BarcodeReader construct. 
            </remarks>
            <exception cref="T:Intermec.DataCollection.SymbologyOptionsException">
            Throws an exception 
            when <see cref="M:Intermec.DataCollection.SymbologyOptions.EnableSymbologyOptionsExceptions(System.Boolean)"/> is set to true
            and an error has occurred.
            </exception>  
            <example>
            This example sets and gets preamble though BarcodeReader class.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();              
                                    bcr.symbologyOptions.Preamble = "pre";
                                    this.listBox1.Items.Add("Preamble = " + bcr.symbologyOptions.Preamble.ToString());
                                }       
                            }                
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                                bcr.symbologyOptions.Preamble = "pre" 
                                Me.listBox1.Items.Add("Preamble = " + bcr.symbologyOptions.Preamble.ToString()) 
                            End Sub               
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BCDataBuffer">
            <exclude />
            <summary>Deprecated.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BCBytesInBuffer">
            <exclude />
            <summary>Deprecated.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BCSymbology">
            <exclude />
            <summary>Deprecated.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BCDataType">
            <exclude />
            <summary>Deprecated.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BCTotalDiscardedMessages">
            <exclude />
            <summary>Deprecated.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.BCTotalDiscardedBytes">
            <exclude />
            <summary>Deprecated.</summary>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.Dispose">
            <summary>
            Releases all resources from the scanner. Your application must call Dispose before exiting, 
            or the application may not exit properly.
            </summary>
            <remarks>
            Multiple simultaneous instances of this class are supported when each instance uses a unique scanner name.
            Before you create a new instance, use this method to dispose of the existing instance.
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example uses Dispose before exiting the application.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();              
                                }       
                            }
                        
                            private void btnExit_Click(object sender, EventArgs e)
                            {
                                if (this.bcr != null)
                                {
                                    this.bcr.Dispose();
                                    this.bcr = null;
                                }
            
                                Application.Exit();
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                            End Sub
                      
                            Private Sub btnExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnExit.Click
                                If Me.bcr IsNot Nothing Then
                                    Me.bcr.Dispose()
                                    Me.bcr = Nothing
                                End If
            
                                Application.Exit()
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.#ctor">
            <summary>
            Constructor uses default scanner and buffer size(2KB). 
            </summary>
            <remarks>
            <list type="bullet">
            <item>Multiple simultaneous instances of this class are supported when each instance uses 
            a unique scanner name.</item>
            <item>For the CV41 and CV61 computers, this constructor connects a tethered scanner to COM1</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example uses default scanner and buffer size.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();              
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.#ctor(System.UInt32)">
            <summary>
            Constructor that uses default scanner and sets the buffer size. 
            </summary>
            <param name="BufSize">Size in bytes of the buffer.</param>
            <remarks>
            <list type="bullet">
            <item>Multiple simultaneous instances of this class are supported when each instance uses 
            a unique scanner name.</item>
            <item>For the CV41 and CV61, specify "default" for scanners connected to COM1, 
            and specify "ExtScanner" for scanners connected to COM2.</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example uses default scanner and sets buffer size.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader(3072);              
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader(3072)
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.#ctor(System.String)">
            <summary>
            Constructor that sets the scanner name and uses the default buffer (2KB).
            </summary>
            <param name="DeviceName">Name of the scanner to be used.</param>
            <remarks>
            The BarcodeReader class supports following scanner names:
            <list type="bullet">
            <item>Multiple simultaneous instances of this class are supported when each instance uses a unique scanner name.</item>
            <item>To use the default scanner for your Intermec computer, set DeviceName to "default".</item>
            <item>For tethered or external scanners connected to your Intermec computer, use "ExtScanner".</item>
            <item>For Bluetooth scanners, use "BTScanners".</item>
            <item>For the CV41 and CV61, specify "default" for scanners connected to COM1, 
            and specify "ExtScanner" for scanners connected to COM2.</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example works for the default scanner and uses the default buffer size. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("default");              
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("default")
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>
            Constructor uses a specified scanner and uses the default buffer (2 KB). 
            Use this constructor for applications without a user interface.
            </summary>
            <param name="thisCtrl">Set to null for a formless application.</param>
            <param name="DeviceName">Name of the scanner to be used.</param>
            <remarks>
            The BarcodeReader class supports following scanner names:
            <list type="bullet">
            <item>Multiple simultaneous instances of this class are supported when each instance uses a unique scanner name.</item>
            <item>To use the default scanner for your Intermec computer, set DeviceName to "default".</item>
            <item>For tethered or external scanners connected to your Intermec computer, use "ExtScanner".</item>
            <item>For Bluetooth scanners, use "BTScanners".</item>
            <item>For the CV41 and CV61, specify "default" for scanners connected to COM1, 
            and specify "ExtScanner" for scanners connected to COM2.</item>
            </list>
            <note>
            Even if your application does not use a form, you need to add a reference to System.Windows.Forms.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example sets "BTScanners" as the scanner name and uses the default buffer size in a user-defined class. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            class formlessBarcodeReader
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
            
                                public void InitializeBarcodeReader()
                                {
                                    bcr = new BarcodeReader(null, "BTScanners");
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class formlessBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Public Sub InitializeBarcodeReader()
                                bcr = New BarcodeReader(Nothing, "BTScanners")
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.#ctor(System.String,System.UInt32)">
            <summary>
            Constructor sets the scanner name and sets the buffer size.
            </summary>
            <param name="DeviceName">Name of the scanner to be used.</param>
            <param name="BufSize">Size in bytes of the buffer.</param>
            <remarks>
            The BarcodeReader class supports following scanner names:
            <list type="bullet">
            <item>Multiple simultaneous instances of this class are supported when each instance uses a unique scanner name.</item>
            <item>To use the default scanner for your Intermec computer, set DeviceName to "default".</item>
            <item>For tethered or external scanners connected to your Intermec computer, use "ExtScanner".</item>
            <item>For Bluetooth scanners, use "BTScanners".</item>
            <item>For the CV41 and CV61, specify "default" for scanners connected to COM1, and specify "ExtScanner" for scanners connected to COM2.</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example works for the default scanner and sets the buffer size to 3072 bytes.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("default", 3072);              
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("default", 3072)
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.#ctor(System.Windows.Forms.Control,System.String,System.UInt32)">
            <summary>
            Constructor uses a specified scanner and sets the buffer size. 
            Use this constructor for applications without a user interface.
            </summary>
            <param name="thisCtrl">Set to null for a formless application.</param>
            <param name="DeviceName">Name of the scanner to be used.</param>
            <param name="BufSize">Size in bytes for the buffer</param>
            <remarks>
            The BarcodeReader class supports following scanner names:
            <list type="bullet">
            <item>Multiple simultaneous instances of this class are supported when each instance uses a unique scanner name.</item>
            <item>To use the default scanner for your Intermec computer, set DeviceName to "default".</item>
            <item>For tethered or external scanners connected to your Intermec computer, use "ExtScanner".</item>
            <item>For Bluetooth scanners, use "BTScanners".</item>
            <item>For the CV41 and CV61, specify "default" for scanners connected to COM1, and specify "ExtScanner" for scanners connected to COM2.</item>
            </list>
            <note>
            Even if your application does not use a form, you need to add a reference to System.Windows.Forms.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example sets "BTScanners" as the scanner name and sets the buffer size to 3072 bytes in a user-defined class.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            class formlessBarcodeReader
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
            
                                public void InitializeBarcodeReader()
                                {
                                    bcr = new BarcodeReader(null, "BTScanners", 3072);
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class formlessBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Public Sub InitializeBarcodeReader()
                                bcr = New BarcodeReader(Nothing, "BTScanners", 3072)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.Finalize">
            <exclude />
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.Read">
            <exclude/>
            <summary>Depreciated. Use <see cref="M:Intermec.DataCollection.BarcodeReader.ThreadedRead(System.Boolean)"/>.</summary>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.Read(System.Int32)">
            <exclude/>
            <summary>Depreciated. Use <see cref="M:Intermec.DataCollection.BarcodeReader.ThreadedRead(System.Boolean)"/>.</summary>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.CancelRead(System.Boolean)">
            <exclude />
            <summary>Depreciated. </summary>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.SetAttribute(System.Byte,System.Byte)">
            <exclude />
            <summary>Sets attribute.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.CurrentThreadedReadState">
            <summary>
            Requests data from the scanner and posts an event when scanned data is available. 
            Provides for continuous detection of scanned data, or for detection only after an 
            asynchronous read is re-posted.
            </summary>
            <param name="Auto">
            Boolean value determining whether or not ThreadedRead needs to 
            be called each time:
            <list type="bullet">
            <item>true = sends the BarcodeRead event after each successful read.</item>
            <item>false = sends the BarcodeRead event after a successful read. Requires a new 
            call to ThreadedRead for each subsequent read.
            </item>
            </list>
            </param>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example enables the ThreadedRead to send a BarcodeRead event after each successful read. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();   
                                    bcr.BarcodeRead += new BarcodeReadEventHandler(bcr_BarcodeRead);
                                    bcr.ThreadedRead(true);
                                }       
                            }  
                            
                            void bcr_BarcodeRead(object sender, BarcodeReadEventArgs bre)
                            {
                                this.listBox1.Items.Add(bre.strDataBuffer.ToString());
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 bcr = New BarcodeReader()
                                 bcr.ThreadedRead(True)
                            End Sub    
                            
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                Me.ListBox1.Items.Add(bre.strDataBuffer)
                             End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.DataBufferToString">
            <exclude />
            <summary> Deprecated.</summary>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.CheckForData">
            <summary>
            This is the worker thread that retrieves the messages in a loop. The worker thread
            P/Invokes into unmanaged code to ITCSCAN_GetBarcodeMessage. This method will
            be blocked until new (asynchronous) data is available. If data is available
            and if we have a listener (event handler), we pass the data on. Note that
            CheckForData remains active (in combination with the unmanaged DLL), even
            if there are no listeners for data.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.SetupCommandRead(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <exclude />
            <summary>
            Used for setup command read
            </summary>
            <param name="CommandBuffer">Command buffer for read</param>
            <param name="CommandSize">Command buffer size</param>
            <param name="retBuffer">Return buffer</param>
            <param name="retBufferSize">Return buffer size</param>
            <returns>Returns true if success on read</returns>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.SetupCommandSettings(System.Byte[],System.Int32)">
            <exclude />
            <summary>
            Used for setup command settings
            </summary>
            <param name="CommandBuffer">Command buffer for settings</param>
            <param name="CommandSize">Command buffer size</param>
            <returns>Returns true if success on settings</returns>    
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.StatusCommand(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <exclude />
            <summary>
            Used for status command
            </summary>
            <param name="InputCommand">Command buffer for status read</param>
            <param name="InputCommandSize">Command size</param>
            <param name="retBuffer">Return buffer</param>
            <param name="retBufferSize">Return buffer size</param>
            <returns>Returns true if success on status read</returns>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.ControlCommandSettings(System.Byte[],System.Int32)">
            <exclude />
            <summary>
            Used for control command settings.
            </summary>
            <param name="InputCommand">Command buffer</param>
            <param name="InputCommandSize">Command buffer size</param>
            <returns>Returns true if success on control command settings</returns>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.GetNumberOfScanners">
             <exclude/>
             <summary>
             Gets the total number of scanners that are added in a device.
             </summary>
             <returns>Number of scanners found.</returns>
            <remarks>
             This method works only if "AllScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example gets the total number of scanners added in a device.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                    int numScanner = 0;
                                    numScanner = bcr.GetNumberOfScanners();
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                                Dim numScanner As Integer
                                numScanner = bcr.GetNumberOfScanners()
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.GetNumberOfBluetoothScanners">
             <exclude/>
             <summary>
             Gets the number of bluetooth scanners that are added in device.
             </summary>
             <returns>Number of bluetooth scanners are found.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example gets number of bluetooth scanners. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                    int numBTScanner = bcr.GetNumberOfBluetoothScanners();
                               }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                                Dim numBTScanner As Integer = bcr.GetNumberOfBluetoothScanners()
                            End Sub              
                        End Class
                        </code>
            </example> 
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.GetAllScannerPortName(System.String[])">
             <exclude/> 
             <summary>
             Gets all port name of scanners.
             </summary>
             <param name="PortNames">A string array that contains port name of all scanners.</param>
             <returns>Success or failed on gets port names.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example gets port name of all scanners.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                    int numScanner = 0;
                                    numScanner = bcr.GetNumberOfScanners();
                     
                                    if(numScanner &gt; 0)
                                    {
                                        string [] PortName = new string[numScanner];
                                        if (bcr.GetAllScannerPortName(PortName))
                                        {
                                            for (int num = 0; num &lt; numScanner; num++)
                                                this.listBox1.Items.Add(PortName[num]);
                                        }                    
                                    }   
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                                Dim numScanner As Integer
                                numScanner = bcr.GetNumberOfScanners()
                            
                                If numScanner &gt; 0 Then 
                                    Dim PortName As String() = New String(numScanner - 1) {} 
                                    If bcr.GetAllScannerPortName(PortName) Then 
                                        For num As Integer = 0 To numScanner - 1 
                                            Me.listBox1.Items.Add(PortName(num)) 
                                        Next 
                                    End If 
                                End If
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.GetBluetoothScannerNamesOnly(System.String[])">
             <exclude/> 
             <summary>
             Gets port name of bluetooth scanners.
             </summary>
             <param name="ScannerNames">A string array that contains scanner name of bluetooth scanners.</param>
             <returns>Success or failed on gets bluetooth scanner names.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example gets all bluetooth scanner names.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                    
                                    int numBTScanner = 0;
                                    numBTScanner = bcr.GetNumberOfBluetoothScanners();
            
                                    if (numBTScanner &gt; 0)
                                    {
                                        string[] BTScannerName = new string[numBTScanner];
            
                                        if (bcr.GetBluetoothScannerNamesOnly(BTScannerName))
                                        {
                                            for (int numBlue = 0; numBlue &lt; numBTScanner; numBlue++)
                                            {
                                                this.listBox1.Items.Add(BTScannerName[numBlue]);
                                            }
                                        }
                                    }
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                                Dim numBTScanner As Integer = bcr.GetNumberOfBluetoothScanners()
                                numBTScanner = bcr.GetNumberOfBluetoothScanners()
            
                                If numBTScanner &gt; 0 Then 
                                    Dim BTScannerName As String() = New String(numBTScanner - 1) {} 
                    
                                    If bcr.GetBluetoothScannerNamesOnly(BTScannerName) Then 
                                        For numBlue As Integer = 0 To numBTScanner - 1 
                                            Me.listBox1.Items.Add(BTScannerName(numBlue)) 
                                        Next 
                                    End If 
                                End If
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.SetupCommandReadWithPortName(System.String,System.Byte[],System.Int32,System.Byte[],System.Int32@)">
             <exclude/> 
             <summary>
             Retrieves setting value with setup command and port name of a scanner.
             </summary>
             <param name="PortName">Port name of a scanner</param>
             <param name="rgbCommandBuff">Setup command buffer of GID and FID</param>
             <param name="CommandSize">Setup command buffer size</param>
             <param name="retBuffer">Returned buffer of requested setting.</param>
             <param name="retBufferSize">Size of returned buffer.</param>
             <returns>Success or failed on retrieves value.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example uses a setup command to retrieve code39 active status of the
             internal scanner. It assumes the port name of internal scanner is stored in a
             listbox. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                }       
                            }  
                     
                            private void btnRead_Click(object sender, EventArgs e)
                            {
                                // get select input port name from listbox
                                string inputName = null;
                                //assume the internal port name is stored in listbox
                                inputName = this.listBox1.SelectedItem.ToString();
            
                                //command buffer
                                int iscpSize = 2;
                                byte[] iscpCommand = new byte[iscpSize];
            
                                //return buffer
                                byte[] retBuffer = new byte[255];
                                int retBufferSize = -1;
            
                                //gets code39 active status
                                iscpCommand[0] = 0x42;  //Group ID
                                iscpCommand[1] = 0x40;  //Function ID
            
                                if (bcr.SetupCommandReadWithPortName(inputName, iscpCommand, iscpSize, retBuffer, ref retBufferSize))
                                {
                                    if (retBufferSize &gt;= 3)
                                    this.listBox1.Items.Add("code39 enable = " + retBuffer[2].ToString());
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub   
                     
                            Private Sub btnRead_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRead.Click
                                ' get select input port name from listbox 
                                Dim inputName As String = Nothing
                                inputName = Me.ListBox1.SelectedItem.ToString()
            
                                'command buffer 
                                Dim iscpSize As Integer = 2
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {}
            
                                'return buffer 
                                Dim retBuffer As Byte() = New Byte(254) {}
                                Dim retBufferSize As Integer = -1
            
                                'gets code39 active status 
                                iscpCommand(0) = &amp;H42     'Group ID 
                                iscpCommand(1) = &amp;H40     'Function ID 
            
                                If bcr.SetupCommandReadWithPortName(inputName, iscpCommand, iscpSize, retBuffer, retBufferSize) Then
                                    If retBufferSize &gt;= 3 Then
                                        Me.ListBox1.Items.Add("code39 enable = " + retBuffer(2).ToString())
                                    End If
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.SetupCommandReadWithBTScannerName(System.String,System.Byte[],System.Int32,System.Byte[],System.Int32@)">
             <exclude/> 
             <summary>
             Retrieves setting value with setup command and scanner name of a bluetooth.
             </summary>
             <param name="BTScannerName">The bluetooth scanner name.</param>
             <param name="rgbCommandBuff">Setup command buffer of GID and FID</param>
             <param name="CommandSize">Setup command buffer size</param>
             <param name="retBuffer">Returned buffer of requested setting.</param>
             <param name="retBufferSize">Size of returned buffer</param>
             <returns>Success or failed on retrieves value.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example uses a setup command to retrieve code39 active status of a
             selected bluetooth scanner. It assumes the name of bluetooth scanner is stored 
             in a listbox. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                }       
                            }  
                     
                            private void btnRead_Click(object sender, EventArgs e)
                            {
                                // gets selected scanner name from a listbox
                                string inputName = null;
                                inputName = this.listBox1.SelectedItem.ToString();
            
                                //command buffer
                                int iscpSize = 2;
                                byte[] iscpCommand = new byte[iscpSize];
            
                                //return buffer
                                byte[] retBuffer = new byte[255];
                                int retBufferSize = -1;
            
                                //gets code39 active status
                                iscpCommand[0] = 0x42;  //Group ID
                                iscpCommand[1] = 0x40;  //Function ID
            
                                if (bcr.SetupCommandReadWithBTScannerName(inputName, iscpCommand, iscpSize, retBuffer, ref retBufferSize))
                                {
                                    if (retBufferSize &gt;= 3)
                                    this.listBox1.Items.Add("code39 enable = " + retBuffer[2].ToString());
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub   
                     
                            Private Sub btnRead_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRead.Click
                                ' gets selected scanner name from a listbox
                                Dim inputName As String = Nothing
                                inputName = Me.ListBox1.SelectedItem.ToString()
            
                                'command buffer 
                                Dim iscpSize As Integer = 2
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {}
            
                                'return buffer 
                                Dim retBuffer As Byte() = New Byte(254) {}
                                Dim retBufferSize As Integer = -1
            
                                'gets code39 active status 
                                iscpCommand(0) = &amp;H42     'Group ID 
                                iscpCommand(1) = &amp;H40     'Function ID 
            
                                If bcr.SetupCommandReadWithBTScannerName(inputName, iscpCommand, iscpSize, retBuffer, retBufferSize) Then
                                    If retBufferSize &gt;= 3 Then
                                        Me.ListBox1.Items.Add("code39 enable = " + retBuffer(2).ToString())
                                    End If
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.SetupCommandSettingsWithPortName(System.String,System.Byte[],System.Int32)">
             <exclude/>
             <summary>
             Sets value with setup command and port name of a scanner.
             </summary>
             <param name="PortName">Port name of a scanner.</param>
             <param name="rgbCommandBuff">Setup command buffer with GID, FID, and value.</param>
             <param name="CommandSize">The Setup command buffer size.</param>
             <returns>Success or failed on settings.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example uses a setup command to enable code39. It assumes the selected port name  
             is in a listbox. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                }       
                            }  
                     
                            private void btnSet_Click(object sender, EventArgs e)
                            {
                                // gets selected port name from a listbox
                                string inputName = null;
                                inputName = this.listBox1.SelectedItem.ToString();
            
                                //command buffer
                                int iscpSize = 3;
                                byte[] iscpCommand = new byte[iscpSize];
            
                                //enables code39 
                                iscpCommand[0] = 0x42;         //Group ID
                                iscpCommand[1] = 0x40;         //Function ID
                                iscpCommand[2] = 0x01;         //value  
            
                                bool isSccess = bcr.SetupCommandSettingsWithPortName(inputName, iscpCommand, iscpSize);
            
                                if (isSccess)
                                    this.listBox1.Items.Add("success");
                                else
                                    this.listBox1.Items.Add("failed");
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub   
                     
                            Private Sub btnSet_Click(ByVal sender As Object, ByVal e As EventArgs) 
                                ' gets selected port name from a listbox
                                Dim inputName As String = Nothing 
                                inputName = Me.listBox1.SelectedItem.ToString() 
                                
                                'command buffer 
                                Dim iscpSize As Integer = 3 
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {} 
                                
                                'enables code39 
                                iscpCommand(0) = &amp;H42         'Group ID 
                                iscpCommand(1) = &amp;H40         'Function ID 
                                iscpCommand(2) = &amp;H1          'value 
                                Dim isSccess As Boolean = bcr.SetupCommandSettingsWithPortName(inputName, iscpCommand, iscpSize) 
                                
                                If isSccess Then 
                                    Me.listBox1.Items.Add("success") 
                                Else 
                                    Me.listBox1.Items.Add("failed") 
                                End If 
                            End Sub 
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.SetupCommandSettingsWithBTScannerName(System.String,System.Byte[],System.Int32)">
             <exclude/>
             <summary>
             Sets value with setup command and a selected bluetooth scanner name.
             </summary>
             <param name="ScannerName">bluetooth scanner name.</param>
             <param name="rgbCommandBuff">Setup command buffer</param>
             <param name="CommandSize">The size of command buffer</param>
             <returns>Success or failed on settings.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example uses a setup command to enable code39. It assumes the selected 
             bluetooth scanner name is in a listbox. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                }       
                            }  
                     
                            private void btnSet_Click(object sender, EventArgs e)
                            {
                                // gets selected scanner name from a listbox
                                string inputName = null;
                                inputName = this.listBox1.SelectedItem.ToString();
            
                                //command buffer
                                int iscpSize = 3;
                                byte[] iscpCommand = new byte[iscpSize];
            
                                //enables code39 
                                iscpCommand[0] = 0x42;         //Group ID
                                iscpCommand[1] = 0x40;         //Function ID
                                iscpCommand[2] = 0x01;         //value  
            
                                bool isSccess = bcr.SetupCommandSettingsWithBTScannerName(inputName, iscpCommand, iscpSize);
            
                                if (isSccess)
                                    this.listBox1.Items.Add("success");
                                else
                                    this.listBox1.Items.Add("failed");
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub   
                     
                            Private Sub btnSet_Click(ByVal sender As Object, ByVal e As EventArgs) 
                                ' gets selected scanner name from a listbox
                                Dim inputName As String = Nothing 
                                inputName = Me.listBox1.SelectedItem.ToString() 
                                
                                'command buffer 
                                Dim iscpSize As Integer = 3 
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {} 
                                
                                'enables code39 
                                iscpCommand(0) = &amp;H42       'Group ID 
                                iscpCommand(1) = &amp;H40       'Function ID 
                                iscpCommand(2) = &amp;H1        'value 
                                Dim isSccess As Boolean = bcr.SetupCommandSettingsWithBTScannerName(inputName, iscpCommand, iscpSize) 
                                
                                If isSccess Then 
                                    Me.listBox1.Items.Add("success") 
                                Else 
                                    Me.listBox1.Items.Add("failed") 
                                End If 
                            End Sub 
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.SetupCommandSettingsWithAllBTScanners(System.Byte[],System.Int32)">
             <exclude/>
             <summary>
             Sets value for all bluetooth scanners by setup command.
             </summary>
             <param name="rgbCommandBuff">Setup command buffer</param>
             <param name="CommandSize">The size of command buffer</param>
             <returns>Success or failed on settings.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example uses a setup command to enable code39 for all bluetooth scanners.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                             
                                    //command buffer
                                    int iscpSize = 3;
                                    byte[] iscpCommand = new byte[iscpSize];
            
                                    //enables code39 
                                    iscpCommand[0] = 0x42;         //Group ID
                                    iscpCommand[1] = 0x40;         //Function ID
                                    iscpCommand[2] = 0x01;         //value 
            
                                    bool isSccess = bcr.SetupCommandSettingsWithAllBTScanners(iscpCommand, iscpSize);
            
                                    if (isSccess)
                                        this.listBox1.Items.Add("success");
                                    else
                                        this.listBox1.Items.Add("failed"); 
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                                
                                'command buffer 
                                Dim iscpSize As Integer = 3 
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {} 
                                
                                'enables code39 
                                iscpCommand(0) = &amp;H42     'Group ID 
                                iscpCommand(1) = &amp;H40     'Function ID 
                                iscpCommand(2) = &amp;H1      'value 
                                Dim isSccess As Boolean = bcr.SetupCommandSettingsWithAllBTScanners(iscpCommand, iscpSize) 
                                
                                If isSccess Then 
                                    Me.listBox1.Items.Add("success") 
                                Else 
                                    Me.listBox1.Items.Add("failed") 
                                End If 
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.StatusCommandWithPortName(System.String,System.Byte[],System.Int32,System.Byte[],System.Int32@)">
             <exclude/>
             <summary>
             Retrieves value with port name by using status command.
             </summary>
             <param name="PortName">Port name of a selected scanner.</param>
             <param name="rgbCommandBuff">Status command buffer.</param>
             <param name="CommandSize">The size of command buffer.</param>
             <param name="retBuffer">Return buffer.</param>
             <param name="retBufferSize">The size of return buffer</param>
             <returns>Success or failed on read value.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example reads Green LED active status of a selected bluethood scanner by port name.
             It assumes the selected port name is in a listbox.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                }       
                            }  
                     
                            private void btnRead_Click(object sender, EventArgs e)
                            {
                                // gets selected port name from a listbox
                                string inputName = null;
                                inputName = this.listBox1.SelectedItem.ToString();
            
                                //command buffer
                                int iscpSize = 2;
                                byte[] iscpCommand = new byte[iscpSize];
            
                                //return buffer
                                byte[] retBuffer = new byte[255];
                                int retBufferSize = -1;
            
                                //gets Green LED active status
                                iscpCommand[0] = 0x30;                  //Group ID
                                iscpCommand[1] = 0x40;                  //Function ID
            
                                if (bcr.StatusCommandWithPortName(inputName, iscpCommand, iscpSize, retBuffer, ref retBufferSize))
                                {
                                    if (retBufferSize &gt;= 3)
                                        this.listBox1.Items.Add("Green LED enable = " + retBuffer[2].ToString());
                                }            
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub   
                     
                            Private Sub btnRead_Click(ByVal sender As Object, ByVal e As EventArgs) 
                                ' gets selected port name from a listbox 
                                Dim inputName As String = Nothing 
                                inputName = Me.listBox1.SelectedItem.ToString() 
                                
                                'command buffer 
                                Dim iscpSize As Integer = 2 
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {} 
                                
                                'return buffer 
                                Dim retBuffer As Byte() = New Byte(254) {} 
                                Dim retBufferSize As Integer = -1 
                                
                                'gets Green LED active status 
                                iscpCommand(0) = &amp;H30             'Group ID 
                                iscpCommand(1) = &amp;H40             'Function ID 
                                If bcr.StatusCommandWithPortName(inputName, iscpCommand, iscpSize, retBuffer, retBufferSize) Then 
                                    If retBufferSize &gt;= 3 Then 
                                        Me.listBox1.Items.Add("Green LED enable = " + retBuffer(2).ToString()) 
                                    End If 
                                End If 
                            End Sub 
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.StatusCommandWithBTScannerName(System.String,System.Byte[],System.Int32,System.Byte[],System.Int32@)">
             <exclude/>
             <summary>
             Retrieves value with bluetooth scanner name by using status command.
             </summary>
             <param name="BTScannerName">Selected bluetooth scanner name.</param>
             <param name="rgbCommandBuff">Status command buffer.</param>
             <param name="CommandSize">The size of command buffer.</param>
             <param name="retBuffer">Return buffer.</param>
             <param name="retBufferSize">The size of return buffer</param>
             <returns>Success or failed on read value.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example reads Green LED active status of a selected bluethood scanner by scanner name. 
             It assumes the selected scanner name is in a listbox.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                }       
                            }  
                     
                            private void btnRead_Click(object sender, EventArgs e)
                            {
                                // gets selected scanner name from a listbox
                                string inputName = null;
                                inputName = this.listBox1.SelectedItem.ToString();
            
                                //command buffer
                                int iscpSize = 2;
                                byte[] iscpCommand = new byte[iscpSize];
            
                                //return buffer
                                byte[] retBuffer = new byte[255];
                                int retBufferSize = -1;
            
                                //gets Green LED active status
                                iscpCommand[0] = 0x30;                  //Group ID
                                iscpCommand[1] = 0x40;                  //Function ID
            
                                if (bcr.StatusCommandWithBTScannerName(inputName, iscpCommand, iscpSize, retBuffer, ref retBufferSize))
                                {
                                    if (retBufferSize &gt;= 3)
                                        this.listBox1.Items.Add("Green LED enable = " + retBuffer[2].ToString());
                                }            
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub   
                     
                            Private Sub btnRead_Click(ByVal sender As Object, ByVal e As EventArgs) 
                                ' gets selected scanner name from a listbox 
                                Dim inputName As String = Nothing 
                                inputName = Me.listBox1.SelectedItem.ToString() 
                                
                                'command buffer 
                                Dim iscpSize As Integer = 2 
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {} 
                                
                                'return buffer 
                                Dim retBuffer As Byte() = New Byte(254) {} 
                                Dim retBufferSize As Integer = -1 
                                
                                'gets Green LED active status 
                                iscpCommand(0) = &amp;H30             'Group ID 
                                iscpCommand(1) = &amp;H40             'Function ID 
                                If bcr.StatusCommandWithBTScannerName(inputName, iscpCommand, iscpSize, retBuffer, retBufferSize) Then 
                                    If retBufferSize &gt;= 3 Then 
                                        Me.listBox1.Items.Add("Green LED enable = " + retBuffer(2).ToString()) 
                                    End If 
                                End If 
                            End Sub 
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.ControlCommandSettingsWithPortName(System.String,System.Byte[],System.Int32)">
             <exclude/>
             <summary>
             Sets value with control command and port name.
             </summary>
             <param name="PortName">Selected port name.</param>
             <param name="rgbCommandBuff">Control command buffer.</param>
             <param name="CommandSize">The size of command buffer.</param>
             <returns>Success or failed on settings.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example enables Green LED of a selected bluetooth scanner with control command
             and bluetooth port name. It assumes the selected port name is in a listbox. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                }       
                            }  
                     
                            private void btnSet_Click(object sender, EventArgs e)
                            {
                                // gets selected port name from a listbox
                                string inputName = null;
                                inputName = this.listBox1.SelectedItem.ToString();
            
                                //command buffer
                                int iscpSize = 3;
                                byte[] iscpCommand = new byte[iscpSize];
            
                                //enables Green LED 
                                iscpCommand[0] = 0x30;         //Group ID
                                iscpCommand[1] = 0x40;         //Function ID
                                iscpCommand[2] = 0x01;         //value 
            
                                bool isSccess = bcr.ControlCommandSettingsWithPortName(inputName, iscpCommand, iscpSize);
            
                                if (isSccess)
                                    this.listBox1.Items.Add("success");
                                else
                                    this.listBox1.Items.Add("failed");
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub   
                     
                            Private Sub btnSet_Click(ByVal sender As Object, ByVal e As EventArgs) 
                                ' gets selected port name from a listbox
                                Dim inputName As String = Nothing 
                                inputName = Me.listBox1.SelectedItem.ToString() 
            
                                'command buffer 
                                Dim iscpSize As Integer = 3 
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {} 
            
                                'enables Green LED 
                                iscpCommand(0) = &amp;H30           'Group ID 
                                iscpCommand(1) = &amp;H40           'Function ID 
                                iscpCommand(2) = &amp;H1            'value 
                                Dim isSccess As Boolean = bcr.ControlCommandSettingsWithPortName(inputName, iscpCommand, iscpSize) 
            
                                If isSccess Then 
                                    Me.listBox1.Items.Add("success") 
                                Else 
                                    Me.listBox1.Items.Add("failed") 
                                End If
                            End Sub 
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.ControlCommandSettingsWithBTScannerName(System.String,System.Byte[],System.Int32)">
             <exclude/>
             <summary>
             Sets value with control command and bluetooth scanner name.
             </summary>
             <param name="BTScannerName">Selected bluetooth scanner name.</param>
             <param name="rgbCommandBuff">Constrol command buffer.</param>
             <param name="CommandSize">The size of command buffer.</param>
             <returns>Success or failed on settings.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example enables Green LED of a selected bluetooth scanner with control command
             and bluetooth scanner name. It assumes the selected scanner name is in a listbox. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                                }       
                            }  
                     
                            private void btnSet_Click(object sender, EventArgs e)
                            {
                                // gets selected scanner name from a listbox
                                string inputName = null;
                                inputName = this.listBox1.SelectedItem.ToString();
            
                                //command buffer
                                int iscpSize = 3;
                                byte[] iscpCommand = new byte[iscpSize];
            
                                //enables Green LED 
                                iscpCommand[0] = 0x30;         //Group ID
                                iscpCommand[1] = 0x40;         //Function ID
                                iscpCommand[2] = 0x01;         //value 
            
                                bool isSccess = bcr.ControlCommandSettingsWithBTScannerName(inputName, iscpCommand, iscpSize);
            
                                if (isSccess)
                                    this.listBox1.Items.Add("success");
                                else
                                    this.listBox1.Items.Add("failed");
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub   
                     
                            Private Sub btnSet_Click(ByVal sender As Object, ByVal e As EventArgs) 
                                ' gets selected scanner name from a listbox
                                Dim inputName As String = Nothing 
                                inputName = Me.listBox1.SelectedItem.ToString() 
            
                                'command buffer 
                                Dim iscpSize As Integer = 3 
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {} 
            
                                'enables Green LED 
                                iscpCommand(0) = &amp;H30           'Group ID 
                                iscpCommand(1) = &amp;H40           'Function ID 
                                iscpCommand(2) = &amp;H1            'value 
                                Dim isSccess As Boolean = bcr.ControlCommandSettingsWithBTScannerName(inputName, iscpCommand, iscpSize) 
            
                                If isSccess Then 
                                    Me.listBox1.Items.Add("success") 
                                Else 
                                    Me.listBox1.Items.Add("failed") 
                                End If
                            End Sub 
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection.BarcodeReader.ControlCommandSettingsWithAllBTScanner(System.Byte[],System.Int32)">
             <exclude/>
             <summary>
             Sets value for all bluetooth scanners with control command.
             </summary>
             <param name="rgbCommandBuff">Control command buffer</param>
             <param name="CommandSize">The size of command buffer.</param>
             <returns>Success or failed on settings.</returns>
            <remarks>
             This method works only if "BTScanners" is specified as the ScannerName in 
             the BarcodeReader constructor.
            </remarks>
             <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
             Throws an exception when an error has occurred on bar code read methods and properties.
             </exception>
             <example>
             This example enables Green LED of a selected bluetooth scanner with control command
             and bluetooth scanner name. It assumes the selected scanner name is in a listbox. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");  
                     
                                    //command buffer
                                    int iscpSize = 3;
                                    byte[] iscpCommand = new byte[iscpSize];
            
                                    //enables Green LED 
                                    iscpCommand[0] = 0x30;         //Group ID
                                    iscpCommand[1] = 0x40;         //Function ID
                                    iscpCommand[2] = 0x01;         //value 
            
                                    bool isSccess = bcr.ControlCommandSettingsWithAllBTScanner(iscpCommand, iscpSize);
            
                                    if (isSccess)
                                        this.listBox1.Items.Add("success");
                                    else
                                        this.listBox1.Items.Add("failed"); 
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            
                                'command buffer 
                                Dim iscpSize As Integer = 3 
                                Dim iscpCommand As Byte() = New Byte(iscpSize - 1) {} 
            
                                'enables Green LED 
                                iscpCommand(0) = &amp;H30             'Group ID 
                                iscpCommand(1) = &amp;H40             'Function ID 
                                iscpCommand(2) = &amp;H1              'value 
                                Dim isSccess As Boolean = bcr.ControlCommandSettingsWithAllBTScanner(iscpCommand, iscpSize) 
            
                                If isSccess Then 
                                    Me.listBox1.Items.Add("success") 
                                Else 
                                    Me.listBox1.Items.Add("failed") 
                                End If 
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection.BarcodeReader.BarcodeRead">
            <summary>
            An event for notifying applications that a bar code has been read.
            </summary>  
            <remarks>
            See <see cref="F:Intermec.DataCollection.BarcodeReadEventArgs.SymbologyDetail"/> values of the read bar code.
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example uses BarcodeRead event with default scanner.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();              
                                    bcr.BarcodeRead += new BarcodeReadEventHandler(bcr_BarcodeRead);
                                    bcr.ThreadedRead(true);
                                }       
                            }
                        
                            void bcr_BarcodeRead(object sender, BarcodeReadEventArgs bre)
                            {
                                this.listBox1.Items.Add(bre.strDataBuffer);
                                this.listBox1.Items.Add(bre.SymbologyDetail.ToString());
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                                bcr.ThreadedRead(True)
                            End Sub
                      
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                Me.ListBox1.Items.Add(bre.strDataBuffer)
                                Me.ListBox1.Items.Add(bre.SymbologyDetail.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection.BarcodeReader.BarcodeReadError">
            <summary>
            An event for notifying applications that a error occurred.
            </summary> 
            <example>
            This example uses BarcodeReadError event.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader(256);
                                    bcr.BarcodeRead += new BarcodeReadEventHandler(bcr_BarcodeRead);
                                    bcr.BarcodeReadError += new BarcodeReadErrorEventHandler(bcr_BarcodeReadError);
                                    bcr.ThreadedRead(true);
                                }       
                            }
                            
                            void bcr_BarcodeReadError(object sender, BarcodeReadErrorEventArgs breErr)
                            {  
                                this.listBox1.Items.Add("Error = " + breErr.errMessage.ToString());
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader(256)
                                bcr.ThreadedRead(true)
                            End Sub
                      
                            Private Sub bcr_BarcodeReadError(ByVal sender As Object, ByVal breErr As Intermec.DataCollection.BarcodeReadErrorEventArgs) Handles bcr.BarcodeReadError
                                listBox1.Items.Add("Error = " + breErr.errMessage.ToString())                    
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection.BarcodeReader.NoBarcodeRead">
            <exclude />
            <summary>
            An event for notifying applications that a no barcode is read 
            when scan button is released.
            </summary>
            <example>
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();
                                    bcr.ThreadedRead(true);
                     
                                    bcr.EnableNoBarcodeReadEvent = true;
                                    bcr.NoBarcodeRead += new NoBarcodeReadEventHandler(bcr_NoBarcodeRead);
                                }       
                            }
                            
                            void bcr_NoBarcodeRead(object sender, NoBarcodeReadEventArgs noBre)
                            {                   
                                this.listBox1.Items.Add("noBre messge" + noBre.errMessage);                   
                            }                         
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                                bcr.ThreadedRead(true)
                            End Sub
                      
                            Private Sub bcr_NoBarcodeRead(ByVal sender As Object, ByVal noBre As Intermec.DataCollection.NoBarcodeReadEventArgs) Handles bcr.NoBarcodeRead
                                listBox1.Items.Add("noBre messge = " + noBre.errMessage.ToString())                    
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection.BarcodeReader.BarcodeReadCanceled">
            <exclude />
            <summary>Deprecated.</summary>
        </member>
        <member name="E:Intermec.DataCollection.BarcodeReader.ScannerNotify">
            <summary>
            An event that passes information about scanner events to the application as device added, 
            device removed, and device port state changed.
            </summary>
            <remarks>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multithreaded 
            operations. Any instance members are not guaranteed to be thread safe.
            </para>
            <para>
            The group event type is defined in <see cref="T:Intermec.DataCollection.BarcodeReader.NotifyGroupEvent"/>. The port state type is
            defined in <see cref="T:Intermec.DataCollection.BarcodeReader.NotifyPortState"/>.
            </para>
            <note>
            The event handler works only if "BTScanners" is specified as the DeviceName in the 
            BarcodeReader constructor.
            </note>        
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example uses ScannerNotify event.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader("BTScanners");
                                    bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                }       
                            }
                            
                            void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs sne)
                            {  
                                this.listBox1.Items.Add("GroupEvent = " + sne.GroupEvent);
                                this.listBox1.Items.Add("PortState = " + sne.PortState.ToString());
                                this.listBox1.Items.Add("PortID = " + sne.DeviceInfo.PortID.ToString());
                                this.listBox1.Items.Add("PortName = " + sne.DeviceInfo.PortName.ToString());
                                this.listBox1.Items.Add("DeviceHandle = " + sne.DeviceInfo.DeviceHandle.ToString());
                                this.listBox1.Items.Add("DeviceType = " + sne.DeviceInfo.DeviceType.ToString());
                                   
                                if(bcr.Devices != null)
                                {
                                    foreach (Device myDevice in bcr.Devices)
                                    {
                                        //enables all Bluetooth scanners
                                        if (myDevice.FriendlyName.Length &gt; 0)
                                        {
                                            myDevice.ScannerEnable = true; 
                                        }
                                    }
                                }             
                            }                          
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader("BTScanners")
                            End Sub
                      
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal sne As Intermec.DataCollection.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                Me.ListBox1.Items.Add("GroupEvent = " + sne.GroupEvent.ToString())
                                Me.ListBox1.Items.Add("PortState = " + sne.PortState.ToString())
                                Me.ListBox1.Items.Add("PortID = " + sne.DeviceInfo.PortID.ToString())
                                Me.ListBox1.Items.Add("PortName = " + sne.DeviceInfo.PortName.ToString())
                                Me.ListBox1.Items.Add("DeviceHandle = " + sne.DeviceInfo.DeviceHandle.ToString())
                                Me.ListBox1.Items.Add("DeviceType = " + sne.DeviceInfo.DeviceType.ToString())
            
                                If bcr.Devices IsNot Nothing Then 
                                    For Each myDevice As Device In bcr.Devices 
                                        'enables all Bluetooth scanners 
                                        If myDevice.FriendlyName.Length &gt; 0 Then 
                                            myDevice.ScannerEnable = True 
                                        End If 
                                    Next 
                                End If 
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.DeviceName">
            <exclude />
            <summary>
            Sets and gets scanner name. 
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.SetActionOnNextDevice">
            <exclude />
            <summary>Sets next device for actions.</summary>
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.FilterGrid">
            <summary>
            Sets and gets the grid filter string.
            </summary>
            <remarks>
            A string (up to 240 characters) that is used to filter and edit scanned data. 
            Setting this property disables the Grid of virtual wedge.
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example sets scanner to only bar codes containing number 789.
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();   
                                    bcr.FilterGrid = "789";
                                    this.listBox1.Items.Add("FilterGrid = " + bcr.FilterGrid.ToString());
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                                bcr.FilterGrid = "789"
                                Me.ListBox1.Items.Add("FilterGrid = " + bcr.FilterGrid.ToString())
                            End Sub              
                        End Class
                        </code>
            </example> 
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.ScannerOn">
            <summary>
            Turns the scanner on or off. <see cref="P:Intermec.DataCollection.BarcodeReader.ScannerEnable"/> must be set to True to set this property.
            </summary>
            <remarks>
            <para>
            True turns the scanner on as if you pressed the Scan button or pulled the trigger. False turns 
            the scanner off as if the button or trigger were released.
            </para>
            <para>
            <list type="bullet">
            <item>true = Turns the scanner on. Scanner stays on until a bar code is read.</item>
            <item>false = Turns the scanner off.</item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example sets and gets scanner on status. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();   
                                    bcr.ScannerOn = true;
                                    this.listBox1.Items.Add("ScannerOn = " + bcr.ScannerOn.ToString());
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                                bcr.ScannerOn = True
                                Me.ListBox1.Items.Add("ScannerOn = " + bcr.ScannerOn.ToString())
                            End Sub              
                        End Class
                        </code>
            </example> 
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.DataLED">
            <summary>
            Turns the data LED on or off. Supported only by Intermec computers with a data LED.
            </summary>
            <remarks>
            <para>
            This property only sets the state of the data LED (when available) on the Intermec computer, 
            and does not affect the state of the good read LED. Use <see cref="P:Intermec.DataCollection.BarcodeReader.ReadLED"/> to set the state 
            of the good read LED.
            </para>
            <list type="bullet">
            <item>true = Turns data LED on.</item>
            <item>false = Turns data LED off.</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example turns data LED on. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();   
                                    bcr.DataLED = true;
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 bcr = New BarcodeReader()
                                 bcr.DataLED = True
                            End Sub              
                        End Class
                        </code>
            </example> 
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.ReadLED">
            <summary>
            Turns the good read LED on or off. Supported only by Intermec computers with a good read LED.
            </summary>
            <remarks>
            <para>
            This property only sets the state of the good read LED (when available) on the Intermec computer. 
            To set the state of the data LED, use <see cref="P:Intermec.DataCollection.BarcodeReader.DataLED"/>.
            </para>
            <list type="bullet">
            <item>true = Turns Read LED on.</item>
            <item>false = Turns Read LED off.</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example turns read LED on. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();   
                                    bcr.ReadLED = true;
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 bcr = New BarcodeReader()
                                 bcr.ReadLED = True
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.ScannerEnable">
            <summary>
            Enables or disables the scanner. ScannerEnable must be set to True in order to set 
            the <see cref="P:Intermec.DataCollection.BarcodeReader.ScannerOn"/> property.
            </summary>
            <remarks>
            <list type="bullet">
            <item>true = Enables the scanner.</item>
            <item>false = Disables the scanner.</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.BarcodeReaderException">
            Throws an exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            This example sets and gets scanner enable status. 
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();   
                                    bcr.ScannerEnable = true;
                                    this.listBox1.Items.Add("ScannerEnable = " + bcr.ScannerEnable.ToString());
                                }       
                            }               
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 bcr = New BarcodeReader()
                                 bcr.ScannerEnable = True
                                 Me.ListBox1.Items.Add("ScannerEnable = " + bcr.ScannerEnable.ToString())
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.EnableNoBarcodeReadEvent">
            <exclude />
            <summary>
            Eanble/disable the NoBarcodeReadEvent
            </summary>
            <example>
            <code> 
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmBarcodeReader : Form
                            {
                                private Intermec.DataCollection.BarcodeReader bcr;
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
                                    bcr = new BarcodeReader();
                                    bcr.ThreadedRead(true);
                     
                                    bcr.EnableNoBarcodeReadEvent = true;
                                    bcr.NoBarcodeRead += new NoBarcodeReadEventHandler(bcr_NoBarcodeRead);
                                }       
                            }
                            
                            void bcr_NoBarcodeRead(object sender, NoBarcodeReadEventArgs noBre)
                            {                   
                                this.listBox1.Items.Add("noBre messge" + noBre.errMessage);                   
                            }                         
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmBarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection.BarcodeReader
                            Private Sub frmBarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                bcr = New BarcodeReader()
                                bcr.ThreadedRead(true)
                            End Sub
                      
                            Private Sub bcr_NoBarcodeRead(ByVal sender As Object, ByVal noBre As Intermec.DataCollection.NoBarcodeReadEventArgs) Handles bcr.NoBarcodeRead
                                listBox1.Items.Add("noBre messge = " + noBre.errMessage.ToString())                    
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.SymbologyMask">
            <exclude />
            <summary>Sets and gets symbology mask.</summary>        
        </member>
        <member name="P:Intermec.DataCollection.BarcodeReader.ContinuesScan">
            <exclude />
            <summary>Deprecated.</summary>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReader.NotifyGroupEvent">
            <summary>
            Defines the event type constants used in the GroupEvent field of 
            the <see cref="T:Intermec.DataCollection.ScannerNotifyEventArgs"/> class.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NotifyGroupEvent.DeviceAdded">
            <summary>A device was added to the scanner group.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NotifyGroupEvent.DeviceRemoved">
            <summary>A device was removed from the scanner group.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NotifyGroupEvent.DevicePortStateChange">
            <summary>The port state changed for a device in the scanner group.</summary>
        </member>
        <member name="T:Intermec.DataCollection.BarcodeReader.NotifyPortState">
            <summary>
            Defines the event type constants used in the PortState field of 
            the <see cref="T:Intermec.DataCollection.ScannerNotifyEventArgs"/> class.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NotifyPortState.DeviceDisabled">
            <summary>This device is disabled.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NotifyPortState.DeviceEnabled">
            <summary>This device is enabled.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NotifyPortState.DeviceInoperative">
            <summary>This device is inoperative.</summary>
        </member>
        <member name="F:Intermec.DataCollection.BarcodeReader.NotifyPortState.DeviceDisconnected">
            <summary>This device is disconnected.</summary>
        </member>
        <member name="T:Intermec.DataCollection.VirtualWedgeException">
            <exclude /> 
            <summary>
            This class has been deprecated and may not be supported by future revisions of this 
            Resource Kit.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.VirtualWedgeException.#ctor(System.Int32,System.String)">
            <summary> Deprecated </summary>
            <param name="hResult">The h result.</param>
            <param name="Message">The message.</param>
        </member>
        <member name="T:Intermec.DataCollection.Imager">
             <summary>
             If your Intermec computer is equipped with an imager, the Intermec.DataCollection.Imager class allows 
             you to use the imager as a simple camera for streaming video and individual snapshots.
             </summary>
            <remarks>
            <para>
             Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded operations. 
             Instance members are not guaranteed to be thread safe and each instance should be used only within a 
             single thread.
             </para>
             <note>
             <para>This class is not supported by the CN50.</para>
             <para>To avoid problems, be sure you call Imager.Dispose before you exit the application.</para>
             <para>When you create an instance of the Imager class, you also instantiated two instances (<see cref="F:Intermec.DataCollection.Imager.ImageConditioning"/>
             and <see cref="F:Intermec.DataCollection.Imager.SnapShotConditioning"/> ) of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class if image 
             conditioning is supported on a device.</para>
             </note>
             </remarks>   
             <example>
             The following snippet demonstrates creating an imager object and starting the video streaming.
            <code>
                    public class Form1 : System.Windows.Forms.Form
                    {
                      private PictureBox pictureImager;
                      private System.Windows.Forms.MainMenu mainMenu1;
                      private Intermec.DataCollection.Imager img;
            
                      public Form1()
                      {
                            InitializeComponent();
                            try
                            {
                                img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                img.VideoRunning = true;
            
                                 //disable screen logo
                                img.OnScreenLogo = Imager.OnScreenLogoType.Off;
            	  
                                if (img.ImageConditioningAvailable)
                                {
                                    img.ImageConditioning.ContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo;
                                }
                                else
                                {
                                    img.EnhanceContrast = true;
                                }
            
                            }
                            catch (Exception exp)
                            {
                                 MessageBox.Show(exp.Message);
                            }
                      }
                    ...
                    </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection.Imager.SnapShotConditioning">
            <summary>
            An object of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class for setting SnapShot image conditioning.
            It is instantiated when an Imager constructor is created if the current device supports image conditioning.
            </summary>
            <remarks>
            <para>
            For certain Intermec computers (CN3 and later), additional control is provided to support 
            using different image conditioning settings on SnapShots than on imaging (streaming video). 
            This field points to an object of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class 
            that sets those properties for SnapShots.
            </para>
            <para>
            To support legacy applications, some parameters passed into SnapShot 
            are used to set the appropriate image conditioning properties.
            </para>
            <para>
            Use the <see cref="P:Intermec.DataCollection.Imager.ImageConditioningAvailable"/> property to determine if the current device 
            supports image conditioning.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <example>
            This example sets and gets value with SnapShotConditioning.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1, Imager.PictureResolutionSize.Sixteenth);
                                    if (img.ImageConditioningAvailable)
                                    {
                                        img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None;
                                        this.listBox1.Items.Add("Subsampling = " + img.SnapShotConditioning.Subsampling.ToString());
            
                                        img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap;
                                        this.listBox1.Items.Add("OutputCompression = " + img.SnapShotConditioning.OutputCompression.ToString());
                                    }         
                                }
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth)
                                If img.ImageConditioningAvailable Then
                                    img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None 
                                    Me.listBox1.Items.Add("Subsampling = " + img.SnapShotConditioning.Subsampling.ToString()) 
            
                                    img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap 
                                    Me.listBox1.Items.Add("OutputCompression = " + img.SnapShotConditioning.OutputCompression.ToString()) 
                                End If   
                            End Sub
                        End Class
                        </code> 
            </example>   
            <seealso cref="F:Intermec.DataCollection.Imager.ImageConditioning"/>
            <seealso cref="M:Intermec.DataCollection.Imager.SnapShot(System.String)"/>
        </member>
        <member name="F:Intermec.DataCollection.Imager.ImageConditioning">
            <summary>
            An object of <see cref="T:Intermec.DataCollection.ImageConditioning"/> class that sets image conditioning properties for streaming video.
            It is instantiated when an Imager constructor is created if the current device supports image conditioning.
            </summary>
            <remarks>
            <para>
            For certain Intermec computers (CN3 and later), additional control is provided to support 
            using different image conditioning settings for SnapShots than for imaging (streaming video). 
            This field points to an object of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class 
            that sets those properties for imaging.
            </para>
            <para>
            Use the <see cref="P:Intermec.DataCollection.Imager.ImageConditioningAvailable"/> property to determine if the current device 
            supports image conditioning.
            </para>
            <para>        
            This object optimizes the following properties for streaming video:
            <list type="bullet">
            <item>
            OutputCompression: Defines if the image is compressed when moving from the imager 
            to the computer. This choice is made by the software based on the imager type and its 
            ability for high speed transfer.
            </item>
            <item>
            OutputCompressionQuality: Because speed is more important than image quality for streaming 
            video, when JPEG compression is used to transfer the image, the quality is set to 50%.
            </item>
            <item>
            Subsampling: For best streaming video speed, this is always set to OneOfEight. 
            </item>
            </list>
            </para>		
            </remarks>
            <seealso cref="F:Intermec.DataCollection.Imager.SnapShotConditioning"/>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <example>
            This example sets and gets Subsampling with ImageConditioning for streaming video.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1, Imager.PictureResolutionSize.Sixteenth);
                                    if (img.ImageConditioningAvailable)
                                    {
                                        img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight;
                                        this.listBox1.Items.Add("Subsampling = " + img.ImageConditioning.Subsampling.ToString());
                                    } 
                    
                                    img.VideoRunning = true;
                                }
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth)
                                If img.ImageConditioningAvailable Then
                                    img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight
                                    Me.ListBox1.Items.Add("Subsampling = " + img.ImageConditioning.Subsampling.ToString())
                                End If  
                     
                                img.VideoRunning = True
                            End Sub
                        End Class
                        </code> 
            </example>
        </member>
        <member name="M:Intermec.DataCollection.Imager.BeginInit">
            <exclude />
            <summary>A help method for supporting toolbox.</summary>
        </member>
        <member name="M:Intermec.DataCollection.Imager.EndInit">
            <exclude />
            <summary>A help method for supporting toolbox.</summary>
        </member>
        <member name="M:Intermec.DataCollection.Imager.ImagerInit(System.Windows.Forms.PictureBox,Intermec.DataCollection.Imager.PictureResolutionSize)">
            <summary>
            Imager init section
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.Imager.Finalize">
            <summary>
            Destructor, normally activated by the Dispose method.
            </summary>
            <exclude />
        </member>
        <member name="M:Intermec.DataCollection.Imager.Dispose">
            <summary>
            Releases all resources from the imager. Your application must call Dispose 
            before exiting, or the application may not exit properly.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection.Imager.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Intermec.DataCollection.Imager.#ctor">
            <summary>
            Constructor using the default picture box and the default picture resolution size (1 averaged pixel of 16)
            </summary>
            <remarks>
            <para>
            In general, the image resolution sets the amount of detail in the picture. The smaller 
            the resolution, the better the speed of streaming video. The highest image resolutions 
            for Intermec imagers are as follows:
            <list type="table">
            <listheader>
            <term>Imager Model</term>
            <description>Highest Resolution (in Pixels)</description>
            </listheader>
            <item>
            <term>EA11</term>
            <description>752 x 480</description>
            </item> 
            <item>
            <term>EA20X</term>
            <description>752 x 480</description>
            </item>
            <item>
            <term>EX25a, EX25b</term>
            <description>752 x 480</description>
            </item>   
            <item>
            <term>EA21</term>
            <description>1280 x 800</description>
            </item> 
            </list>
            </para>
            <para>
            To find the imager model, open Intermec Settings on the computer and choose 
            <b>Data Collection &gt; Internal Scanner &gt; Scanner Settings.</b>
            </para>
            <para>
            For snapshots, PictureResolutionSize can be overridden by specifying a size 
            in <see cref="M:Intermec.DataCollection.Imager.SnapShot(System.String,Intermec.DataCollection.Imager.PictureResolutionSize)"/> or
            <see cref="M:Intermec.DataCollection.Imager.SnapShot(System.String,Intermec.DataCollection.Imager.PictureResolutionSize,Intermec.DataCollection.Imager.FileModeType)"/>.
            For streaming video, PictureResolutionSize remains as set in the constructor, unless modified 
            by <see cref="P:Intermec.DataCollection.ImageConditioning.Subsampling"/>.
            </para>
            <para>
            If image conditioning is available, setting the PictureResolutionSize sets both 
            <see cref="F:Intermec.DataCollection.Imager.SnapShotConditioning"/> and <see cref="F:Intermec.DataCollection.Imager.ImageConditioning"/> 
            to the equivalent value. Use <see cref="P:Intermec.DataCollection.ImageConditioning.Subsampling"/> 
            of ImageConditioning class for a greater range of image resolutions.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>        
        </member>
        <member name="M:Intermec.DataCollection.Imager.#ctor(System.Windows.Forms.PictureBox)">
            <summary>
            Overload constructor using a specific Picture Box.
            </summary>
            <param name="Pb">Picture box to display streaming video in.</param>
            <remarks>
            <para>
            In general, the image resolution sets the amount of detail in the picture. The smaller 
            the resolution, the better the speed of streaming video. The highest image resolutions 
            for Intermec imagers are as follows:
            <list type="table">
            <listheader>
            <term>Imager Model</term>
            <description>Highest Resolution (in Pixels)</description>
            </listheader>
            <item>
            <term>EA11</term>
            <description>752 x 480</description>
            </item> 
            <item>
            <term>EA20X</term>
            <description>752 x 480</description>
            </item>
            <item>
            <term>EX25a, EX25b</term>
            <description>752 x 480</description>
            </item>   
            <item>
            <term>EA21</term>
            <description>1280 x 800</description>
            </item> 
            </list>
            </para>
            <para>
            To find the imager model, open Intermec Settings on the computer and choose 
            <b>Data Collection &gt; Internal Scanner &gt; Scanner Settings.</b>
            </para>
            <para>
            For snapshots, PictureResolutionSize can be overridden by specifying a size 
            in <see cref="M:Intermec.DataCollection.Imager.SnapShot(System.String,Intermec.DataCollection.Imager.PictureResolutionSize)"/> or
            <see cref="M:Intermec.DataCollection.Imager.SnapShot(System.String,Intermec.DataCollection.Imager.PictureResolutionSize,Intermec.DataCollection.Imager.FileModeType)"/>.
            For streaming video, PictureResolutionSize remains as set in the constructor, unless modified 
            by <see cref="P:Intermec.DataCollection.ImageConditioning.Subsampling"/>.
            </para>
            <para>
            If image conditioning is available, setting the PictureResolutionSize sets both 
            <see cref="F:Intermec.DataCollection.Imager.SnapShotConditioning"/> and <see cref="F:Intermec.DataCollection.Imager.ImageConditioning"/> 
            to the equivalent value. Use <see cref="P:Intermec.DataCollection.ImageConditioning.Subsampling"/> 
            of ImageConditioning class for a greater range of image resolutions.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>        
            <example>
            This example uses a specific Picture Box in constructor for streaming video 
            and assumes your application uses a PictureBox.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1);
                                    if (img.ImageConditioningAvailable)
                                    {
                                        img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight;
                                        img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None;
                                        img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap;
                                    }
                                    img.VideoRunning = true;
                                }
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(pictureBox1) 
                                If img.ImageConditioningAvailable Then 
                                    img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight 
                                    img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None 
                                    img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap 
                                End If 
                                img.VideoRunning = True 
                            End Sub
                        End Class
                        </code> 
            </example>
        </member>
        <member name="M:Intermec.DataCollection.Imager.#ctor(System.Windows.Forms.PictureBox,Intermec.DataCollection.Imager.PictureResolutionSize)">
            <summary>
            Overload constructor using a specific PictureBox and a specified image resolution 
            size in input stream.
            </summary>
            <param name="Pb">Picture box to display streaming video in.</param>
            <param name="size">Resolution size. Larger size slows down the video stream.</param>
            <remarks>
            <para>
            In general, the image resolution sets the amount of detail in the picture. The smaller 
            the resolution, the better the speed of streaming video. The highest image resolutions 
            for Intermec imagers are as follows:
            <list type="table">
            <listheader>
            <term>Imager Model</term>
            <description>Highest Resolution (in Pixels)</description>
            </listheader>
            <item>
            <term>EA11</term>
            <description>752 x 480</description>
            </item> 
            <item>
            <term>EA20X</term>
            <description>752 x 480</description>
            </item>
            <item>
            <term>EX25a, EX25b</term>
            <description>752 x 480</description>
            </item>   
            <item>
            <term>EA21</term>
            <description>1280 x 800</description>
            </item> 
            </list>
            </para>
            <para>
            To find the imager model, open Intermec Settings on the computer and choose 
            <b>Data Collection &gt; Internal Scanner &gt; Scanner Settings.</b>
            </para>
            <para>
            For snapshots, PictureResolutionSize can be overridden by specifying a size 
            in <see cref="M:Intermec.DataCollection.Imager.SnapShot(System.String,Intermec.DataCollection.Imager.PictureResolutionSize)"/> or
            <see cref="M:Intermec.DataCollection.Imager.SnapShot(System.String,Intermec.DataCollection.Imager.PictureResolutionSize,Intermec.DataCollection.Imager.FileModeType)"/>.
            For streaming video, PictureResolutionSize remains as set in the constructor, unless modified 
            by <see cref="P:Intermec.DataCollection.ImageConditioning.Subsampling"/>.
            </para>
            <para>
            If image conditioning is available, setting the PictureResolutionSize sets both 
            <see cref="F:Intermec.DataCollection.Imager.SnapShotConditioning"/> and <see cref="F:Intermec.DataCollection.Imager.ImageConditioning"/> 
            to the equivalent value. Use <see cref="P:Intermec.DataCollection.ImageConditioning.Subsampling"/> 
            of ImageConditioning class for a greater range of image resolutions.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example uses a specific Picture Box and resolution size in constructor for streaming video.
            It assumes your application uses a PictureBox.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
            				        if (img.ImageConditioningAvailable)
            				        {
            					        img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight;
            					        img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None;
            					        img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap;
            				        }
            				        img.VideoRunning = true;
                                }
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                                If img.ImageConditioningAvailable Then 
                                    img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight 
                                    img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None 
                                    img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap 
                                End If 
                                img.VideoRunning = True 
                            End Sub
                        End Class
                        </code> 
            </example>
        </member>
        <member name="M:Intermec.DataCollection.Imager.isInvalidFileName(System.String)">
            <summary>
            checks path with filename string and indicates if any invalid characters in the name.
            </summary>
            <param name="path">path with file name in it</param>
            <returns>TRUE if invalid character found.</returns>
        </member>
        <member name="M:Intermec.DataCollection.Imager.SnapShot(System.String)">
            <summary>
            Saves the image file in the current picture resolution size.
            </summary>
            <param name="path">The path to and name of the saved file.</param>
            <remarks>
            Defaults to full resolution size. 
            <para>
            The highest image resolutions for Intermec imagers are as follows:
            <list type="table">
            <listheader>
            <term>Imager Model</term>
            <description>Highest Resolution (in Pixels)</description>
            </listheader>
            <item>
            <term>EA11</term>
            <description>752 x 480</description>
            </item> 
            <item>
            <term>EA20X</term>
            <description>752 x 480</description>
            </item>
            <item>
            <term>EX25a, EX25b</term>
            <description>752 x 480</description>
            </item>   
            <item>
            <term>EA21</term>
            <description>1280 x 800</description>
            </item> 
            </list>
            </para>
            <para>
            To find the imager model, open Intermec Settings on the computer and choose 
            <b>Data Collection &gt; Internal Scanner &gt; Scanner Settings.</b>
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <exception cref="T:System.NullReferenceException">
            Throws exception when object is invalid;
            </exception>
            <example>
            This example saves the current image as a bitmap (BMP) file.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
            				        if (img.ImageConditioningAvailable)
            				        {
            					        img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight;
            					        img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None;
            					        img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap;
            				        }
            				        img.VideoRunning = true;
                                }
                                
                                private void btnSnapShot_Click(object sender, EventArgs e)
                                {
                                    string filePath = "\\MyImager.bmp";
                                    img.SnapShot(filePath);
                                }      
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                                If img.ImageConditioningAvailable Then 
                                    img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight 
                                    img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None 
                                    img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap 
                                End If 
                                img.VideoRunning = True 
                            End Sub
                     
                            Private Sub btnSnapShot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSnapShot.Click
                                Dim filePath As String = "\MyImager.bmp"
                                img.SnapShot(filePath)
                            End Sub
                        End Class
                        </code> 
            </example>
        </member>
        <member name="M:Intermec.DataCollection.Imager.SnapShot(System.String,Intermec.DataCollection.Imager.PictureResolutionSize)">
            <summary>
            Saves Image to a file, and allows setting resolution size.
            </summary>
            <param name="path">The path to and name of the saved file.</param>
            <param name="Resolution">Sets the resolution size of saved image file.</param>
            <remarks>
            If you specify a PictureResolutionSize, that value overwrites the size specified in the constructor.
            <para>
            The highest image resolutions for Intermec imagers are as follows:
            <list type="table">
            <listheader>
            <term>Imager Model</term>
            <description>Highest Resolution (in Pixels)</description>
            </listheader>
            <item>
            <term>EA11</term>
            <description>752 x 480</description>
            </item> 
            <item>
            <term>EA20X</term>
            <description>752 x 480</description>
            </item>
            <item>
            <term>EX25a, EX25b</term>
            <description>752 x 480</description>
            </item>   
            <item>
            <term>EA21</term>
            <description>1280 x 800</description>
            </item> 
            </list>
            </para>
            <para>
            To find the imager model, open Intermec Settings on the computer and choose 
            <b>Data Collection &gt; Internal Scanner &gt; Scanner Settings.</b>
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example saves the current image as a bitmap (BMP) file and sets picture resolution size to 1/16.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
            				        if (img.ImageConditioningAvailable)
            				        {
            					        img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight;
            					        img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None;
            					        img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap;
            				        }
            				        img.VideoRunning = true;
                                }
                                
                                private void btnSnapShot_Click(object sender, EventArgs e)
                                {
                                    string filePath = "\\MyImager.bmp";
                                    img.SnapShot(filePath, Imager.PictureResolutionSize.Sixteenth);
                                }      
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                                If img.ImageConditioningAvailable Then 
                                    img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight 
                                    img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None 
                                    img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap 
                                End If 
                                img.VideoRunning = True 
                            End Sub
                     
                            Private Sub btnSnapShot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSnapShot.Click
                                Dim filePath As String = "\MyImager.bmp"
                                img.SnapShot(filePath, Imager.PictureResolutionSize.Sixteenth)
                            End Sub
                        End Class
                        </code> 
            </example>
        </member>
        <member name="M:Intermec.DataCollection.Imager.SnapShot(System.String,Intermec.DataCollection.Imager.PictureResolutionSize,Intermec.DataCollection.Imager.FileModeType)">
            <summary>
            Saves Image to a file. Allows setting resolution and compression type.
            </summary>
            <param name="path">The path to and name of the saved file.</param>
            <param name="Resolution">Sets the resolution size of saved image file.</param>
            <param name="FileType">The type of file for the saved image as BMP, JPG, and TIFF. </param>
            <remarks>
            <para>
            If you specify a PictureResolutionSize, that value overwrites the size specified in the constructor.
            </para>
            <para>
            TIFF file is not available on platforms that do not support <see cref="T:Intermec.DataCollection.ImageConditioning"/> 
            image conditioning. Use <see cref="P:Intermec.DataCollection.Imager.ImageConditioningAvailable"/> to determine if the platform supports 
            image conditioning.
            </para>
            <para>
            The highest image resolutions for Intermec imagers are as follows:
            <list type="table">
            <listheader>
            <term>Imager Model</term>
            <description>Highest Resolution (in Pixels)</description>
            </listheader>
            <item>
            <term>EA11</term>
            <description>752 x 480</description>
            </item> 
            <item>
            <term>EA20X</term>
            <description>752 x 480</description>
            </item>
            <item>
            <term>EX25a, EX25b</term>
            <description>752 x 480</description>
            </item>   
            <item>
            <term>EA21</term>
            <description>1280 x 800</description>
            </item> 
            </list>
            </para>
            <para>
            To find the imager model, open Intermec Settings on the computer and choose 
            <b>Data Collection &gt; Internal Scanner &gt; Scanner Settings.</b>
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example saves the current image as a bitmap (BMP) file and sets picture resolution size to 1/16.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
            				        if (img.ImageConditioningAvailable)
            				        {
            					        img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight;
            					        img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None;
            					        img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap;
            				        }
            				        img.VideoRunning = true;
                                }
                                
                                private void btnSnapShot_Click(object sender, EventArgs e)
                                {
                                    string filePath = "\\MyImager.bmp";
                                    img.SnapShot(filePath, Imager.PictureResolutionSize.Sixteenth, Imager.FileModeType.BMP);
                                }      
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                                If img.ImageConditioningAvailable Then 
                                    img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight 
                                    img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None 
                                    img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap 
                                End If 
                                img.VideoRunning = True 
                            End Sub
                     
                            Private Sub btnSnapShot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSnapShot.Click
                                Dim filePath As String = "\MyImager.bmp"
                                img.SnapShot(filePath, Imager.PictureResolutionSize.Sixteenth, Imager.FileModeType.BMP)
                            End Sub
                        End Class
                        </code> 
            </example>
        </member>
        <member name="M:Intermec.DataCollection.Imager.GetRawImage(System.Byte[],Intermec.DataCollection.Imager.PictureResolutionSize)">
            <exclude />
            <summary>
            Stores image in a buffer and returns the size of image buffer.
            </summary>
            <param name="MyByteArray">Buffer to return image</param>
            <param name="Resolution">The resolution size.</param>
            <returns>Size of returned image buffer.</returns>
        </member>
        <member name="M:Intermec.DataCollection.Imager.CancelReadImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Intermec.DataCollection.Imager.hResult">
            <exclude />
        </member>
        <member name="P:Intermec.DataCollection.Imager.VideoRunning">
            <summary>
            Enables streaming video to the Imager pictureBox
            </summary>
            <remarks>
            <list type="bullet">
            <item>true = Video is streamed to the pictureBox.</item>
            <item>false = (Default) Video is not streamed.</item>
            </list>		
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example enables streaming video.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
            				        if (img.ImageConditioningAvailable)
            				        {
            					        img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight;
            					        img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None;
            					        img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap;
            				        }
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                                If img.ImageConditioningAvailable Then 
                                    img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight 
                                    img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None 
                                    img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap 
                                End If 
                      
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example> 
        </member>
        <member name="P:Intermec.DataCollection.Imager.ImageConditioningAvailable">
            <summary>
            Flag to indicate whether the conditioning objects SnapShotConditioning and ImageConditioning are 
            available on this device.
            </summary>
            <remarks>
            <para>
            Use this property at runtime to find out if your Intermec computer supports image conditioning, 
            which provides advanced settings that improve image quality. Image conditioning is supported by 
            most Intermec computers using the EA21 imager.
            </para>
            <para>
            The SnapShotConditioning and ImageConditioning object pointers are null if image conditioning 
            is not available on the computer where the application is running.
            </para>
            </remarks>
            <seealso cref="F:Intermec.DataCollection.Imager.SnapShotConditioning"/>
            <seealso cref="F:Intermec.DataCollection.Imager.ImageConditioning"/>
            <seealso cref="M:Intermec.DataCollection.Imager.SnapShot(System.String)"/>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example checks the image conditioning available status before using the ImageConditioning 
            for streaming video and SnapShotConditioning for snap shot settings.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
            				        if (img.ImageConditioningAvailable)
            				        {
            					        img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight;
            					        img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None;
            					        img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap;
            				        }
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                                If img.ImageConditioningAvailable Then 
                                    img.ImageConditioning.Subsampling = ImageConditioning.SubsamplingValue.OneOfEight 
                                    img.SnapShotConditioning.Subsampling = ImageConditioning.SubsamplingValue.None 
                                    img.SnapShotConditioning.OutputCompression = ImageConditioning.OutputCompressionValue.Bitmap 
                                End If 
                      
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example> 
        </member>
        <member name="P:Intermec.DataCollection.Imager.EnhanceContrast">
            <summary>
            Adjusts the image histogram to enhance the contrast.
            </summary>
            <remarks>  
            <para>
            <list type="bullet">
            <item>true = Contrast is enhanced.</item>
            <item>false = Contrast is unaffected (default).</item>
            </list>
            </para>
            <note>
            This property has been superseded by the <see cref="P:Intermec.DataCollection.ImageConditioning.ContrastEnhancement"/> 
            property of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class, which provides more options 
            if your computer supports image conditioning.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example enables enhance contrast. 
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //enables enhance contrast
                                    img.EnhanceContrast = true; 
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'enables enhance contrast
                                img.EnhanceContrast = True
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>  
        </member>
        <member name="P:Intermec.DataCollection.Imager.FlipPicture">
            <summary>
            Flips the image upside down. If image conditioning is available, use <see cref="P:Intermec.DataCollection.ImageConditioning.ImageRotation"/> 
            instead for more options.
            </summary>
            <remarks>
            <list type="bullet">
            <item>true = Picture is flipped upside down.</item>
            <item>false = Picture is unaffected (default).</item>
            </list>
            <note>
            If you also specify image rotation with the <see cref="P:Intermec.DataCollection.ImageConditioning.ImageRotation"/> property 
            of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class, FlipPicture is applied after image 
            rotation. For best results, do not use <see cref="P:Intermec.DataCollection.ImageConditioning.ImageRotation"/> with FlipPicture.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example enables flip picture. 
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //enable FlipPicture
                                    img.FlipPicture = true;
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'enable FlipPicture
                                img.FlipPicture = true
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example> 
        </member>
        <member name="P:Intermec.DataCollection.Imager.Brightness">
            <summary>
            Changes the brightness of the image.
            </summary>
            <remarks>
            <para>
            Value range 1 - 255, where 1 = maximum darkness and 255 = maximum brightness. The default is 128.
            </para>
            <note>
            When specified, this value is applied to both streaming video and SnapShots. To set a different 
            brightness level for streaming video or SnapShots, use the <see cref="P:Intermec.DataCollection.ImageConditioning.Brightness"/> 
            property of the <see cref="T:Intermec.DataCollection.ImageConditioning"/> class.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example sets brightness level. 
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //sets brightness level
                                    img.Brightness = 128;
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'sets brightness level
                                img.Brightness = 128
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.MirrorPicture">
            <summary>
            Flips the image on the vertical axis.
            </summary>
            <remarks>
            <list type="bullet">
            <item>true = The image is mirrored.</item>
            <item>false = The image is unaffected (default).</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example enables mirror picture option.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //enables mirror picture option
                                    img.MirrorPicture = true;
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'enables mirror picture option
                                img.MirrorPicture = true
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.OnScreenInfo">
            <summary>
            Shows imager information in image when enabled.
            </summary>
            <remarks>
            <list type="bullet">
            <item>true = Enabled</item>
            <item>false = Disabled (default)</item>
            </list>
            <note>
            When enabled, this property displays information about the quality and presentation speed of 
            an image. Use this property for debugging streaming video. OnScreenInfo does not display 
            anything in SnapShots.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example enables OnScreenInfo.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //enables OnScreenInfo
                                    img.OnScreenInfo = true;
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'enables OnScreenInfo
                                img.OnScreenInfo = true
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example> 
        </member>
        <member name="P:Intermec.DataCollection.Imager.OnScreenDateTime">
            <summary>
            Displays the current date and time at the specified position in the image. The date and time 
            also appear if SnapShot is called.
            </summary>
            <remarks>
            If you have also enabled a caption and placed it in the lower right position, the 
            caption overwrites the date and time.
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets Date Time position.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //sets data time position
                                    img.OnScreenDateTime = Imager.OnscreenDateTimePos.LowerRight;
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'sets data time position
                                img.OnScreenDateTime = Imager.OnscreenDateTimePos.LowerRight
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.OnScreenCaptionPosition">
            <summary>
            Displays the current caption at the specified position in the image.
            </summary>
            <remarks>
            If you have also enabled display of the date and time and placed it in the lower right 
            position, the caption overwrites the date and time.
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets caption information.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //sets caption information
                                    img.OnScreenCaption = "my imager";
                                    img.OnScreenCaptionPosition = Imager.OnscreenCaptionPos.Center;
            
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'sets caption information
                                img.OnScreenCaption = "my imager"
                                img.OnScreenCaptionPosition = Imager.OnscreenCaptionPos.Center
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.OnScreenCaption">
            <summary>
            Displays the specified caption in the image. To set the position of the caption, 
            call <see cref="P:Intermec.DataCollection.Imager.OnScreenCaptionPosition"/>.
            </summary>
            <remarks>
            A string specifying the caption that appears in the image. Range is 1 to 64 characters.
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets caption information.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //sets caption information
                                    img.OnScreenCaption = "my imager";
                                    img.OnScreenCaptionPosition = Imager.OnscreenCaptionPos.Center;
            
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'sets caption information
                                img.OnScreenCaption = "my imager"
                                img.OnScreenCaptionPosition = Imager.OnscreenCaptionPos.Center
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.OnScreenDrawMode">
            <summary>
            Sets the drawing mode for captions or the date and time when enabled.
            </summary>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets draw mode for data time information.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //display data and time at lower right corner 
                                    img.OnScreenDateTime = Imager.OnscreenDateTimePos.LowerRight;
                     
                                    //disable data and time with black characters on light background
                                    img.OnScreenDrawMode = Imager.OnscreenDrawModeType.Black;
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'display data and time at lower right corner  
                                img.OnScreenDateTime = Imager.OnscreenDateTimePos.LowerRight
                    
                                'disable data and time with black characters on light background
                                img.OnScreenDrawMode = Imager.OnscreenDrawModeType.Black
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.OnScreenLogo">
            <summary>
            Enables or disables showing the Intermec Logo in the image on startup.
            </summary>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example sets draw mode for data time information.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //disables logo 
                                    img.OnScreenLogo = Imager.OnScreenLogoType.Off;
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'disables logo 
                                img.OnScreenLogo = Imager.OnScreenLogoType.Off
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.SetIllumOn">
            <exclude/> 
            <summary>
            Controls LEDs for illuminating the imager view area.
            </summary>
            <remarks>
            <list type="bullet">
            <item>true = sets LEDs on</item>
            <item>false = turns LEDs off</item>
            </list>
            The SetIllumOn must set to true in order to use the <see cref="P:Intermec.DataCollection.Imager.IllumFlashing"/>.
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example enables LEDs for illuminating.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //enables LEDs 
                                    img.SetIllumOn = true;
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'enables LEDs 
                                img.SetIllumOn = true
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.IlluminationAimerStatus">
            <exclude /> 
        </member>
        <member name="P:Intermec.DataCollection.Imager.SetAimerOn">
            <exclude/> 
            <summary>
            Controls the display of a spotter beam or imager area outline lines which painted for certain imagers.  Not supported for all imagers.
            </summary>
            <remarks>
            <list type="bullet">
            <item>true = sets aimer on</item>
            <item>false = turns aimer off</item>
            </list>
            <para>
            The SetAimerOn must set to true in order to use <see cref="P:Intermec.DataCollection.Imager.AimerFlashing"/>.
            </para>
            <para>
            Not supported for all imagers.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            This example enables Aimer.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(this.pictureImager, Imager.PictureResolutionSize.Sixteenth);
                                    
                                    //enables Aimer 
                                    img.SetAimerOn = true;
                     
                                    //enables streaming video
            				        img.VideoRunning = true;
                                }                    
                            }
                         }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(Me.PictureBox1, Imager.PictureResolutionSize.Sixteenth) 
                      
                                'enables Aimer 
                                img.SetAimerOn = true
                        
                                'enables streaming video
                                img.VideoRunning = True 
                            End Sub         
                        End Class
                        </code> 
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.LightMode">
            <summary>
            Chooses the preferred mode for achieving the desired exposure. Exposure is a function of two 
            parameters: the imager aperture and the LEDs used to light the surface.
            </summary>
            <remarks>
            <para>
            The lighting mode determines how the scanner tries to achieve the <see cref="P:Intermec.DataCollection.Imager.LightGoal"/>. 
            Priority can be given to the illumination LEDs or to aperture (exposure time). Using the 
            IllumLedPriority setting results in shorter exposure time, therefore less risk of blurred images.
            </para>
            <para>
            Use the aperture priority setting when you have a shiny bar code label where high intensity 
            lighting will be too bright to decode it. 
            </para>
            <note>
            <list type="bullet">
            These values have been deprecated:
            <item>LedMode (identical to IllumLEDPriority)</item>
            <item>LightMode (identical to AperturePriority)</item>
            </list>
            </note>
            <para>
            It is not supported on EA30 scanners.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets and gets LightMode value.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1, Imager.PictureResolutionSize.Sixteenth);
                                    img.LightMode = Imager.ImagerLightModeType.IllumLedPriority;
                                    this.listBox1.Items.Add("LightMode = " + img.LightMode.ToString());
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(PictureBox1, Imager.PictureResolutionSize.Sixteenth)
                                img.LightMode = Imager.ImagerLightModeType.IllumLedPriority
                                Me.ListBox1.Items.Add("LightMode = " + img.LightMode.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.ImagerMode">
            <summary>
            Determines whether settings optimized for imaging or barcode decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets and gets ImagerMode value.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1, Imager.PictureResolutionSize.Sixteenth);
                     
                                    //sets and gets imager mode
                                    img.ImagerMode = Imager.ImagerModeType.Imaging;
                                    this.listBox1.Items.Add("ImagerMode = " + img.ImagerMode.ToString());
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(PictureBox1, Imager.PictureResolutionSize.Sixteenth)
                               
                                'sets and gets imager mode
                                img.ImagerMode = Imager.ImagerModeType.Imaging
                                Me.ListBox1.Items.Add("ImagerMode = " + img.ImagerMode.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.LightGoal">
            <summary>
            Specifies the goal for the average lighting of images.
            </summary>
            <remarks>
            <para>
            Range is 20 to 200 for most Intermec computers (EA11, EA11D, EA11-HD, EA21, EA21D). Range is 0 to 255 for EA20X. 
            And range is 14 to 63 for EX25. Default is 100 (60 for CK61 only). 
            Check Intermec Settings on the computer to determine the exact range for your computer 
            and configuration. 
            </para>
            <para>
            Lower values indicate a smaller aperture, which is fine for decoding most bar codes.
            </para>
            <para>
            Higher values indicate a wider aperture, which is better for dense bar codes but can lead to focus problems.
            </para>
            <note>        
            <para>
            The light goal is the desired "brightness" of the image, representing the best compromise 
            between image brightness and image clarity. 
            </para>
            <para>
            A lower value results in darker images with lower contrast. A higher value produces the 
            brightest images, but increases the chance that the image will be blurred or unfocused, 
            making a bar code in the image hard to decode.
            </para>
            <para>
            Use the <see cref="P:Intermec.DataCollection.Imager.LightMode"/> setting to determine how the scanner tries to achieve 
            the lighting goal.
            </para>
            <para>
            The default setting of 100 is optimal for typical everyday light. Intermec recommends 
            a value of 140 for darker areas. You should set this to the lowest possible value that 
            still results in good quality images.
            </para>
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets and gets LightGoal value.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1, Imager.PictureResolutionSize.Sixteenth);
                     
                                    //sets and gets lighting goal
                                    img.LightGoal = 140;
                                    this.listBox1.Items.Add("LightGoal = " + img.LightGoal.ToString());
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(PictureBox1, Imager.PictureResolutionSize.Sixteenth)
                               
                                'sets and gets lighting goal
                                img.LightGoal = 140
                                me.listBox1.Items.Add("LightGoal = " + img.LightGoal.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.IllumLevel">
            <summary>
            Adjusts brightness as a ratio of available lighting from imager LEDS. On some devices value range is 0 - 15, 
            on others 0 - 100.
            </summary>
            <remarks>
            <para>
            It sets the maximum brightness level of the illumination LEDs that can be used to achieve the 
            <see cref="P:Intermec.DataCollection.Imager.LightGoal"/>. 
            </para>
            <para>
            The valid range depends on the imager installed in your Intermec computer:
            <list type="table">
            <listheader>
            <term>Imager</term>
            <description>IllumLevel Range</description>
            <description>Default</description>
            </listheader>
            <item>
            <term>EA11, EA11D, EA11-HD</term>
            <description>0 to 100</description>
            <description>100 (brightest setting)</description>
            </item>
            <item>
            <term>EA20X</term>
            <description>0 to 15</description>
            <description>15 (brightest setting)</description>
            </item>
            <item>
            <term>EA21 (decoded)</term>
            <description>0 to 100</description>
            <description>100 (brightest setting)</description>
            </item>
            <item>
            <term>EA21U</term>
            <description>0 to 15</description>
            <description>15 (brightest setting)</description>
            </item>
            <item>
            <term>EX25</term>
            <description>0 to 100</description>
            <description>100 (brightest setting)</description>
            </item>
            </list>
            </para>
            <note>
            Set the illumination level on a lower setting when reading shiny bar code labels where high intensity 
            lighting will be too bright to decode the label.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets and gets Illumination level value.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1, Imager.PictureResolutionSize.Sixteenth);
                     
                                    //sets and gets Illumination level 
                                    img.IllumLevel = 10;
                                    this.listBox1.Items.Add("IllumLevel = " + img.IllumLevel.ToString());
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(PictureBox1, Imager.PictureResolutionSize.Sixteenth)
                               
                                'sets and gets Illumination level 
                                img.IllumLevel = 10
                                me.listBox1.Items.Add("IllumLevel = " + img.IllumLevel.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.AimerFlashing">
            <exclude/> 
            <summary>
            Controls the aimer flash during image acquisition.
            </summary>
            <remarks>
            The aimer which is used to aim at the bar code you want to read can be on all the time or flashing. 
            When using aimer flashing mode the aimer beam flashes so that you can position the aimer on the bar 
            code and then turns off to read the bar code. This ensure the least amount of interference from the 
            light of the aimer beam and optimizes decoding
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets and gets Aimer Flashing status.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1, Imager.PictureResolutionSize.Sixteenth);
                     
                                    //sets and gets Aimer Flashing status 
                                    img.AimerFlashing = Imager.AimerFlashingMode.Auto;
                                    this.listBox1.Items.Add("AimerFlashing = " + img.AimerFlashing.ToString());
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(PictureBox1, Imager.PictureResolutionSize.Sixteenth)
                               
                                'sets and gets Aimer Flashing status 
                                img.AimerFlashing = Imager.AimerFlashingMode.Auto
                                me.listBox1.Items.Add("AimerFlashing = " + img.AimerFlashing.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.IllumFlashing">
            <summary>
            Determines if the imager illumination LEDs are turned on continuously or only during image acquisition
            </summary>
            <remarks>
            In power saving mode the illumination LEDs are on only when necessary for decoding.
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets and gets illumination flashing status.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1, Imager.PictureResolutionSize.Sixteenth);
                     
                                    //sets and gets illumination flashing status 
                                    img.IllumFlashing = Imager.IllumFlashingMode.Auto;
                                    this.listBox1.Items.Add("IllumFlashing = " + img.IllumFlashing.ToString());
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(PictureBox1, Imager.PictureResolutionSize.Sixteenth)
                               
                                'sets and gets illumination flashing status 
                                img.IllumFlashing = Imager.IllumFlashingMode.Auto
                                me.listBox1.Items.Add("IllumFlashing = " + img.IllumFlashing.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection.Imager.Preset">
            <summary>
            Sets the imager to a specific mode. Each mode may include settings that are optimized for a 
            particular environment.
            </summary>
            <remarks>
            <para>
            When preset is set to Custom,  the illumination LEDs is unpredictable. The <see cref="P:Intermec.DataCollection.Imager.SetIllumOn"/> 
            may not reflect the real status of illumination LEDs. 
            </para>
            <para>
            The Preset is not supported for EX25 scanner.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection.ImagerException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            This example sets and gets Preset value.
            <code>
                        using Intermec.DataCollection;
                        namespace DataCollection
                        {
                            public partial class frmImager : Form
                            {
                                private Intermec.DataCollection.Imager img;
                                public frmImager()
                                {
                                    InitializeComponent();
                                    img = new Imager(pictureBox1, Imager.PictureResolutionSize.Sixteenth);
                     
                                    //sets and gets preset value 
                                    img.Preset = Imager.PresetMode.Standard_1D_2D;
                                    this.listBox1.Items.Add("Preset = " + img.Preset.ToString());
                                }
                            }
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection
                        Public Class frmImager
                            Friend WithEvents img As Intermec.DataCollection.Imager
                            Private Sub frmImager_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                img = New Imager(PictureBox1, Imager.PictureResolutionSize.Sixteenth)
                               
                                'sets and gets preset value 
                                img.Preset = Imager.PresetMode.Standard_1D_2D
                                me.listBox1.Items.Add("Preset = " + img.Preset.ToString())
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection.Imager.PictureResolutionSize">
            <summary>
            An enum data type used by the Imager constructors and SnapShot methods to set picture 
            resolution relative to the highest available value.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.PictureResolutionSize.Full">
            <summary>Highest available resolution for the imager. No subsampling is performed.</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.PictureResolutionSize.Quarter">
            <summary>1/4 of the highest available resolution. Returns one averaged pixel for each 4-pixel group.</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.PictureResolutionSize.Sixteenth">
            <summary>1/16 of the highest available resolution. Returns one averaged pixel for each 16-pixel group.</summary>
        </member>
        <member name="T:Intermec.DataCollection.Imager.ImagerLightModeType">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection.Imager.ImagerLightModeType.LightMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.ImagerLightModeType.IllumLedPriority">
            <summary>
            The LEDs turn on first. If there is not enough light for imaging, 
            the aperture opens to compensate.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.ImagerLightModeType.LedMode">
            <summary>
            Deprecated. Use as IllumLedPriority
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.ImagerLightModeType.AperturePriority">
            <summary>
            The aperture opens first. If there is not enough light for imaging, 
            the LEDs turn on to compensate.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.ImagerLightModeType.LightMode">
            <summary>deprecated. Use as AperturePriority</summary>
        </member>
        <member name="T:Intermec.DataCollection.Imager.FileModeType">
            <summary>
            An enum data type that determines compression format of saved image file.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.FileModeType.BMP">
            <summary>Saves the snapshot as a BMP file </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.FileModeType.JPG">
            <summary>Saves the snapshot as a JPEG file </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.FileModeType.RAWMEM">
            <summary>Saves the snapshot as a Raw Pixels file </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.FileModeType.TIFF">
            <summary>Saves the snapshot as a TIFF file. Supported only if the computer and firmware support image conditioning.</summary>
        </member>
        <member name="T:Intermec.DataCollection.Imager.ImagerModeType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.Imager.ImagerMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.ImagerModeType.Barcoding">
            <summary>Imager settings are optimized for reading bar codes.</summary>
            <remarks>
            Used primarily for reading 1-dimensional bar codes. This mode increases imaging 
            performance however you must hold the scanner horizontal to the bar code label. 
            You can read PDF417 codes when using this mode. 
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.Imager.ImagerModeType.Imaging">
            <summary>Imager settings are optimized for image capture (default).</summary>
            <remarks>
            Used for reading 2-dimensional bar codes. When using 2D imager mode you can read a bar 
            code holding the scanner in any direction (omni-directional scanning). You can also read 
            1D bar codes in this mode. 
            </remarks>
        </member>
        <member name="T:Intermec.DataCollection.Imager.IlluminationAimerActivationType">
            <exclude /> 
            <summary>
            An enum data type for the IlluminationAimerStatus property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.IlluminationAimerActivationType.AimerAndIllumEnabled">
            <summary> Enables both Aimer and Illumination LEDs </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.IlluminationAimerActivationType.AimerOnly">
            <summary> Enables Aimer </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.IlluminationAimerActivationType.IlluminationOnly">
            <summary> Enables Illumination LEDs </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.IlluminationAimerActivationType.AimerAndIllumDisabled">
            <summary> Disables both Aimer and Illumination LEDs</summary>
        </member>
        <member name="T:Intermec.DataCollection.Imager.OnscreenDateTimePos">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.Imager.OnScreenDateTime"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenDateTimePos.Disabled">
            <summary>Date and time will not be displayed in the streaming video or the snapshot</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenDateTimePos.LowerRight">
            <summary>Date and time will be displayed in the lower right corner of the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenDateTimePos.LowerLeft">
            <summary>Date and time will be displayed in the lower left corner of the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenDateTimePos.UpperRight">
            <summary>Date and time will be displayed in the upper right corner of the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenDateTimePos.UpperLeft">
            <summary>Date and time will be displayed in the upper left corner of the streaming video or the snapshot</summary>			
        </member>
        <member name="T:Intermec.DataCollection.Imager.OnscreenCaptionPos">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.Imager.OnScreenCaption"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenCaptionPos.Disabled">
            <summary>Developer created caption will not be displayed in the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenCaptionPos.LowerRight">
            <summary>Developer created caption  will be displayed in the lower right corner of the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenCaptionPos.LowerLeft">
            <summary>Developer created caption  will be displayed in the lower left corner of the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenCaptionPos.LowerCenter">
            <summary>Developer created caption  will be displayed in the lower center of the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenCaptionPos.UpperRight">
            <summary>Developer created caption  will be displayed in the upper right corner of the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenCaptionPos.UpperLeft">
            <summary>Developer created caption  will be displayed in the upper left corner of the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenCaptionPos.UpperCenter">
            <summary>Developer created caption  will be displayed in the upper center of the streaming video or the snapshot</summary>			
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenCaptionPos.Center">
            <summary>Developer created caption  will be displayed in the center of the streaming video or the snapshot</summary>			
        </member>
        <member name="T:Intermec.DataCollection.Imager.OnscreenDrawModeType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.Imager.OnScreenDrawMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenDrawModeType.Black">
            <summary>Black characters on light background</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnscreenDrawModeType.White">
            <summary>White characters on dark background</summary>
        </member>
        <member name="T:Intermec.DataCollection.Imager.PresetMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.Imager.Preset"/> property.
            </summary>
            <remarks>
            The Custom option is deprecated.
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection.Imager.PresetMode.Standard_1D_Only">
            <summary>Optimizes the imager for reading 1D bar codes</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.PresetMode.Standard_1D_2D">
            <summary>Optimizes the imager for reading 1D and 2D bar codes</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.PresetMode.BrightEnvironment_1D_2D">
            <summary>Optimizes the imager for reading 1D and 2D bar codes in bright light</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.PresetMode.ReflectiveSurface_1D_2D">
            <summary>Optimizes the imager for reading 1D and 2D bar codes on reflective surfaces</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.PresetMode.Custom">
            <summary>Deprecated.</summary>
        </member>
        <member name="T:Intermec.DataCollection.Imager.AimerFlashingMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.Imager.AimerFlashing"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.AimerFlashingMode.AlwaysOn">
            <summary>Aimer remains on while image being captured</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.AimerFlashingMode.Auto">
            <summary>Aimer flashes off while image being captured</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.AimerFlashingMode.AlwaysOff">
            <summary> Aimer flashes always off </summary>
        </member>
        <member name="T:Intermec.DataCollection.Imager.IllumFlashingMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.Imager.IllumFlashing"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.IllumFlashingMode.AlwaysOn">
            <summary>Illumination always on.</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.IllumFlashingMode.Auto">
            <summary>Illumination flashes on while image being captured</summary>
        </member>
        <member name="T:Intermec.DataCollection.Imager.OnScreenLogoType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection.Imager.OnScreenLogo"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnScreenLogoType.On">
            <summary>Allows brief display of Intermec logo when streaming starts</summary>
        </member>
        <member name="F:Intermec.DataCollection.Imager.OnScreenLogoType.Off">
            <summary>Inhibits display of Intermec logo when streaming starts</summary>
        </member>
    </members>
</doc>
